<?php
/**
 * ApiDetailedSongHistory
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiDetailedSongHistory Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiDetailedSongHistory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_DetailedSongHistory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sh_id' => 'int',
        'played_at' => 'int',
        'duration' => 'int',
        'playlist' => 'string',
        'streamer' => 'string',
        'is_request' => 'bool',
        'song' => '\AzuraCast\Model\ApiSong',
        'listeners_start' => 'int',
        'listeners_end' => 'int',
        'delta_total' => 'int',
        'is_visible' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sh_id' => null,
        'played_at' => null,
        'duration' => null,
        'playlist' => null,
        'streamer' => null,
        'is_request' => null,
        'song' => null,
        'listeners_start' => null,
        'listeners_end' => null,
        'delta_total' => null,
        'is_visible' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sh_id' => false,
        'played_at' => false,
        'duration' => false,
        'playlist' => true,
        'streamer' => true,
        'is_request' => false,
        'song' => false,
        'listeners_start' => false,
        'listeners_end' => false,
        'delta_total' => false,
        'is_visible' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sh_id' => 'sh_id',
        'played_at' => 'played_at',
        'duration' => 'duration',
        'playlist' => 'playlist',
        'streamer' => 'streamer',
        'is_request' => 'is_request',
        'song' => 'song',
        'listeners_start' => 'listeners_start',
        'listeners_end' => 'listeners_end',
        'delta_total' => 'delta_total',
        'is_visible' => 'is_visible'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sh_id' => 'setShId',
        'played_at' => 'setPlayedAt',
        'duration' => 'setDuration',
        'playlist' => 'setPlaylist',
        'streamer' => 'setStreamer',
        'is_request' => 'setIsRequest',
        'song' => 'setSong',
        'listeners_start' => 'setListenersStart',
        'listeners_end' => 'setListenersEnd',
        'delta_total' => 'setDeltaTotal',
        'is_visible' => 'setIsVisible'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sh_id' => 'getShId',
        'played_at' => 'getPlayedAt',
        'duration' => 'getDuration',
        'playlist' => 'getPlaylist',
        'streamer' => 'getStreamer',
        'is_request' => 'getIsRequest',
        'song' => 'getSong',
        'listeners_start' => 'getListenersStart',
        'listeners_end' => 'getListenersEnd',
        'delta_total' => 'getDeltaTotal',
        'is_visible' => 'getIsVisible'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sh_id', $data ?? [], null);
        $this->setIfExists('played_at', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('playlist', $data ?? [], null);
        $this->setIfExists('streamer', $data ?? [], null);
        $this->setIfExists('is_request', $data ?? [], null);
        $this->setIfExists('song', $data ?? [], null);
        $this->setIfExists('listeners_start', $data ?? [], null);
        $this->setIfExists('listeners_end', $data ?? [], null);
        $this->setIfExists('delta_total', $data ?? [], null);
        $this->setIfExists('is_visible', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sh_id
     *
     * @return int|null
     */
    public function getShId()
    {
        return $this->container['sh_id'];
    }

    /**
     * Sets sh_id
     *
     * @param int|null $sh_id Song history unique identifier
     *
     * @return self
     */
    public function setShId($sh_id)
    {
        if (is_null($sh_id)) {
            throw new \InvalidArgumentException('non-nullable sh_id cannot be null');
        }
        $this->container['sh_id'] = $sh_id;

        return $this;
    }

    /**
     * Gets played_at
     *
     * @return int|null
     */
    public function getPlayedAt()
    {
        return $this->container['played_at'];
    }

    /**
     * Sets played_at
     *
     * @param int|null $played_at UNIX timestamp when playback started.
     *
     * @return self
     */
    public function setPlayedAt($played_at)
    {
        if (is_null($played_at)) {
            throw new \InvalidArgumentException('non-nullable played_at cannot be null');
        }
        $this->container['played_at'] = $played_at;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Duration of the song in seconds
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets playlist
     *
     * @return string|null
     */
    public function getPlaylist()
    {
        return $this->container['playlist'];
    }

    /**
     * Sets playlist
     *
     * @param string|null $playlist Indicates the playlist that the song was played from, if available, or empty string if not.
     *
     * @return self
     */
    public function setPlaylist($playlist)
    {
        if (is_null($playlist)) {
            array_push($this->openAPINullablesSetToNull, 'playlist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist'] = $playlist;

        return $this;
    }

    /**
     * Gets streamer
     *
     * @return string|null
     */
    public function getStreamer()
    {
        return $this->container['streamer'];
    }

    /**
     * Sets streamer
     *
     * @param string|null $streamer Indicates the current streamer that was connected, if available, or empty string if not.
     *
     * @return self
     */
    public function setStreamer($streamer)
    {
        if (is_null($streamer)) {
            array_push($this->openAPINullablesSetToNull, 'streamer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('streamer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['streamer'] = $streamer;

        return $this;
    }

    /**
     * Gets is_request
     *
     * @return bool|null
     */
    public function getIsRequest()
    {
        return $this->container['is_request'];
    }

    /**
     * Sets is_request
     *
     * @param bool|null $is_request Indicates whether the song is a listener request.
     *
     * @return self
     */
    public function setIsRequest($is_request)
    {
        if (is_null($is_request)) {
            throw new \InvalidArgumentException('non-nullable is_request cannot be null');
        }
        $this->container['is_request'] = $is_request;

        return $this;
    }

    /**
     * Gets song
     *
     * @return \AzuraCast\Model\ApiSong|null
     */
    public function getSong()
    {
        return $this->container['song'];
    }

    /**
     * Sets song
     *
     * @param \AzuraCast\Model\ApiSong|null $song song
     *
     * @return self
     */
    public function setSong($song)
    {
        if (is_null($song)) {
            throw new \InvalidArgumentException('non-nullable song cannot be null');
        }
        $this->container['song'] = $song;

        return $this;
    }

    /**
     * Gets listeners_start
     *
     * @return int|null
     */
    public function getListenersStart()
    {
        return $this->container['listeners_start'];
    }

    /**
     * Sets listeners_start
     *
     * @param int|null $listeners_start Number of listeners when the song playback started.
     *
     * @return self
     */
    public function setListenersStart($listeners_start)
    {
        if (is_null($listeners_start)) {
            throw new \InvalidArgumentException('non-nullable listeners_start cannot be null');
        }
        $this->container['listeners_start'] = $listeners_start;

        return $this;
    }

    /**
     * Gets listeners_end
     *
     * @return int|null
     */
    public function getListenersEnd()
    {
        return $this->container['listeners_end'];
    }

    /**
     * Sets listeners_end
     *
     * @param int|null $listeners_end Number of listeners when song playback ended.
     *
     * @return self
     */
    public function setListenersEnd($listeners_end)
    {
        if (is_null($listeners_end)) {
            throw new \InvalidArgumentException('non-nullable listeners_end cannot be null');
        }
        $this->container['listeners_end'] = $listeners_end;

        return $this;
    }

    /**
     * Gets delta_total
     *
     * @return int|null
     */
    public function getDeltaTotal()
    {
        return $this->container['delta_total'];
    }

    /**
     * Sets delta_total
     *
     * @param int|null $delta_total The sum total change of listeners between the song's start and ending.
     *
     * @return self
     */
    public function setDeltaTotal($delta_total)
    {
        if (is_null($delta_total)) {
            throw new \InvalidArgumentException('non-nullable delta_total cannot be null');
        }
        $this->container['delta_total'] = $delta_total;

        return $this;
    }

    /**
     * Gets is_visible
     *
     * @return bool|null
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     *
     * @param bool|null $is_visible Whether the entry is visible on public playlists.
     *
     * @return self
     */
    public function setIsVisible($is_visible)
    {
        if (is_null($is_visible)) {
            throw new \InvalidArgumentException('non-nullable is_visible cannot be null');
        }
        $this->container['is_visible'] = $is_visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


