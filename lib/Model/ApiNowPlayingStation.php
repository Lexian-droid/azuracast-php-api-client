<?php
/**
 * ApiNowPlayingStation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiNowPlayingStation Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiNowPlayingStation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_NowPlaying_Station';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'shortcode' => 'string',
        'description' => 'string',
        'frontend' => 'string',
        'backend' => 'string',
        'timezone' => 'string',
        'listen_url' => 'mixed',
        'url' => 'string',
        'public_player_url' => 'mixed',
        'playlist_pls_url' => 'mixed',
        'playlist_m3u_url' => 'mixed',
        'is_public' => 'bool',
        'mounts' => '\AzuraCast\Model\ApiNowPlayingStationMount[]',
        'remotes' => '\AzuraCast\Model\ApiNowPlayingStationRemote[]',
        'hls_enabled' => 'bool',
        'hls_is_default' => 'bool',
        'hls_url' => 'mixed',
        'hls_listeners' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'shortcode' => null,
        'description' => null,
        'frontend' => null,
        'backend' => null,
        'timezone' => null,
        'listen_url' => null,
        'url' => null,
        'public_player_url' => null,
        'playlist_pls_url' => null,
        'playlist_m3u_url' => null,
        'is_public' => null,
        'mounts' => null,
        'remotes' => null,
        'hls_enabled' => null,
        'hls_is_default' => null,
        'hls_url' => null,
        'hls_listeners' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'shortcode' => false,
        'description' => false,
        'frontend' => false,
        'backend' => false,
        'timezone' => false,
        'listen_url' => true,
        'url' => true,
        'public_player_url' => true,
        'playlist_pls_url' => true,
        'playlist_m3u_url' => true,
        'is_public' => false,
        'mounts' => false,
        'remotes' => false,
        'hls_enabled' => false,
        'hls_is_default' => false,
        'hls_url' => true,
        'hls_listeners' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'shortcode' => 'shortcode',
        'description' => 'description',
        'frontend' => 'frontend',
        'backend' => 'backend',
        'timezone' => 'timezone',
        'listen_url' => 'listen_url',
        'url' => 'url',
        'public_player_url' => 'public_player_url',
        'playlist_pls_url' => 'playlist_pls_url',
        'playlist_m3u_url' => 'playlist_m3u_url',
        'is_public' => 'is_public',
        'mounts' => 'mounts',
        'remotes' => 'remotes',
        'hls_enabled' => 'hls_enabled',
        'hls_is_default' => 'hls_is_default',
        'hls_url' => 'hls_url',
        'hls_listeners' => 'hls_listeners'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'shortcode' => 'setShortcode',
        'description' => 'setDescription',
        'frontend' => 'setFrontend',
        'backend' => 'setBackend',
        'timezone' => 'setTimezone',
        'listen_url' => 'setListenUrl',
        'url' => 'setUrl',
        'public_player_url' => 'setPublicPlayerUrl',
        'playlist_pls_url' => 'setPlaylistPlsUrl',
        'playlist_m3u_url' => 'setPlaylistM3uUrl',
        'is_public' => 'setIsPublic',
        'mounts' => 'setMounts',
        'remotes' => 'setRemotes',
        'hls_enabled' => 'setHlsEnabled',
        'hls_is_default' => 'setHlsIsDefault',
        'hls_url' => 'setHlsUrl',
        'hls_listeners' => 'setHlsListeners'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'shortcode' => 'getShortcode',
        'description' => 'getDescription',
        'frontend' => 'getFrontend',
        'backend' => 'getBackend',
        'timezone' => 'getTimezone',
        'listen_url' => 'getListenUrl',
        'url' => 'getUrl',
        'public_player_url' => 'getPublicPlayerUrl',
        'playlist_pls_url' => 'getPlaylistPlsUrl',
        'playlist_m3u_url' => 'getPlaylistM3uUrl',
        'is_public' => 'getIsPublic',
        'mounts' => 'getMounts',
        'remotes' => 'getRemotes',
        'hls_enabled' => 'getHlsEnabled',
        'hls_is_default' => 'getHlsIsDefault',
        'hls_url' => 'getHlsUrl',
        'hls_listeners' => 'getHlsListeners'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('shortcode', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('frontend', $data ?? [], null);
        $this->setIfExists('backend', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('listen_url', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('public_player_url', $data ?? [], null);
        $this->setIfExists('playlist_pls_url', $data ?? [], null);
        $this->setIfExists('playlist_m3u_url', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('mounts', $data ?? [], null);
        $this->setIfExists('remotes', $data ?? [], null);
        $this->setIfExists('hls_enabled', $data ?? [], null);
        $this->setIfExists('hls_is_default', $data ?? [], null);
        $this->setIfExists('hls_url', $data ?? [], null);
        $this->setIfExists('hls_listeners', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Station ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Station name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortcode
     *
     * @return string|null
     */
    public function getShortcode()
    {
        return $this->container['shortcode'];
    }

    /**
     * Sets shortcode
     *
     * @param string|null $shortcode Station \"short code\", used for URL and folder paths
     *
     * @return self
     */
    public function setShortcode($shortcode)
    {
        if (is_null($shortcode)) {
            throw new \InvalidArgumentException('non-nullable shortcode cannot be null');
        }
        $this->container['shortcode'] = $shortcode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Station description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets frontend
     *
     * @return string|null
     */
    public function getFrontend()
    {
        return $this->container['frontend'];
    }

    /**
     * Sets frontend
     *
     * @param string|null $frontend Which broadcasting software (frontend) the station uses
     *
     * @return self
     */
    public function setFrontend($frontend)
    {
        if (is_null($frontend)) {
            throw new \InvalidArgumentException('non-nullable frontend cannot be null');
        }
        $this->container['frontend'] = $frontend;

        return $this;
    }

    /**
     * Gets backend
     *
     * @return string|null
     */
    public function getBackend()
    {
        return $this->container['backend'];
    }

    /**
     * Sets backend
     *
     * @param string|null $backend Which AutoDJ software (backend) the station uses
     *
     * @return self
     */
    public function setBackend($backend)
    {
        if (is_null($backend)) {
            throw new \InvalidArgumentException('non-nullable backend cannot be null');
        }
        $this->container['backend'] = $backend;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The station's IANA time zone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            throw new \InvalidArgumentException('non-nullable timezone cannot be null');
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets listen_url
     *
     * @return mixed|null
     */
    public function getListenUrl()
    {
        return $this->container['listen_url'];
    }

    /**
     * Sets listen_url
     *
     * @param mixed|null $listen_url The full URL to listen to the default mount of the station
     *
     * @return self
     */
    public function setListenUrl($listen_url)
    {
        if (is_null($listen_url)) {
            array_push($this->openAPINullablesSetToNull, 'listen_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('listen_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['listen_url'] = $listen_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url The public URL of the station.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets public_player_url
     *
     * @return mixed|null
     */
    public function getPublicPlayerUrl()
    {
        return $this->container['public_player_url'];
    }

    /**
     * Sets public_player_url
     *
     * @param mixed|null $public_player_url The public player URL for the station.
     *
     * @return self
     */
    public function setPublicPlayerUrl($public_player_url)
    {
        if (is_null($public_player_url)) {
            array_push($this->openAPINullablesSetToNull, 'public_player_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_player_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_player_url'] = $public_player_url;

        return $this;
    }

    /**
     * Gets playlist_pls_url
     *
     * @return mixed|null
     */
    public function getPlaylistPlsUrl()
    {
        return $this->container['playlist_pls_url'];
    }

    /**
     * Sets playlist_pls_url
     *
     * @param mixed|null $playlist_pls_url The playlist download URL in PLS format.
     *
     * @return self
     */
    public function setPlaylistPlsUrl($playlist_pls_url)
    {
        if (is_null($playlist_pls_url)) {
            array_push($this->openAPINullablesSetToNull, 'playlist_pls_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist_pls_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist_pls_url'] = $playlist_pls_url;

        return $this;
    }

    /**
     * Gets playlist_m3u_url
     *
     * @return mixed|null
     */
    public function getPlaylistM3uUrl()
    {
        return $this->container['playlist_m3u_url'];
    }

    /**
     * Sets playlist_m3u_url
     *
     * @param mixed|null $playlist_m3u_url The playlist download URL in M3U format.
     *
     * @return self
     */
    public function setPlaylistM3uUrl($playlist_m3u_url)
    {
        if (is_null($playlist_m3u_url)) {
            array_push($this->openAPINullablesSetToNull, 'playlist_m3u_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist_m3u_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist_m3u_url'] = $playlist_m3u_url;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public If the station is public (i.e. should be shown in listings of all stations)
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \AzuraCast\Model\ApiNowPlayingStationMount[]|null
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \AzuraCast\Model\ApiNowPlayingStationMount[]|null $mounts mounts
     *
     * @return self
     */
    public function setMounts($mounts)
    {
        if (is_null($mounts)) {
            throw new \InvalidArgumentException('non-nullable mounts cannot be null');
        }
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets remotes
     *
     * @return \AzuraCast\Model\ApiNowPlayingStationRemote[]|null
     */
    public function getRemotes()
    {
        return $this->container['remotes'];
    }

    /**
     * Sets remotes
     *
     * @param \AzuraCast\Model\ApiNowPlayingStationRemote[]|null $remotes remotes
     *
     * @return self
     */
    public function setRemotes($remotes)
    {
        if (is_null($remotes)) {
            throw new \InvalidArgumentException('non-nullable remotes cannot be null');
        }
        $this->container['remotes'] = $remotes;

        return $this;
    }

    /**
     * Gets hls_enabled
     *
     * @return bool|null
     */
    public function getHlsEnabled()
    {
        return $this->container['hls_enabled'];
    }

    /**
     * Sets hls_enabled
     *
     * @param bool|null $hls_enabled If the station has HLS streaming enabled.
     *
     * @return self
     */
    public function setHlsEnabled($hls_enabled)
    {
        if (is_null($hls_enabled)) {
            throw new \InvalidArgumentException('non-nullable hls_enabled cannot be null');
        }
        $this->container['hls_enabled'] = $hls_enabled;

        return $this;
    }

    /**
     * Gets hls_is_default
     *
     * @return bool|null
     */
    public function getHlsIsDefault()
    {
        return $this->container['hls_is_default'];
    }

    /**
     * Sets hls_is_default
     *
     * @param bool|null $hls_is_default If the HLS stream should be the default one for the station.
     *
     * @return self
     */
    public function setHlsIsDefault($hls_is_default)
    {
        if (is_null($hls_is_default)) {
            throw new \InvalidArgumentException('non-nullable hls_is_default cannot be null');
        }
        $this->container['hls_is_default'] = $hls_is_default;

        return $this;
    }

    /**
     * Gets hls_url
     *
     * @return mixed|null
     */
    public function getHlsUrl()
    {
        return $this->container['hls_url'];
    }

    /**
     * Sets hls_url
     *
     * @param mixed|null $hls_url The full URL to listen to the HLS stream for the station.
     *
     * @return self
     */
    public function setHlsUrl($hls_url)
    {
        if (is_null($hls_url)) {
            array_push($this->openAPINullablesSetToNull, 'hls_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hls_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hls_url'] = $hls_url;

        return $this;
    }

    /**
     * Gets hls_listeners
     *
     * @return int|null
     */
    public function getHlsListeners()
    {
        return $this->container['hls_listeners'];
    }

    /**
     * Sets hls_listeners
     *
     * @param int|null $hls_listeners HLS Listeners
     *
     * @return self
     */
    public function setHlsListeners($hls_listeners)
    {
        if (is_null($hls_listeners)) {
            throw new \InvalidArgumentException('non-nullable hls_listeners cannot be null');
        }
        $this->container['hls_listeners'] = $hls_listeners;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


