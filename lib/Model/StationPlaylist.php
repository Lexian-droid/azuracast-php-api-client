<?php
/**
 * StationPlaylist
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * StationPlaylist Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StationPlaylist implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StationPlaylist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => 'mixed',
        'source' => 'mixed',
        'order' => 'mixed',
        'remote_url' => 'string',
        'remote_type' => 'mixed',
        'remote_buffer' => 'int',
        'is_enabled' => 'bool',
        'is_jingle' => 'bool',
        'play_per_songs' => 'int',
        'play_per_minutes' => 'int',
        'play_per_hour_minute' => 'int',
        'weight' => 'int',
        'include_in_requests' => 'bool',
        'include_in_on_demand' => 'bool',
        'backend_options' => 'string',
        'avoid_duplicates' => 'bool',
        'schedule_items' => 'mixed[]',
        'podcasts' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'source' => null,
        'order' => null,
        'remote_url' => null,
        'remote_type' => null,
        'remote_buffer' => null,
        'is_enabled' => null,
        'is_jingle' => null,
        'play_per_songs' => null,
        'play_per_minutes' => null,
        'play_per_hour_minute' => null,
        'weight' => null,
        'include_in_requests' => null,
        'include_in_on_demand' => null,
        'backend_options' => null,
        'avoid_duplicates' => null,
        'schedule_items' => null,
        'podcasts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'name' => false,
        'type' => true,
        'source' => true,
        'order' => true,
        'remote_url' => true,
        'remote_type' => true,
        'remote_buffer' => false,
        'is_enabled' => false,
        'is_jingle' => false,
        'play_per_songs' => false,
        'play_per_minutes' => false,
        'play_per_hour_minute' => false,
        'weight' => false,
        'include_in_requests' => false,
        'include_in_on_demand' => false,
        'backend_options' => true,
        'avoid_duplicates' => false,
        'schedule_items' => false,
        'podcasts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'source' => 'source',
        'order' => 'order',
        'remote_url' => 'remote_url',
        'remote_type' => 'remote_type',
        'remote_buffer' => 'remote_buffer',
        'is_enabled' => 'is_enabled',
        'is_jingle' => 'is_jingle',
        'play_per_songs' => 'play_per_songs',
        'play_per_minutes' => 'play_per_minutes',
        'play_per_hour_minute' => 'play_per_hour_minute',
        'weight' => 'weight',
        'include_in_requests' => 'include_in_requests',
        'include_in_on_demand' => 'include_in_on_demand',
        'backend_options' => 'backend_options',
        'avoid_duplicates' => 'avoid_duplicates',
        'schedule_items' => 'schedule_items',
        'podcasts' => 'podcasts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'source' => 'setSource',
        'order' => 'setOrder',
        'remote_url' => 'setRemoteUrl',
        'remote_type' => 'setRemoteType',
        'remote_buffer' => 'setRemoteBuffer',
        'is_enabled' => 'setIsEnabled',
        'is_jingle' => 'setIsJingle',
        'play_per_songs' => 'setPlayPerSongs',
        'play_per_minutes' => 'setPlayPerMinutes',
        'play_per_hour_minute' => 'setPlayPerHourMinute',
        'weight' => 'setWeight',
        'include_in_requests' => 'setIncludeInRequests',
        'include_in_on_demand' => 'setIncludeInOnDemand',
        'backend_options' => 'setBackendOptions',
        'avoid_duplicates' => 'setAvoidDuplicates',
        'schedule_items' => 'setScheduleItems',
        'podcasts' => 'setPodcasts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'source' => 'getSource',
        'order' => 'getOrder',
        'remote_url' => 'getRemoteUrl',
        'remote_type' => 'getRemoteType',
        'remote_buffer' => 'getRemoteBuffer',
        'is_enabled' => 'getIsEnabled',
        'is_jingle' => 'getIsJingle',
        'play_per_songs' => 'getPlayPerSongs',
        'play_per_minutes' => 'getPlayPerMinutes',
        'play_per_hour_minute' => 'getPlayPerHourMinute',
        'weight' => 'getWeight',
        'include_in_requests' => 'getIncludeInRequests',
        'include_in_on_demand' => 'getIncludeInOnDemand',
        'backend_options' => 'getBackendOptions',
        'avoid_duplicates' => 'getAvoidDuplicates',
        'schedule_items' => 'getScheduleItems',
        'podcasts' => 'getPodcasts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('remote_url', $data ?? [], null);
        $this->setIfExists('remote_type', $data ?? [], null);
        $this->setIfExists('remote_buffer', $data ?? [], null);
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('is_jingle', $data ?? [], null);
        $this->setIfExists('play_per_songs', $data ?? [], null);
        $this->setIfExists('play_per_minutes', $data ?? [], null);
        $this->setIfExists('play_per_hour_minute', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('include_in_requests', $data ?? [], null);
        $this->setIfExists('include_in_on_demand', $data ?? [], null);
        $this->setIfExists('backend_options', $data ?? [], null);
        $this->setIfExists('avoid_duplicates', $data ?? [], null);
        $this->setIfExists('schedule_items', $data ?? [], null);
        $this->setIfExists('podcasts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return mixed|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param mixed|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return mixed|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param mixed|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets order
     *
     * @return mixed|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param mixed|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets remote_url
     *
     * @return string|null
     */
    public function getRemoteUrl()
    {
        return $this->container['remote_url'];
    }

    /**
     * Sets remote_url
     *
     * @param string|null $remote_url remote_url
     *
     * @return self
     */
    public function setRemoteUrl($remote_url)
    {
        if (is_null($remote_url)) {
            array_push($this->openAPINullablesSetToNull, 'remote_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remote_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remote_url'] = $remote_url;

        return $this;
    }

    /**
     * Gets remote_type
     *
     * @return mixed|null
     */
    public function getRemoteType()
    {
        return $this->container['remote_type'];
    }

    /**
     * Sets remote_type
     *
     * @param mixed|null $remote_type remote_type
     *
     * @return self
     */
    public function setRemoteType($remote_type)
    {
        if (is_null($remote_type)) {
            array_push($this->openAPINullablesSetToNull, 'remote_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remote_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remote_type'] = $remote_type;

        return $this;
    }

    /**
     * Gets remote_buffer
     *
     * @return int|null
     */
    public function getRemoteBuffer()
    {
        return $this->container['remote_buffer'];
    }

    /**
     * Sets remote_buffer
     *
     * @param int|null $remote_buffer The total time (in seconds) that Liquidsoap should buffer remote URL streams.
     *
     * @return self
     */
    public function setRemoteBuffer($remote_buffer)
    {
        if (is_null($remote_buffer)) {
            throw new \InvalidArgumentException('non-nullable remote_buffer cannot be null');
        }
        $this->container['remote_buffer'] = $remote_buffer;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled is_enabled
     *
     * @return self
     */
    public function setIsEnabled($is_enabled)
    {
        if (is_null($is_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_jingle
     *
     * @return bool|null
     */
    public function getIsJingle()
    {
        return $this->container['is_jingle'];
    }

    /**
     * Sets is_jingle
     *
     * @param bool|null $is_jingle If yes, do not send jingle metadata to AutoDJ or trigger web hooks.
     *
     * @return self
     */
    public function setIsJingle($is_jingle)
    {
        if (is_null($is_jingle)) {
            throw new \InvalidArgumentException('non-nullable is_jingle cannot be null');
        }
        $this->container['is_jingle'] = $is_jingle;

        return $this;
    }

    /**
     * Gets play_per_songs
     *
     * @return int|null
     */
    public function getPlayPerSongs()
    {
        return $this->container['play_per_songs'];
    }

    /**
     * Sets play_per_songs
     *
     * @param int|null $play_per_songs play_per_songs
     *
     * @return self
     */
    public function setPlayPerSongs($play_per_songs)
    {
        if (is_null($play_per_songs)) {
            throw new \InvalidArgumentException('non-nullable play_per_songs cannot be null');
        }
        $this->container['play_per_songs'] = $play_per_songs;

        return $this;
    }

    /**
     * Gets play_per_minutes
     *
     * @return int|null
     */
    public function getPlayPerMinutes()
    {
        return $this->container['play_per_minutes'];
    }

    /**
     * Sets play_per_minutes
     *
     * @param int|null $play_per_minutes play_per_minutes
     *
     * @return self
     */
    public function setPlayPerMinutes($play_per_minutes)
    {
        if (is_null($play_per_minutes)) {
            throw new \InvalidArgumentException('non-nullable play_per_minutes cannot be null');
        }
        $this->container['play_per_minutes'] = $play_per_minutes;

        return $this;
    }

    /**
     * Gets play_per_hour_minute
     *
     * @return int|null
     */
    public function getPlayPerHourMinute()
    {
        return $this->container['play_per_hour_minute'];
    }

    /**
     * Sets play_per_hour_minute
     *
     * @param int|null $play_per_hour_minute play_per_hour_minute
     *
     * @return self
     */
    public function setPlayPerHourMinute($play_per_hour_minute)
    {
        if (is_null($play_per_hour_minute)) {
            throw new \InvalidArgumentException('non-nullable play_per_hour_minute cannot be null');
        }
        $this->container['play_per_hour_minute'] = $play_per_hour_minute;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets include_in_requests
     *
     * @return bool|null
     */
    public function getIncludeInRequests()
    {
        return $this->container['include_in_requests'];
    }

    /**
     * Sets include_in_requests
     *
     * @param bool|null $include_in_requests include_in_requests
     *
     * @return self
     */
    public function setIncludeInRequests($include_in_requests)
    {
        if (is_null($include_in_requests)) {
            throw new \InvalidArgumentException('non-nullable include_in_requests cannot be null');
        }
        $this->container['include_in_requests'] = $include_in_requests;

        return $this;
    }

    /**
     * Gets include_in_on_demand
     *
     * @return bool|null
     */
    public function getIncludeInOnDemand()
    {
        return $this->container['include_in_on_demand'];
    }

    /**
     * Sets include_in_on_demand
     *
     * @param bool|null $include_in_on_demand Whether this playlist's media is included in 'on demand' download/streaming if enabled.
     *
     * @return self
     */
    public function setIncludeInOnDemand($include_in_on_demand)
    {
        if (is_null($include_in_on_demand)) {
            throw new \InvalidArgumentException('non-nullable include_in_on_demand cannot be null');
        }
        $this->container['include_in_on_demand'] = $include_in_on_demand;

        return $this;
    }

    /**
     * Gets backend_options
     *
     * @return string|null
     */
    public function getBackendOptions()
    {
        return $this->container['backend_options'];
    }

    /**
     * Sets backend_options
     *
     * @param string|null $backend_options backend_options
     *
     * @return self
     */
    public function setBackendOptions($backend_options)
    {
        if (is_null($backend_options)) {
            array_push($this->openAPINullablesSetToNull, 'backend_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backend_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backend_options'] = $backend_options;

        return $this;
    }

    /**
     * Gets avoid_duplicates
     *
     * @return bool|null
     */
    public function getAvoidDuplicates()
    {
        return $this->container['avoid_duplicates'];
    }

    /**
     * Sets avoid_duplicates
     *
     * @param bool|null $avoid_duplicates avoid_duplicates
     *
     * @return self
     */
    public function setAvoidDuplicates($avoid_duplicates)
    {
        if (is_null($avoid_duplicates)) {
            throw new \InvalidArgumentException('non-nullable avoid_duplicates cannot be null');
        }
        $this->container['avoid_duplicates'] = $avoid_duplicates;

        return $this;
    }

    /**
     * Gets schedule_items
     *
     * @return mixed[]|null
     */
    public function getScheduleItems()
    {
        return $this->container['schedule_items'];
    }

    /**
     * Sets schedule_items
     *
     * @param mixed[]|null $schedule_items StationSchedule>
     *
     * @return self
     */
    public function setScheduleItems($schedule_items)
    {
        if (is_null($schedule_items)) {
            throw new \InvalidArgumentException('non-nullable schedule_items cannot be null');
        }
        $this->container['schedule_items'] = $schedule_items;

        return $this;
    }

    /**
     * Gets podcasts
     *
     * @return mixed[]|null
     */
    public function getPodcasts()
    {
        return $this->container['podcasts'];
    }

    /**
     * Sets podcasts
     *
     * @param mixed[]|null $podcasts Podcast>
     *
     * @return self
     */
    public function setPodcasts($podcasts)
    {
        if (is_null($podcasts)) {
            throw new \InvalidArgumentException('non-nullable podcasts cannot be null');
        }
        $this->container['podcasts'] = $podcasts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


