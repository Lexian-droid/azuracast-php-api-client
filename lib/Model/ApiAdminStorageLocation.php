<?php
/**
 * ApiAdminStorageLocation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiAdminStorageLocation Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiAdminStorageLocation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_Admin_StorageLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,string>',
        'id' => 'int',
        'type' => 'string',
        'adapter' => 'string',
        'path' => 'string',
        's3_credential_key' => 'string',
        's3_credential_secret' => 'string',
        's3_region' => 'string',
        's3_version' => 'string',
        's3_bucket' => 'string',
        's3_endpoint' => 'string',
        'dropbox_app_key' => 'string',
        'dropbox_app_secret' => 'string',
        'dropbox_auth_token' => 'string',
        'sftp_host' => 'string',
        'sftp_username' => 'string',
        'sftp_password' => 'string',
        'sftp_port' => 'int',
        'sftp_private_key' => 'string',
        'sftp_private_key_pass_phrase' => 'string',
        'storage_quota' => 'string',
        'storage_quota_bytes' => 'string',
        'storage_used' => 'string',
        'storage_used_bytes' => 'string',
        'storage_available' => 'string',
        'storage_available_bytes' => 'string',
        'storage_used_percent' => 'int',
        'is_full' => 'bool',
        'uri' => 'string',
        'stations' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'id' => null,
        'type' => null,
        'adapter' => null,
        'path' => null,
        's3_credential_key' => null,
        's3_credential_secret' => null,
        's3_region' => null,
        's3_version' => null,
        's3_bucket' => null,
        's3_endpoint' => null,
        'dropbox_app_key' => null,
        'dropbox_app_secret' => null,
        'dropbox_auth_token' => null,
        'sftp_host' => null,
        'sftp_username' => null,
        'sftp_password' => null,
        'sftp_port' => null,
        'sftp_private_key' => null,
        'sftp_private_key_pass_phrase' => null,
        'storage_quota' => null,
        'storage_quota_bytes' => null,
        'storage_used' => null,
        'storage_used_bytes' => null,
        'storage_available' => null,
        'storage_available_bytes' => null,
        'storage_used_percent' => null,
        'is_full' => null,
        'uri' => null,
        'stations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'links' => false,
        'id' => false,
        'type' => false,
        'adapter' => false,
        'path' => true,
        's3_credential_key' => true,
        's3_credential_secret' => true,
        's3_region' => true,
        's3_version' => true,
        's3_bucket' => true,
        's3_endpoint' => true,
        'dropbox_app_key' => true,
        'dropbox_app_secret' => true,
        'dropbox_auth_token' => true,
        'sftp_host' => true,
        'sftp_username' => true,
        'sftp_password' => true,
        'sftp_port' => true,
        'sftp_private_key' => true,
        'sftp_private_key_pass_phrase' => true,
        'storage_quota' => true,
        'storage_quota_bytes' => true,
        'storage_used' => true,
        'storage_used_bytes' => true,
        'storage_available' => true,
        'storage_available_bytes' => true,
        'storage_used_percent' => true,
        'is_full' => false,
        'uri' => false,
        'stations' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'type' => 'type',
        'adapter' => 'adapter',
        'path' => 'path',
        's3_credential_key' => 's3CredentialKey',
        's3_credential_secret' => 's3CredentialSecret',
        's3_region' => 's3Region',
        's3_version' => 's3Version',
        's3_bucket' => 's3Bucket',
        's3_endpoint' => 's3Endpoint',
        'dropbox_app_key' => 'dropboxAppKey',
        'dropbox_app_secret' => 'dropboxAppSecret',
        'dropbox_auth_token' => 'dropboxAuthToken',
        'sftp_host' => 'sftpHost',
        'sftp_username' => 'sftpUsername',
        'sftp_password' => 'sftpPassword',
        'sftp_port' => 'sftpPort',
        'sftp_private_key' => 'sftpPrivateKey',
        'sftp_private_key_pass_phrase' => 'sftpPrivateKeyPassPhrase',
        'storage_quota' => 'storageQuota',
        'storage_quota_bytes' => 'storageQuotaBytes',
        'storage_used' => 'storageUsed',
        'storage_used_bytes' => 'storageUsedBytes',
        'storage_available' => 'storageAvailable',
        'storage_available_bytes' => 'storageAvailableBytes',
        'storage_used_percent' => 'storageUsedPercent',
        'is_full' => 'isFull',
        'uri' => 'uri',
        'stations' => 'stations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'type' => 'setType',
        'adapter' => 'setAdapter',
        'path' => 'setPath',
        's3_credential_key' => 'setS3CredentialKey',
        's3_credential_secret' => 'setS3CredentialSecret',
        's3_region' => 'setS3Region',
        's3_version' => 'setS3Version',
        's3_bucket' => 'setS3Bucket',
        's3_endpoint' => 'setS3Endpoint',
        'dropbox_app_key' => 'setDropboxAppKey',
        'dropbox_app_secret' => 'setDropboxAppSecret',
        'dropbox_auth_token' => 'setDropboxAuthToken',
        'sftp_host' => 'setSftpHost',
        'sftp_username' => 'setSftpUsername',
        'sftp_password' => 'setSftpPassword',
        'sftp_port' => 'setSftpPort',
        'sftp_private_key' => 'setSftpPrivateKey',
        'sftp_private_key_pass_phrase' => 'setSftpPrivateKeyPassPhrase',
        'storage_quota' => 'setStorageQuota',
        'storage_quota_bytes' => 'setStorageQuotaBytes',
        'storage_used' => 'setStorageUsed',
        'storage_used_bytes' => 'setStorageUsedBytes',
        'storage_available' => 'setStorageAvailable',
        'storage_available_bytes' => 'setStorageAvailableBytes',
        'storage_used_percent' => 'setStorageUsedPercent',
        'is_full' => 'setIsFull',
        'uri' => 'setUri',
        'stations' => 'setStations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'type' => 'getType',
        'adapter' => 'getAdapter',
        'path' => 'getPath',
        's3_credential_key' => 'getS3CredentialKey',
        's3_credential_secret' => 'getS3CredentialSecret',
        's3_region' => 'getS3Region',
        's3_version' => 'getS3Version',
        's3_bucket' => 'getS3Bucket',
        's3_endpoint' => 'getS3Endpoint',
        'dropbox_app_key' => 'getDropboxAppKey',
        'dropbox_app_secret' => 'getDropboxAppSecret',
        'dropbox_auth_token' => 'getDropboxAuthToken',
        'sftp_host' => 'getSftpHost',
        'sftp_username' => 'getSftpUsername',
        'sftp_password' => 'getSftpPassword',
        'sftp_port' => 'getSftpPort',
        'sftp_private_key' => 'getSftpPrivateKey',
        'sftp_private_key_pass_phrase' => 'getSftpPrivateKeyPassPhrase',
        'storage_quota' => 'getStorageQuota',
        'storage_quota_bytes' => 'getStorageQuotaBytes',
        'storage_used' => 'getStorageUsed',
        'storage_used_bytes' => 'getStorageUsedBytes',
        'storage_available' => 'getStorageAvailable',
        'storage_available_bytes' => 'getStorageAvailableBytes',
        'storage_used_percent' => 'getStorageUsedPercent',
        'is_full' => 'getIsFull',
        'uri' => 'getUri',
        'stations' => 'getStations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('adapter', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('s3_credential_key', $data ?? [], null);
        $this->setIfExists('s3_credential_secret', $data ?? [], null);
        $this->setIfExists('s3_region', $data ?? [], null);
        $this->setIfExists('s3_version', $data ?? [], null);
        $this->setIfExists('s3_bucket', $data ?? [], null);
        $this->setIfExists('s3_endpoint', $data ?? [], null);
        $this->setIfExists('dropbox_app_key', $data ?? [], null);
        $this->setIfExists('dropbox_app_secret', $data ?? [], null);
        $this->setIfExists('dropbox_auth_token', $data ?? [], null);
        $this->setIfExists('sftp_host', $data ?? [], null);
        $this->setIfExists('sftp_username', $data ?? [], null);
        $this->setIfExists('sftp_password', $data ?? [], null);
        $this->setIfExists('sftp_port', $data ?? [], null);
        $this->setIfExists('sftp_private_key', $data ?? [], null);
        $this->setIfExists('sftp_private_key_pass_phrase', $data ?? [], null);
        $this->setIfExists('storage_quota', $data ?? [], null);
        $this->setIfExists('storage_quota_bytes', $data ?? [], null);
        $this->setIfExists('storage_used', $data ?? [], null);
        $this->setIfExists('storage_used_bytes', $data ?? [], null);
        $this->setIfExists('storage_available', $data ?? [], null);
        $this->setIfExists('storage_available_bytes', $data ?? [], null);
        $this->setIfExists('storage_used_percent', $data ?? [], null);
        $this->setIfExists('is_full', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('stations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of storage location.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets adapter
     *
     * @return string|null
     */
    public function getAdapter()
    {
        return $this->container['adapter'];
    }

    /**
     * Sets adapter
     *
     * @param string|null $adapter The storage adapter to use for this location.
     *
     * @return self
     */
    public function setAdapter($adapter)
    {
        if (is_null($adapter)) {
            throw new \InvalidArgumentException('non-nullable adapter cannot be null');
        }
        $this->container['adapter'] = $adapter;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The local path, if the local adapter is used, or path prefix for S3/remote adapters.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets s3_credential_key
     *
     * @return string|null
     */
    public function getS3CredentialKey()
    {
        return $this->container['s3_credential_key'];
    }

    /**
     * Sets s3_credential_key
     *
     * @param string|null $s3_credential_key The credential key for S3 adapters.
     *
     * @return self
     */
    public function setS3CredentialKey($s3_credential_key)
    {
        if (is_null($s3_credential_key)) {
            array_push($this->openAPINullablesSetToNull, 's3_credential_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3_credential_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3_credential_key'] = $s3_credential_key;

        return $this;
    }

    /**
     * Gets s3_credential_secret
     *
     * @return string|null
     */
    public function getS3CredentialSecret()
    {
        return $this->container['s3_credential_secret'];
    }

    /**
     * Sets s3_credential_secret
     *
     * @param string|null $s3_credential_secret The credential secret for S3 adapters.
     *
     * @return self
     */
    public function setS3CredentialSecret($s3_credential_secret)
    {
        if (is_null($s3_credential_secret)) {
            array_push($this->openAPINullablesSetToNull, 's3_credential_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3_credential_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3_credential_secret'] = $s3_credential_secret;

        return $this;
    }

    /**
     * Gets s3_region
     *
     * @return string|null
     */
    public function getS3Region()
    {
        return $this->container['s3_region'];
    }

    /**
     * Sets s3_region
     *
     * @param string|null $s3_region The region for S3 adapters.
     *
     * @return self
     */
    public function setS3Region($s3_region)
    {
        if (is_null($s3_region)) {
            array_push($this->openAPINullablesSetToNull, 's3_region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3_region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3_region'] = $s3_region;

        return $this;
    }

    /**
     * Gets s3_version
     *
     * @return string|null
     */
    public function getS3Version()
    {
        return $this->container['s3_version'];
    }

    /**
     * Sets s3_version
     *
     * @param string|null $s3_version The API version for S3 adapters.
     *
     * @return self
     */
    public function setS3Version($s3_version)
    {
        if (is_null($s3_version)) {
            array_push($this->openAPINullablesSetToNull, 's3_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3_version'] = $s3_version;

        return $this;
    }

    /**
     * Gets s3_bucket
     *
     * @return string|null
     */
    public function getS3Bucket()
    {
        return $this->container['s3_bucket'];
    }

    /**
     * Sets s3_bucket
     *
     * @param string|null $s3_bucket The S3 bucket name for S3 adapters.
     *
     * @return self
     */
    public function setS3Bucket($s3_bucket)
    {
        if (is_null($s3_bucket)) {
            array_push($this->openAPINullablesSetToNull, 's3_bucket');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3_bucket', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3_bucket'] = $s3_bucket;

        return $this;
    }

    /**
     * Gets s3_endpoint
     *
     * @return string|null
     */
    public function getS3Endpoint()
    {
        return $this->container['s3_endpoint'];
    }

    /**
     * Sets s3_endpoint
     *
     * @param string|null $s3_endpoint The optional custom S3 endpoint S3 adapters.
     *
     * @return self
     */
    public function setS3Endpoint($s3_endpoint)
    {
        if (is_null($s3_endpoint)) {
            array_push($this->openAPINullablesSetToNull, 's3_endpoint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3_endpoint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3_endpoint'] = $s3_endpoint;

        return $this;
    }

    /**
     * Gets dropbox_app_key
     *
     * @return string|null
     */
    public function getDropboxAppKey()
    {
        return $this->container['dropbox_app_key'];
    }

    /**
     * Sets dropbox_app_key
     *
     * @param string|null $dropbox_app_key The optional Dropbox App Key.
     *
     * @return self
     */
    public function setDropboxAppKey($dropbox_app_key)
    {
        if (is_null($dropbox_app_key)) {
            array_push($this->openAPINullablesSetToNull, 'dropbox_app_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropbox_app_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropbox_app_key'] = $dropbox_app_key;

        return $this;
    }

    /**
     * Gets dropbox_app_secret
     *
     * @return string|null
     */
    public function getDropboxAppSecret()
    {
        return $this->container['dropbox_app_secret'];
    }

    /**
     * Sets dropbox_app_secret
     *
     * @param string|null $dropbox_app_secret The optional Dropbox App Secret.
     *
     * @return self
     */
    public function setDropboxAppSecret($dropbox_app_secret)
    {
        if (is_null($dropbox_app_secret)) {
            array_push($this->openAPINullablesSetToNull, 'dropbox_app_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropbox_app_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropbox_app_secret'] = $dropbox_app_secret;

        return $this;
    }

    /**
     * Gets dropbox_auth_token
     *
     * @return string|null
     */
    public function getDropboxAuthToken()
    {
        return $this->container['dropbox_auth_token'];
    }

    /**
     * Sets dropbox_auth_token
     *
     * @param string|null $dropbox_auth_token The optional Dropbox Auth Token.
     *
     * @return self
     */
    public function setDropboxAuthToken($dropbox_auth_token)
    {
        if (is_null($dropbox_auth_token)) {
            array_push($this->openAPINullablesSetToNull, 'dropbox_auth_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropbox_auth_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropbox_auth_token'] = $dropbox_auth_token;

        return $this;
    }

    /**
     * Gets sftp_host
     *
     * @return string|null
     */
    public function getSftpHost()
    {
        return $this->container['sftp_host'];
    }

    /**
     * Sets sftp_host
     *
     * @param string|null $sftp_host The host for SFTP adapters
     *
     * @return self
     */
    public function setSftpHost($sftp_host)
    {
        if (is_null($sftp_host)) {
            array_push($this->openAPINullablesSetToNull, 'sftp_host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftp_host', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftp_host'] = $sftp_host;

        return $this;
    }

    /**
     * Gets sftp_username
     *
     * @return string|null
     */
    public function getSftpUsername()
    {
        return $this->container['sftp_username'];
    }

    /**
     * Sets sftp_username
     *
     * @param string|null $sftp_username The username for SFTP adapters
     *
     * @return self
     */
    public function setSftpUsername($sftp_username)
    {
        if (is_null($sftp_username)) {
            array_push($this->openAPINullablesSetToNull, 'sftp_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftp_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftp_username'] = $sftp_username;

        return $this;
    }

    /**
     * Gets sftp_password
     *
     * @return string|null
     */
    public function getSftpPassword()
    {
        return $this->container['sftp_password'];
    }

    /**
     * Sets sftp_password
     *
     * @param string|null $sftp_password The password for SFTP adapters
     *
     * @return self
     */
    public function setSftpPassword($sftp_password)
    {
        if (is_null($sftp_password)) {
            array_push($this->openAPINullablesSetToNull, 'sftp_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftp_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftp_password'] = $sftp_password;

        return $this;
    }

    /**
     * Gets sftp_port
     *
     * @return int|null
     */
    public function getSftpPort()
    {
        return $this->container['sftp_port'];
    }

    /**
     * Sets sftp_port
     *
     * @param int|null $sftp_port The port for SFTP adapters
     *
     * @return self
     */
    public function setSftpPort($sftp_port)
    {
        if (is_null($sftp_port)) {
            array_push($this->openAPINullablesSetToNull, 'sftp_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftp_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftp_port'] = $sftp_port;

        return $this;
    }

    /**
     * Gets sftp_private_key
     *
     * @return string|null
     */
    public function getSftpPrivateKey()
    {
        return $this->container['sftp_private_key'];
    }

    /**
     * Sets sftp_private_key
     *
     * @param string|null $sftp_private_key The private key for SFTP adapters
     *
     * @return self
     */
    public function setSftpPrivateKey($sftp_private_key)
    {
        if (is_null($sftp_private_key)) {
            array_push($this->openAPINullablesSetToNull, 'sftp_private_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftp_private_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftp_private_key'] = $sftp_private_key;

        return $this;
    }

    /**
     * Gets sftp_private_key_pass_phrase
     *
     * @return string|null
     */
    public function getSftpPrivateKeyPassPhrase()
    {
        return $this->container['sftp_private_key_pass_phrase'];
    }

    /**
     * Sets sftp_private_key_pass_phrase
     *
     * @param string|null $sftp_private_key_pass_phrase The private key pass phrase for SFTP adapters
     *
     * @return self
     */
    public function setSftpPrivateKeyPassPhrase($sftp_private_key_pass_phrase)
    {
        if (is_null($sftp_private_key_pass_phrase)) {
            array_push($this->openAPINullablesSetToNull, 'sftp_private_key_pass_phrase');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftp_private_key_pass_phrase', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftp_private_key_pass_phrase'] = $sftp_private_key_pass_phrase;

        return $this;
    }

    /**
     * Gets storage_quota
     *
     * @return string|null
     */
    public function getStorageQuota()
    {
        return $this->container['storage_quota'];
    }

    /**
     * Sets storage_quota
     *
     * @param string|null $storage_quota storage_quota
     *
     * @return self
     */
    public function setStorageQuota($storage_quota)
    {
        if (is_null($storage_quota)) {
            array_push($this->openAPINullablesSetToNull, 'storage_quota');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_quota', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_quota'] = $storage_quota;

        return $this;
    }

    /**
     * Gets storage_quota_bytes
     *
     * @return string|null
     */
    public function getStorageQuotaBytes()
    {
        return $this->container['storage_quota_bytes'];
    }

    /**
     * Sets storage_quota_bytes
     *
     * @param string|null $storage_quota_bytes storage_quota_bytes
     *
     * @return self
     */
    public function setStorageQuotaBytes($storage_quota_bytes)
    {
        if (is_null($storage_quota_bytes)) {
            array_push($this->openAPINullablesSetToNull, 'storage_quota_bytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_quota_bytes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_quota_bytes'] = $storage_quota_bytes;

        return $this;
    }

    /**
     * Gets storage_used
     *
     * @return string|null
     */
    public function getStorageUsed()
    {
        return $this->container['storage_used'];
    }

    /**
     * Sets storage_used
     *
     * @param string|null $storage_used storage_used
     *
     * @return self
     */
    public function setStorageUsed($storage_used)
    {
        if (is_null($storage_used)) {
            array_push($this->openAPINullablesSetToNull, 'storage_used');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_used', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_used'] = $storage_used;

        return $this;
    }

    /**
     * Gets storage_used_bytes
     *
     * @return string|null
     */
    public function getStorageUsedBytes()
    {
        return $this->container['storage_used_bytes'];
    }

    /**
     * Sets storage_used_bytes
     *
     * @param string|null $storage_used_bytes storage_used_bytes
     *
     * @return self
     */
    public function setStorageUsedBytes($storage_used_bytes)
    {
        if (is_null($storage_used_bytes)) {
            array_push($this->openAPINullablesSetToNull, 'storage_used_bytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_used_bytes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_used_bytes'] = $storage_used_bytes;

        return $this;
    }

    /**
     * Gets storage_available
     *
     * @return string|null
     */
    public function getStorageAvailable()
    {
        return $this->container['storage_available'];
    }

    /**
     * Sets storage_available
     *
     * @param string|null $storage_available storage_available
     *
     * @return self
     */
    public function setStorageAvailable($storage_available)
    {
        if (is_null($storage_available)) {
            array_push($this->openAPINullablesSetToNull, 'storage_available');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_available', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_available'] = $storage_available;

        return $this;
    }

    /**
     * Gets storage_available_bytes
     *
     * @return string|null
     */
    public function getStorageAvailableBytes()
    {
        return $this->container['storage_available_bytes'];
    }

    /**
     * Sets storage_available_bytes
     *
     * @param string|null $storage_available_bytes storage_available_bytes
     *
     * @return self
     */
    public function setStorageAvailableBytes($storage_available_bytes)
    {
        if (is_null($storage_available_bytes)) {
            array_push($this->openAPINullablesSetToNull, 'storage_available_bytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_available_bytes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_available_bytes'] = $storage_available_bytes;

        return $this;
    }

    /**
     * Gets storage_used_percent
     *
     * @return int|null
     */
    public function getStorageUsedPercent()
    {
        return $this->container['storage_used_percent'];
    }

    /**
     * Sets storage_used_percent
     *
     * @param int|null $storage_used_percent storage_used_percent
     *
     * @return self
     */
    public function setStorageUsedPercent($storage_used_percent)
    {
        if (is_null($storage_used_percent)) {
            array_push($this->openAPINullablesSetToNull, 'storage_used_percent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_used_percent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storage_used_percent'] = $storage_used_percent;

        return $this;
    }

    /**
     * Gets is_full
     *
     * @return bool|null
     */
    public function getIsFull()
    {
        return $this->container['is_full'];
    }

    /**
     * Sets is_full
     *
     * @param bool|null $is_full is_full
     *
     * @return self
     */
    public function setIsFull($is_full)
    {
        if (is_null($is_full)) {
            throw new \InvalidArgumentException('non-nullable is_full cannot be null');
        }
        $this->container['is_full'] = $is_full;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri The URI associated with the storage location.
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets stations
     *
     * @return string[]|null
     */
    public function getStations()
    {
        return $this->container['stations'];
    }

    /**
     * Sets stations
     *
     * @param string[]|null $stations The stations using this storage location, if any.
     *
     * @return self
     */
    public function setStations($stations)
    {
        if (is_null($stations)) {
            array_push($this->openAPINullablesSetToNull, 'stations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stations'] = $stations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


