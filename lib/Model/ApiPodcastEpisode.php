<?php
/**
 * ApiPodcastEpisode
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiPodcastEpisode Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiPodcastEpisode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_PodcastEpisode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,string>',
        'id' => 'string',
        'title' => 'string',
        'link' => 'string',
        'description' => 'string',
        'description_short' => 'string',
        'explicit' => 'bool',
        'season_number' => 'int',
        'episode_number' => 'int',
        'created_at' => 'int',
        'publish_at' => 'int',
        'is_published' => 'bool',
        'has_media' => 'bool',
        'playlist_media_id' => 'string',
        'playlist_media' => '\AzuraCast\Model\ApiPodcastEpisodeAllOfPlaylistMedia',
        'media' => '\AzuraCast\Model\ApiPodcastEpisodeAllOfMedia',
        'has_custom_art' => 'bool',
        'art' => 'string',
        'art_updated_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'id' => null,
        'title' => null,
        'link' => null,
        'description' => null,
        'description_short' => null,
        'explicit' => null,
        'season_number' => null,
        'episode_number' => null,
        'created_at' => null,
        'publish_at' => null,
        'is_published' => null,
        'has_media' => null,
        'playlist_media_id' => null,
        'playlist_media' => null,
        'media' => null,
        'has_custom_art' => null,
        'art' => null,
        'art_updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'links' => false,
        'id' => false,
        'title' => false,
        'link' => true,
        'description' => false,
        'description_short' => false,
        'explicit' => false,
        'season_number' => true,
        'episode_number' => true,
        'created_at' => false,
        'publish_at' => false,
        'is_published' => false,
        'has_media' => false,
        'playlist_media_id' => true,
        'playlist_media' => true,
        'media' => true,
        'has_custom_art' => false,
        'art' => true,
        'art_updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'title' => 'title',
        'link' => 'link',
        'description' => 'description',
        'description_short' => 'description_short',
        'explicit' => 'explicit',
        'season_number' => 'season_number',
        'episode_number' => 'episode_number',
        'created_at' => 'created_at',
        'publish_at' => 'publish_at',
        'is_published' => 'is_published',
        'has_media' => 'has_media',
        'playlist_media_id' => 'playlist_media_id',
        'playlist_media' => 'playlist_media',
        'media' => 'media',
        'has_custom_art' => 'has_custom_art',
        'art' => 'art',
        'art_updated_at' => 'art_updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'title' => 'setTitle',
        'link' => 'setLink',
        'description' => 'setDescription',
        'description_short' => 'setDescriptionShort',
        'explicit' => 'setExplicit',
        'season_number' => 'setSeasonNumber',
        'episode_number' => 'setEpisodeNumber',
        'created_at' => 'setCreatedAt',
        'publish_at' => 'setPublishAt',
        'is_published' => 'setIsPublished',
        'has_media' => 'setHasMedia',
        'playlist_media_id' => 'setPlaylistMediaId',
        'playlist_media' => 'setPlaylistMedia',
        'media' => 'setMedia',
        'has_custom_art' => 'setHasCustomArt',
        'art' => 'setArt',
        'art_updated_at' => 'setArtUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'title' => 'getTitle',
        'link' => 'getLink',
        'description' => 'getDescription',
        'description_short' => 'getDescriptionShort',
        'explicit' => 'getExplicit',
        'season_number' => 'getSeasonNumber',
        'episode_number' => 'getEpisodeNumber',
        'created_at' => 'getCreatedAt',
        'publish_at' => 'getPublishAt',
        'is_published' => 'getIsPublished',
        'has_media' => 'getHasMedia',
        'playlist_media_id' => 'getPlaylistMediaId',
        'playlist_media' => 'getPlaylistMedia',
        'media' => 'getMedia',
        'has_custom_art' => 'getHasCustomArt',
        'art' => 'getArt',
        'art_updated_at' => 'getArtUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('description_short', $data ?? [], null);
        $this->setIfExists('explicit', $data ?? [], null);
        $this->setIfExists('season_number', $data ?? [], null);
        $this->setIfExists('episode_number', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('publish_at', $data ?? [], null);
        $this->setIfExists('is_published', $data ?? [], null);
        $this->setIfExists('has_media', $data ?? [], null);
        $this->setIfExists('playlist_media_id', $data ?? [], null);
        $this->setIfExists('playlist_media', $data ?? [], null);
        $this->setIfExists('media', $data ?? [], null);
        $this->setIfExists('has_custom_art', $data ?? [], null);
        $this->setIfExists('art', $data ?? [], null);
        $this->setIfExists('art_updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            array_push($this->openAPINullablesSetToNull, 'link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_short
     *
     * @return string|null
     */
    public function getDescriptionShort()
    {
        return $this->container['description_short'];
    }

    /**
     * Sets description_short
     *
     * @param string|null $description_short description_short
     *
     * @return self
     */
    public function setDescriptionShort($description_short)
    {
        if (is_null($description_short)) {
            throw new \InvalidArgumentException('non-nullable description_short cannot be null');
        }
        $this->container['description_short'] = $description_short;

        return $this;
    }

    /**
     * Gets explicit
     *
     * @return bool|null
     */
    public function getExplicit()
    {
        return $this->container['explicit'];
    }

    /**
     * Sets explicit
     *
     * @param bool|null $explicit explicit
     *
     * @return self
     */
    public function setExplicit($explicit)
    {
        if (is_null($explicit)) {
            throw new \InvalidArgumentException('non-nullable explicit cannot be null');
        }
        $this->container['explicit'] = $explicit;

        return $this;
    }

    /**
     * Gets season_number
     *
     * @return int|null
     */
    public function getSeasonNumber()
    {
        return $this->container['season_number'];
    }

    /**
     * Sets season_number
     *
     * @param int|null $season_number season_number
     *
     * @return self
     */
    public function setSeasonNumber($season_number)
    {
        if (is_null($season_number)) {
            array_push($this->openAPINullablesSetToNull, 'season_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('season_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['season_number'] = $season_number;

        return $this;
    }

    /**
     * Gets episode_number
     *
     * @return int|null
     */
    public function getEpisodeNumber()
    {
        return $this->container['episode_number'];
    }

    /**
     * Sets episode_number
     *
     * @param int|null $episode_number episode_number
     *
     * @return self
     */
    public function setEpisodeNumber($episode_number)
    {
        if (is_null($episode_number)) {
            array_push($this->openAPINullablesSetToNull, 'episode_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('episode_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['episode_number'] = $episode_number;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets publish_at
     *
     * @return int|null
     */
    public function getPublishAt()
    {
        return $this->container['publish_at'];
    }

    /**
     * Sets publish_at
     *
     * @param int|null $publish_at publish_at
     *
     * @return self
     */
    public function setPublishAt($publish_at)
    {
        if (is_null($publish_at)) {
            throw new \InvalidArgumentException('non-nullable publish_at cannot be null');
        }
        $this->container['publish_at'] = $publish_at;

        return $this;
    }

    /**
     * Gets is_published
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['is_published'];
    }

    /**
     * Sets is_published
     *
     * @param bool|null $is_published is_published
     *
     * @return self
     */
    public function setIsPublished($is_published)
    {
        if (is_null($is_published)) {
            throw new \InvalidArgumentException('non-nullable is_published cannot be null');
        }
        $this->container['is_published'] = $is_published;

        return $this;
    }

    /**
     * Gets has_media
     *
     * @return bool|null
     */
    public function getHasMedia()
    {
        return $this->container['has_media'];
    }

    /**
     * Sets has_media
     *
     * @param bool|null $has_media has_media
     *
     * @return self
     */
    public function setHasMedia($has_media)
    {
        if (is_null($has_media)) {
            throw new \InvalidArgumentException('non-nullable has_media cannot be null');
        }
        $this->container['has_media'] = $has_media;

        return $this;
    }

    /**
     * Gets playlist_media_id
     *
     * @return string|null
     */
    public function getPlaylistMediaId()
    {
        return $this->container['playlist_media_id'];
    }

    /**
     * Sets playlist_media_id
     *
     * @param string|null $playlist_media_id playlist_media_id
     *
     * @return self
     */
    public function setPlaylistMediaId($playlist_media_id)
    {
        if (is_null($playlist_media_id)) {
            array_push($this->openAPINullablesSetToNull, 'playlist_media_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist_media_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist_media_id'] = $playlist_media_id;

        return $this;
    }

    /**
     * Gets playlist_media
     *
     * @return \AzuraCast\Model\ApiPodcastEpisodeAllOfPlaylistMedia|null
     */
    public function getPlaylistMedia()
    {
        return $this->container['playlist_media'];
    }

    /**
     * Sets playlist_media
     *
     * @param \AzuraCast\Model\ApiPodcastEpisodeAllOfPlaylistMedia|null $playlist_media playlist_media
     *
     * @return self
     */
    public function setPlaylistMedia($playlist_media)
    {
        if (is_null($playlist_media)) {
            array_push($this->openAPINullablesSetToNull, 'playlist_media');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist_media', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist_media'] = $playlist_media;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \AzuraCast\Model\ApiPodcastEpisodeAllOfMedia|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \AzuraCast\Model\ApiPodcastEpisodeAllOfMedia|null $media media
     *
     * @return self
     */
    public function setMedia($media)
    {
        if (is_null($media)) {
            array_push($this->openAPINullablesSetToNull, 'media');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets has_custom_art
     *
     * @return bool|null
     */
    public function getHasCustomArt()
    {
        return $this->container['has_custom_art'];
    }

    /**
     * Sets has_custom_art
     *
     * @param bool|null $has_custom_art has_custom_art
     *
     * @return self
     */
    public function setHasCustomArt($has_custom_art)
    {
        if (is_null($has_custom_art)) {
            throw new \InvalidArgumentException('non-nullable has_custom_art cannot be null');
        }
        $this->container['has_custom_art'] = $has_custom_art;

        return $this;
    }

    /**
     * Gets art
     *
     * @return string|null
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     *
     * @param string|null $art art
     *
     * @return self
     */
    public function setArt($art)
    {
        if (is_null($art)) {
            array_push($this->openAPINullablesSetToNull, 'art');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('art', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets art_updated_at
     *
     * @return int|null
     */
    public function getArtUpdatedAt()
    {
        return $this->container['art_updated_at'];
    }

    /**
     * Sets art_updated_at
     *
     * @param int|null $art_updated_at art_updated_at
     *
     * @return self
     */
    public function setArtUpdatedAt($art_updated_at)
    {
        if (is_null($art_updated_at)) {
            throw new \InvalidArgumentException('non-nullable art_updated_at cannot be null');
        }
        $this->container['art_updated_at'] = $art_updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


