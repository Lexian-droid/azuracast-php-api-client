<?php
/**
 * ApiStationServiceStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiStationServiceStatus Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiStationServiceStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_StationServiceStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backend_running' => 'bool',
        'frontend_running' => 'bool',
        'station_has_started' => 'bool',
        'station_needs_restart' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backend_running' => null,
        'frontend_running' => null,
        'station_has_started' => null,
        'station_needs_restart' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'backend_running' => false,
        'frontend_running' => false,
        'station_has_started' => false,
        'station_needs_restart' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backend_running' => 'backend_running',
        'frontend_running' => 'frontend_running',
        'station_has_started' => 'station_has_started',
        'station_needs_restart' => 'station_needs_restart'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backend_running' => 'setBackendRunning',
        'frontend_running' => 'setFrontendRunning',
        'station_has_started' => 'setStationHasStarted',
        'station_needs_restart' => 'setStationNeedsRestart'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backend_running' => 'getBackendRunning',
        'frontend_running' => 'getFrontendRunning',
        'station_has_started' => 'getStationHasStarted',
        'station_needs_restart' => 'getStationNeedsRestart'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('backend_running', $data ?? [], null);
        $this->setIfExists('frontend_running', $data ?? [], null);
        $this->setIfExists('station_has_started', $data ?? [], null);
        $this->setIfExists('station_needs_restart', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backend_running
     *
     * @return bool|null
     */
    public function getBackendRunning()
    {
        return $this->container['backend_running'];
    }

    /**
     * Sets backend_running
     *
     * @param bool|null $backend_running backend_running
     *
     * @return self
     */
    public function setBackendRunning($backend_running)
    {
        if (is_null($backend_running)) {
            throw new \InvalidArgumentException('non-nullable backend_running cannot be null');
        }
        $this->container['backend_running'] = $backend_running;

        return $this;
    }

    /**
     * Gets frontend_running
     *
     * @return bool|null
     */
    public function getFrontendRunning()
    {
        return $this->container['frontend_running'];
    }

    /**
     * Sets frontend_running
     *
     * @param bool|null $frontend_running frontend_running
     *
     * @return self
     */
    public function setFrontendRunning($frontend_running)
    {
        if (is_null($frontend_running)) {
            throw new \InvalidArgumentException('non-nullable frontend_running cannot be null');
        }
        $this->container['frontend_running'] = $frontend_running;

        return $this;
    }

    /**
     * Gets station_has_started
     *
     * @return bool|null
     */
    public function getStationHasStarted()
    {
        return $this->container['station_has_started'];
    }

    /**
     * Sets station_has_started
     *
     * @param bool|null $station_has_started station_has_started
     *
     * @return self
     */
    public function setStationHasStarted($station_has_started)
    {
        if (is_null($station_has_started)) {
            throw new \InvalidArgumentException('non-nullable station_has_started cannot be null');
        }
        $this->container['station_has_started'] = $station_has_started;

        return $this;
    }

    /**
     * Gets station_needs_restart
     *
     * @return bool|null
     */
    public function getStationNeedsRestart()
    {
        return $this->container['station_needs_restart'];
    }

    /**
     * Sets station_needs_restart
     *
     * @param bool|null $station_needs_restart station_needs_restart
     *
     * @return self
     */
    public function setStationNeedsRestart($station_needs_restart)
    {
        if (is_null($station_needs_restart)) {
            throw new \InvalidArgumentException('non-nullable station_needs_restart cannot be null');
        }
        $this->container['station_needs_restart'] = $station_needs_restart;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


