<?php
/**
 * StationPlaylist
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * StationPlaylist Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StationPlaylist implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StationPlaylist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => 'mixed',
        'source' => 'mixed',
        'order' => 'mixed',
        'remoteUrl' => 'string',
        'remoteType' => 'mixed',
        'remoteBuffer' => 'int',
        'isEnabled' => 'bool',
        'isJingle' => 'bool',
        'playPerSongs' => 'int',
        'playPerMinutes' => 'int',
        'playPerHourMinute' => 'int',
        'weight' => 'int',
        'includeInRequests' => 'bool',
        'includeInOnDemand' => 'bool',
        'backendOptions' => 'string',
        'avoidDuplicates' => 'bool',
        'scheduleItems' => 'mixed[]',
        'podcasts' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'source' => null,
        'order' => null,
        'remoteUrl' => null,
        'remoteType' => null,
        'remoteBuffer' => null,
        'isEnabled' => null,
        'isJingle' => null,
        'playPerSongs' => null,
        'playPerMinutes' => null,
        'playPerHourMinute' => null,
        'weight' => null,
        'includeInRequests' => null,
        'includeInOnDemand' => null,
        'backendOptions' => null,
        'avoidDuplicates' => null,
        'scheduleItems' => null,
        'podcasts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'name' => false,
        'type' => true,
        'source' => true,
        'order' => true,
        'remoteUrl' => true,
        'remoteType' => true,
        'remoteBuffer' => false,
        'isEnabled' => false,
        'isJingle' => false,
        'playPerSongs' => false,
        'playPerMinutes' => false,
        'playPerHourMinute' => false,
        'weight' => false,
        'includeInRequests' => false,
        'includeInOnDemand' => false,
        'backendOptions' => true,
        'avoidDuplicates' => false,
        'scheduleItems' => false,
        'podcasts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'source' => 'source',
        'order' => 'order',
        'remoteUrl' => 'remote_url',
        'remoteType' => 'remote_type',
        'remoteBuffer' => 'remote_buffer',
        'isEnabled' => 'is_enabled',
        'isJingle' => 'is_jingle',
        'playPerSongs' => 'play_per_songs',
        'playPerMinutes' => 'play_per_minutes',
        'playPerHourMinute' => 'play_per_hour_minute',
        'weight' => 'weight',
        'includeInRequests' => 'include_in_requests',
        'includeInOnDemand' => 'include_in_on_demand',
        'backendOptions' => 'backend_options',
        'avoidDuplicates' => 'avoid_duplicates',
        'scheduleItems' => 'schedule_items',
        'podcasts' => 'podcasts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'source' => 'setSource',
        'order' => 'setOrder',
        'remoteUrl' => 'setRemoteUrl',
        'remoteType' => 'setRemoteType',
        'remoteBuffer' => 'setRemoteBuffer',
        'isEnabled' => 'setIsEnabled',
        'isJingle' => 'setIsJingle',
        'playPerSongs' => 'setPlayPerSongs',
        'playPerMinutes' => 'setPlayPerMinutes',
        'playPerHourMinute' => 'setPlayPerHourMinute',
        'weight' => 'setWeight',
        'includeInRequests' => 'setIncludeInRequests',
        'includeInOnDemand' => 'setIncludeInOnDemand',
        'backendOptions' => 'setBackendOptions',
        'avoidDuplicates' => 'setAvoidDuplicates',
        'scheduleItems' => 'setScheduleItems',
        'podcasts' => 'setPodcasts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'source' => 'getSource',
        'order' => 'getOrder',
        'remoteUrl' => 'getRemoteUrl',
        'remoteType' => 'getRemoteType',
        'remoteBuffer' => 'getRemoteBuffer',
        'isEnabled' => 'getIsEnabled',
        'isJingle' => 'getIsJingle',
        'playPerSongs' => 'getPlayPerSongs',
        'playPerMinutes' => 'getPlayPerMinutes',
        'playPerHourMinute' => 'getPlayPerHourMinute',
        'weight' => 'getWeight',
        'includeInRequests' => 'getIncludeInRequests',
        'includeInOnDemand' => 'getIncludeInOnDemand',
        'backendOptions' => 'getBackendOptions',
        'avoidDuplicates' => 'getAvoidDuplicates',
        'scheduleItems' => 'getScheduleItems',
        'podcasts' => 'getPodcasts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('remoteUrl', $data ?? [], null);
        $this->setIfExists('remoteType', $data ?? [], null);
        $this->setIfExists('remoteBuffer', $data ?? [], null);
        $this->setIfExists('isEnabled', $data ?? [], null);
        $this->setIfExists('isJingle', $data ?? [], null);
        $this->setIfExists('playPerSongs', $data ?? [], null);
        $this->setIfExists('playPerMinutes', $data ?? [], null);
        $this->setIfExists('playPerHourMinute', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('includeInRequests', $data ?? [], null);
        $this->setIfExists('includeInOnDemand', $data ?? [], null);
        $this->setIfExists('backendOptions', $data ?? [], null);
        $this->setIfExists('avoidDuplicates', $data ?? [], null);
        $this->setIfExists('scheduleItems', $data ?? [], null);
        $this->setIfExists('podcasts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return mixed|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param mixed|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return mixed|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param mixed|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets order
     *
     * @return mixed|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param mixed|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets remoteUrl
     *
     * @return string|null
     */
    public function getRemoteUrl()
    {
        return $this->container['remoteUrl'];
    }

    /**
     * Sets remoteUrl
     *
     * @param string|null $remoteUrl remoteUrl
     *
     * @return self
     */
    public function setRemoteUrl($remoteUrl)
    {
        if (is_null($remoteUrl)) {
            array_push($this->openAPINullablesSetToNull, 'remoteUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remoteUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remoteUrl'] = $remoteUrl;

        return $this;
    }

    /**
     * Gets remoteType
     *
     * @return mixed|null
     */
    public function getRemoteType()
    {
        return $this->container['remoteType'];
    }

    /**
     * Sets remoteType
     *
     * @param mixed|null $remoteType remoteType
     *
     * @return self
     */
    public function setRemoteType($remoteType)
    {
        if (is_null($remoteType)) {
            array_push($this->openAPINullablesSetToNull, 'remoteType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remoteType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['remoteType'] = $remoteType;

        return $this;
    }

    /**
     * Gets remoteBuffer
     *
     * @return int|null
     */
    public function getRemoteBuffer()
    {
        return $this->container['remoteBuffer'];
    }

    /**
     * Sets remoteBuffer
     *
     * @param int|null $remoteBuffer The total time (in seconds) that Liquidsoap should buffer remote URL streams.
     *
     * @return self
     */
    public function setRemoteBuffer($remoteBuffer)
    {
        if (is_null($remoteBuffer)) {
            throw new \InvalidArgumentException('non-nullable remoteBuffer cannot be null');
        }
        $this->container['remoteBuffer'] = $remoteBuffer;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool|null $isEnabled isEnabled
     *
     * @return self
     */
    public function setIsEnabled($isEnabled)
    {
        if (is_null($isEnabled)) {
            throw new \InvalidArgumentException('non-nullable isEnabled cannot be null');
        }
        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets isJingle
     *
     * @return bool|null
     */
    public function getIsJingle()
    {
        return $this->container['isJingle'];
    }

    /**
     * Sets isJingle
     *
     * @param bool|null $isJingle If yes, do not send jingle metadata to AutoDJ or trigger web hooks.
     *
     * @return self
     */
    public function setIsJingle($isJingle)
    {
        if (is_null($isJingle)) {
            throw new \InvalidArgumentException('non-nullable isJingle cannot be null');
        }
        $this->container['isJingle'] = $isJingle;

        return $this;
    }

    /**
     * Gets playPerSongs
     *
     * @return int|null
     */
    public function getPlayPerSongs()
    {
        return $this->container['playPerSongs'];
    }

    /**
     * Sets playPerSongs
     *
     * @param int|null $playPerSongs playPerSongs
     *
     * @return self
     */
    public function setPlayPerSongs($playPerSongs)
    {
        if (is_null($playPerSongs)) {
            throw new \InvalidArgumentException('non-nullable playPerSongs cannot be null');
        }
        $this->container['playPerSongs'] = $playPerSongs;

        return $this;
    }

    /**
     * Gets playPerMinutes
     *
     * @return int|null
     */
    public function getPlayPerMinutes()
    {
        return $this->container['playPerMinutes'];
    }

    /**
     * Sets playPerMinutes
     *
     * @param int|null $playPerMinutes playPerMinutes
     *
     * @return self
     */
    public function setPlayPerMinutes($playPerMinutes)
    {
        if (is_null($playPerMinutes)) {
            throw new \InvalidArgumentException('non-nullable playPerMinutes cannot be null');
        }
        $this->container['playPerMinutes'] = $playPerMinutes;

        return $this;
    }

    /**
     * Gets playPerHourMinute
     *
     * @return int|null
     */
    public function getPlayPerHourMinute()
    {
        return $this->container['playPerHourMinute'];
    }

    /**
     * Sets playPerHourMinute
     *
     * @param int|null $playPerHourMinute playPerHourMinute
     *
     * @return self
     */
    public function setPlayPerHourMinute($playPerHourMinute)
    {
        if (is_null($playPerHourMinute)) {
            throw new \InvalidArgumentException('non-nullable playPerHourMinute cannot be null');
        }
        $this->container['playPerHourMinute'] = $playPerHourMinute;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            throw new \InvalidArgumentException('non-nullable weight cannot be null');
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets includeInRequests
     *
     * @return bool|null
     */
    public function getIncludeInRequests()
    {
        return $this->container['includeInRequests'];
    }

    /**
     * Sets includeInRequests
     *
     * @param bool|null $includeInRequests includeInRequests
     *
     * @return self
     */
    public function setIncludeInRequests($includeInRequests)
    {
        if (is_null($includeInRequests)) {
            throw new \InvalidArgumentException('non-nullable includeInRequests cannot be null');
        }
        $this->container['includeInRequests'] = $includeInRequests;

        return $this;
    }

    /**
     * Gets includeInOnDemand
     *
     * @return bool|null
     */
    public function getIncludeInOnDemand()
    {
        return $this->container['includeInOnDemand'];
    }

    /**
     * Sets includeInOnDemand
     *
     * @param bool|null $includeInOnDemand Whether this playlist's media is included in 'on demand' download/streaming if enabled.
     *
     * @return self
     */
    public function setIncludeInOnDemand($includeInOnDemand)
    {
        if (is_null($includeInOnDemand)) {
            throw new \InvalidArgumentException('non-nullable includeInOnDemand cannot be null');
        }
        $this->container['includeInOnDemand'] = $includeInOnDemand;

        return $this;
    }

    /**
     * Gets backendOptions
     *
     * @return string|null
     */
    public function getBackendOptions()
    {
        return $this->container['backendOptions'];
    }

    /**
     * Sets backendOptions
     *
     * @param string|null $backendOptions backendOptions
     *
     * @return self
     */
    public function setBackendOptions($backendOptions)
    {
        if (is_null($backendOptions)) {
            array_push($this->openAPINullablesSetToNull, 'backendOptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backendOptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backendOptions'] = $backendOptions;

        return $this;
    }

    /**
     * Gets avoidDuplicates
     *
     * @return bool|null
     */
    public function getAvoidDuplicates()
    {
        return $this->container['avoidDuplicates'];
    }

    /**
     * Sets avoidDuplicates
     *
     * @param bool|null $avoidDuplicates avoidDuplicates
     *
     * @return self
     */
    public function setAvoidDuplicates($avoidDuplicates)
    {
        if (is_null($avoidDuplicates)) {
            throw new \InvalidArgumentException('non-nullable avoidDuplicates cannot be null');
        }
        $this->container['avoidDuplicates'] = $avoidDuplicates;

        return $this;
    }

    /**
     * Gets scheduleItems
     *
     * @return mixed[]|null
     */
    public function getScheduleItems()
    {
        return $this->container['scheduleItems'];
    }

    /**
     * Sets scheduleItems
     *
     * @param mixed[]|null $scheduleItems StationSchedule>
     *
     * @return self
     */
    public function setScheduleItems($scheduleItems)
    {
        if (is_null($scheduleItems)) {
            throw new \InvalidArgumentException('non-nullable scheduleItems cannot be null');
        }
        $this->container['scheduleItems'] = $scheduleItems;

        return $this;
    }

    /**
     * Gets podcasts
     *
     * @return mixed[]|null
     */
    public function getPodcasts()
    {
        return $this->container['podcasts'];
    }

    /**
     * Sets podcasts
     *
     * @param mixed[]|null $podcasts Podcast>
     *
     * @return self
     */
    public function setPodcasts($podcasts)
    {
        if (is_null($podcasts)) {
            throw new \InvalidArgumentException('non-nullable podcasts cannot be null');
        }
        $this->container['podcasts'] = $podcasts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


