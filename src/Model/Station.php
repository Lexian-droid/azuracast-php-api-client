<?php
/**
 * Station
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * Station Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Station implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Station';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'shortName' => 'string',
        'isEnabled' => 'bool',
        'frontendType' => 'mixed',
        'frontendConfig' => 'object',
        'backendType' => 'mixed',
        'backendConfig' => 'object',
        'description' => 'string',
        'url' => 'string',
        'genre' => 'string',
        'radioBaseDir' => 'string',
        'enableRequests' => 'bool',
        'requestDelay' => 'int',
        'requestThreshold' => 'int',
        'disconnectDeactivateStreamer' => 'int',
        'enableStreamers' => 'bool',
        'isStreamerLive' => 'bool',
        'enablePublicPage' => 'bool',
        'enableOnDemand' => 'bool',
        'enableOnDemandDownload' => 'bool',
        'enableHls' => 'bool',
        'apiHistoryItems' => 'int',
        'timezone' => 'string',
        'brandingConfig' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'shortName' => null,
        'isEnabled' => null,
        'frontendType' => null,
        'frontendConfig' => null,
        'backendType' => null,
        'backendConfig' => null,
        'description' => null,
        'url' => null,
        'genre' => null,
        'radioBaseDir' => null,
        'enableRequests' => null,
        'requestDelay' => null,
        'requestThreshold' => null,
        'disconnectDeactivateStreamer' => null,
        'enableStreamers' => null,
        'isStreamerLive' => null,
        'enablePublicPage' => null,
        'enableOnDemand' => null,
        'enableOnDemandDownload' => null,
        'enableHls' => null,
        'apiHistoryItems' => null,
        'timezone' => null,
        'brandingConfig' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'name' => false,
        'shortName' => false,
        'isEnabled' => false,
        'frontendType' => true,
        'frontendConfig' => false,
        'backendType' => true,
        'backendConfig' => false,
        'description' => true,
        'url' => true,
        'genre' => true,
        'radioBaseDir' => true,
        'enableRequests' => false,
        'requestDelay' => true,
        'requestThreshold' => true,
        'disconnectDeactivateStreamer' => true,
        'enableStreamers' => false,
        'isStreamerLive' => false,
        'enablePublicPage' => false,
        'enableOnDemand' => false,
        'enableOnDemandDownload' => false,
        'enableHls' => false,
        'apiHistoryItems' => false,
        'timezone' => true,
        'brandingConfig' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'shortName' => 'short_name',
        'isEnabled' => 'is_enabled',
        'frontendType' => 'frontend_type',
        'frontendConfig' => 'frontend_config',
        'backendType' => 'backend_type',
        'backendConfig' => 'backend_config',
        'description' => 'description',
        'url' => 'url',
        'genre' => 'genre',
        'radioBaseDir' => 'radio_base_dir',
        'enableRequests' => 'enable_requests',
        'requestDelay' => 'request_delay',
        'requestThreshold' => 'request_threshold',
        'disconnectDeactivateStreamer' => 'disconnect_deactivate_streamer',
        'enableStreamers' => 'enable_streamers',
        'isStreamerLive' => 'is_streamer_live',
        'enablePublicPage' => 'enable_public_page',
        'enableOnDemand' => 'enable_on_demand',
        'enableOnDemandDownload' => 'enable_on_demand_download',
        'enableHls' => 'enable_hls',
        'apiHistoryItems' => 'api_history_items',
        'timezone' => 'timezone',
        'brandingConfig' => 'branding_config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'shortName' => 'setShortName',
        'isEnabled' => 'setIsEnabled',
        'frontendType' => 'setFrontendType',
        'frontendConfig' => 'setFrontendConfig',
        'backendType' => 'setBackendType',
        'backendConfig' => 'setBackendConfig',
        'description' => 'setDescription',
        'url' => 'setUrl',
        'genre' => 'setGenre',
        'radioBaseDir' => 'setRadioBaseDir',
        'enableRequests' => 'setEnableRequests',
        'requestDelay' => 'setRequestDelay',
        'requestThreshold' => 'setRequestThreshold',
        'disconnectDeactivateStreamer' => 'setDisconnectDeactivateStreamer',
        'enableStreamers' => 'setEnableStreamers',
        'isStreamerLive' => 'setIsStreamerLive',
        'enablePublicPage' => 'setEnablePublicPage',
        'enableOnDemand' => 'setEnableOnDemand',
        'enableOnDemandDownload' => 'setEnableOnDemandDownload',
        'enableHls' => 'setEnableHls',
        'apiHistoryItems' => 'setApiHistoryItems',
        'timezone' => 'setTimezone',
        'brandingConfig' => 'setBrandingConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'shortName' => 'getShortName',
        'isEnabled' => 'getIsEnabled',
        'frontendType' => 'getFrontendType',
        'frontendConfig' => 'getFrontendConfig',
        'backendType' => 'getBackendType',
        'backendConfig' => 'getBackendConfig',
        'description' => 'getDescription',
        'url' => 'getUrl',
        'genre' => 'getGenre',
        'radioBaseDir' => 'getRadioBaseDir',
        'enableRequests' => 'getEnableRequests',
        'requestDelay' => 'getRequestDelay',
        'requestThreshold' => 'getRequestThreshold',
        'disconnectDeactivateStreamer' => 'getDisconnectDeactivateStreamer',
        'enableStreamers' => 'getEnableStreamers',
        'isStreamerLive' => 'getIsStreamerLive',
        'enablePublicPage' => 'getEnablePublicPage',
        'enableOnDemand' => 'getEnableOnDemand',
        'enableOnDemandDownload' => 'getEnableOnDemandDownload',
        'enableHls' => 'getEnableHls',
        'apiHistoryItems' => 'getApiHistoryItems',
        'timezone' => 'getTimezone',
        'brandingConfig' => 'getBrandingConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('shortName', $data ?? [], null);
        $this->setIfExists('isEnabled', $data ?? [], null);
        $this->setIfExists('frontendType', $data ?? [], null);
        $this->setIfExists('frontendConfig', $data ?? [], null);
        $this->setIfExists('backendType', $data ?? [], null);
        $this->setIfExists('backendConfig', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('genre', $data ?? [], null);
        $this->setIfExists('radioBaseDir', $data ?? [], null);
        $this->setIfExists('enableRequests', $data ?? [], null);
        $this->setIfExists('requestDelay', $data ?? [], null);
        $this->setIfExists('requestThreshold', $data ?? [], null);
        $this->setIfExists('disconnectDeactivateStreamer', $data ?? [], null);
        $this->setIfExists('enableStreamers', $data ?? [], null);
        $this->setIfExists('isStreamerLive', $data ?? [], null);
        $this->setIfExists('enablePublicPage', $data ?? [], null);
        $this->setIfExists('enableOnDemand', $data ?? [], null);
        $this->setIfExists('enableOnDemandDownload', $data ?? [], null);
        $this->setIfExists('enableHls', $data ?? [], null);
        $this->setIfExists('apiHistoryItems', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
        $this->setIfExists('brandingConfig', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The full display name of the station.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string|null
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string|null $shortName The URL-friendly name for the station, typically auto-generated from the full station name.
     *
     * @return self
     */
    public function setShortName($shortName)
    {
        if (is_null($shortName)) {
            throw new \InvalidArgumentException('non-nullable shortName cannot be null');
        }
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool|null $isEnabled If set to 'false', prevents the station from broadcasting but leaves it in the database.
     *
     * @return self
     */
    public function setIsEnabled($isEnabled)
    {
        if (is_null($isEnabled)) {
            throw new \InvalidArgumentException('non-nullable isEnabled cannot be null');
        }
        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets frontendType
     *
     * @return mixed|null
     */
    public function getFrontendType()
    {
        return $this->container['frontendType'];
    }

    /**
     * Sets frontendType
     *
     * @param mixed|null $frontendType The frontend adapter (icecast,shoutcast,remote,etc)
     *
     * @return self
     */
    public function setFrontendType($frontendType)
    {
        if (is_null($frontendType)) {
            array_push($this->openAPINullablesSetToNull, 'frontendType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frontendType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['frontendType'] = $frontendType;

        return $this;
    }

    /**
     * Gets frontendConfig
     *
     * @return object|null
     */
    public function getFrontendConfig()
    {
        return $this->container['frontendConfig'];
    }

    /**
     * Sets frontendConfig
     *
     * @param object|null $frontendConfig An array containing station-specific frontend configuration
     *
     * @return self
     */
    public function setFrontendConfig($frontendConfig)
    {
        if (is_null($frontendConfig)) {
            throw new \InvalidArgumentException('non-nullable frontendConfig cannot be null');
        }
        $this->container['frontendConfig'] = $frontendConfig;

        return $this;
    }

    /**
     * Gets backendType
     *
     * @return mixed|null
     */
    public function getBackendType()
    {
        return $this->container['backendType'];
    }

    /**
     * Sets backendType
     *
     * @param mixed|null $backendType The backend adapter (liquidsoap,etc)
     *
     * @return self
     */
    public function setBackendType($backendType)
    {
        if (is_null($backendType)) {
            array_push($this->openAPINullablesSetToNull, 'backendType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backendType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backendType'] = $backendType;

        return $this;
    }

    /**
     * Gets backendConfig
     *
     * @return object|null
     */
    public function getBackendConfig()
    {
        return $this->container['backendConfig'];
    }

    /**
     * Sets backendConfig
     *
     * @param object|null $backendConfig An array containing station-specific backend configuration
     *
     * @return self
     */
    public function setBackendConfig($backendConfig)
    {
        if (is_null($backendConfig)) {
            throw new \InvalidArgumentException('non-nullable backendConfig cannot be null');
        }
        $this->container['backendConfig'] = $backendConfig;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string|null
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string|null $genre genre
     *
     * @return self
     */
    public function setGenre($genre)
    {
        if (is_null($genre)) {
            array_push($this->openAPINullablesSetToNull, 'genre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets radioBaseDir
     *
     * @return string|null
     */
    public function getRadioBaseDir()
    {
        return $this->container['radioBaseDir'];
    }

    /**
     * Sets radioBaseDir
     *
     * @param string|null $radioBaseDir radioBaseDir
     *
     * @return self
     */
    public function setRadioBaseDir($radioBaseDir)
    {
        if (is_null($radioBaseDir)) {
            array_push($this->openAPINullablesSetToNull, 'radioBaseDir');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('radioBaseDir', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['radioBaseDir'] = $radioBaseDir;

        return $this;
    }

    /**
     * Gets enableRequests
     *
     * @return bool|null
     */
    public function getEnableRequests()
    {
        return $this->container['enableRequests'];
    }

    /**
     * Sets enableRequests
     *
     * @param bool|null $enableRequests Whether listeners can request songs to play on this station.
     *
     * @return self
     */
    public function setEnableRequests($enableRequests)
    {
        if (is_null($enableRequests)) {
            throw new \InvalidArgumentException('non-nullable enableRequests cannot be null');
        }
        $this->container['enableRequests'] = $enableRequests;

        return $this;
    }

    /**
     * Gets requestDelay
     *
     * @return int|null
     */
    public function getRequestDelay()
    {
        return $this->container['requestDelay'];
    }

    /**
     * Sets requestDelay
     *
     * @param int|null $requestDelay requestDelay
     *
     * @return self
     */
    public function setRequestDelay($requestDelay)
    {
        if (is_null($requestDelay)) {
            array_push($this->openAPINullablesSetToNull, 'requestDelay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requestDelay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requestDelay'] = $requestDelay;

        return $this;
    }

    /**
     * Gets requestThreshold
     *
     * @return int|null
     */
    public function getRequestThreshold()
    {
        return $this->container['requestThreshold'];
    }

    /**
     * Sets requestThreshold
     *
     * @param int|null $requestThreshold requestThreshold
     *
     * @return self
     */
    public function setRequestThreshold($requestThreshold)
    {
        if (is_null($requestThreshold)) {
            array_push($this->openAPINullablesSetToNull, 'requestThreshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requestThreshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requestThreshold'] = $requestThreshold;

        return $this;
    }

    /**
     * Gets disconnectDeactivateStreamer
     *
     * @return int|null
     */
    public function getDisconnectDeactivateStreamer()
    {
        return $this->container['disconnectDeactivateStreamer'];
    }

    /**
     * Sets disconnectDeactivateStreamer
     *
     * @param int|null $disconnectDeactivateStreamer disconnectDeactivateStreamer
     *
     * @return self
     */
    public function setDisconnectDeactivateStreamer($disconnectDeactivateStreamer)
    {
        if (is_null($disconnectDeactivateStreamer)) {
            array_push($this->openAPINullablesSetToNull, 'disconnectDeactivateStreamer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disconnectDeactivateStreamer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['disconnectDeactivateStreamer'] = $disconnectDeactivateStreamer;

        return $this;
    }

    /**
     * Gets enableStreamers
     *
     * @return bool|null
     */
    public function getEnableStreamers()
    {
        return $this->container['enableStreamers'];
    }

    /**
     * Sets enableStreamers
     *
     * @param bool|null $enableStreamers Whether streamers are allowed to broadcast to this station at all.
     *
     * @return self
     */
    public function setEnableStreamers($enableStreamers)
    {
        if (is_null($enableStreamers)) {
            throw new \InvalidArgumentException('non-nullable enableStreamers cannot be null');
        }
        $this->container['enableStreamers'] = $enableStreamers;

        return $this;
    }

    /**
     * Gets isStreamerLive
     *
     * @return bool|null
     */
    public function getIsStreamerLive()
    {
        return $this->container['isStreamerLive'];
    }

    /**
     * Sets isStreamerLive
     *
     * @param bool|null $isStreamerLive Whether a streamer is currently active on the station.
     *
     * @return self
     */
    public function setIsStreamerLive($isStreamerLive)
    {
        if (is_null($isStreamerLive)) {
            throw new \InvalidArgumentException('non-nullable isStreamerLive cannot be null');
        }
        $this->container['isStreamerLive'] = $isStreamerLive;

        return $this;
    }

    /**
     * Gets enablePublicPage
     *
     * @return bool|null
     */
    public function getEnablePublicPage()
    {
        return $this->container['enablePublicPage'];
    }

    /**
     * Sets enablePublicPage
     *
     * @param bool|null $enablePublicPage Whether this station is visible as a public page and in a now-playing API response.
     *
     * @return self
     */
    public function setEnablePublicPage($enablePublicPage)
    {
        if (is_null($enablePublicPage)) {
            throw new \InvalidArgumentException('non-nullable enablePublicPage cannot be null');
        }
        $this->container['enablePublicPage'] = $enablePublicPage;

        return $this;
    }

    /**
     * Gets enableOnDemand
     *
     * @return bool|null
     */
    public function getEnableOnDemand()
    {
        return $this->container['enableOnDemand'];
    }

    /**
     * Sets enableOnDemand
     *
     * @param bool|null $enableOnDemand Whether this station has a public 'on-demand' streaming and download page.
     *
     * @return self
     */
    public function setEnableOnDemand($enableOnDemand)
    {
        if (is_null($enableOnDemand)) {
            throw new \InvalidArgumentException('non-nullable enableOnDemand cannot be null');
        }
        $this->container['enableOnDemand'] = $enableOnDemand;

        return $this;
    }

    /**
     * Gets enableOnDemandDownload
     *
     * @return bool|null
     */
    public function getEnableOnDemandDownload()
    {
        return $this->container['enableOnDemandDownload'];
    }

    /**
     * Sets enableOnDemandDownload
     *
     * @param bool|null $enableOnDemandDownload Whether the 'on-demand' page offers download capability.
     *
     * @return self
     */
    public function setEnableOnDemandDownload($enableOnDemandDownload)
    {
        if (is_null($enableOnDemandDownload)) {
            throw new \InvalidArgumentException('non-nullable enableOnDemandDownload cannot be null');
        }
        $this->container['enableOnDemandDownload'] = $enableOnDemandDownload;

        return $this;
    }

    /**
     * Gets enableHls
     *
     * @return bool|null
     */
    public function getEnableHls()
    {
        return $this->container['enableHls'];
    }

    /**
     * Sets enableHls
     *
     * @param bool|null $enableHls Whether HLS streaming is enabled.
     *
     * @return self
     */
    public function setEnableHls($enableHls)
    {
        if (is_null($enableHls)) {
            throw new \InvalidArgumentException('non-nullable enableHls cannot be null');
        }
        $this->container['enableHls'] = $enableHls;

        return $this;
    }

    /**
     * Gets apiHistoryItems
     *
     * @return int|null
     */
    public function getApiHistoryItems()
    {
        return $this->container['apiHistoryItems'];
    }

    /**
     * Sets apiHistoryItems
     *
     * @param int|null $apiHistoryItems The number of 'last played' history items to show for a station in API responses.
     *
     * @return self
     */
    public function setApiHistoryItems($apiHistoryItems)
    {
        if (is_null($apiHistoryItems)) {
            throw new \InvalidArgumentException('non-nullable apiHistoryItems cannot be null');
        }
        $this->container['apiHistoryItems'] = $apiHistoryItems;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone The time zone that station operations should take place in.
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets brandingConfig
     *
     * @return object|null
     */
    public function getBrandingConfig()
    {
        return $this->container['brandingConfig'];
    }

    /**
     * Sets brandingConfig
     *
     * @param object|null $brandingConfig An array containing station-specific branding configuration
     *
     * @return self
     */
    public function setBrandingConfig($brandingConfig)
    {
        if (is_null($brandingConfig)) {
            throw new \InvalidArgumentException('non-nullable brandingConfig cannot be null');
        }
        $this->container['brandingConfig'] = $brandingConfig;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


