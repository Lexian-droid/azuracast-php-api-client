<?php
/**
 * ApiStationMedia
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiStationMedia Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiStationMedia implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_StationMedia';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'text' => 'string',
        'artist' => 'string',
        'title' => 'string',
        'album' => 'string',
        'genre' => 'string',
        'isrc' => 'string',
        'lyrics' => 'string',
        'links' => 'array<string,string>',
        'id' => 'int',
        'uniqueId' => 'string',
        'songId' => 'string',
        'art' => 'string',
        'path' => 'string',
        'mtime' => 'int',
        'uploadedAt' => 'int',
        'artUpdatedAt' => 'int',
        'length' => 'float',
        'lengthText' => 'string',
        'customFields' => 'string[]',
        'extraMetadata' => 'mixed[]',
        'playlists' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'text' => null,
        'artist' => null,
        'title' => null,
        'album' => null,
        'genre' => null,
        'isrc' => null,
        'lyrics' => null,
        'links' => null,
        'id' => null,
        'uniqueId' => null,
        'songId' => null,
        'art' => null,
        'path' => null,
        'mtime' => null,
        'uploadedAt' => null,
        'artUpdatedAt' => null,
        'length' => 'float',
        'lengthText' => null,
        'customFields' => null,
        'extraMetadata' => null,
        'playlists' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'text' => false,
        'artist' => true,
        'title' => true,
        'album' => true,
        'genre' => true,
        'isrc' => true,
        'lyrics' => true,
        'links' => false,
        'id' => false,
        'uniqueId' => false,
        'songId' => false,
        'art' => false,
        'path' => false,
        'mtime' => false,
        'uploadedAt' => false,
        'artUpdatedAt' => false,
        'length' => false,
        'lengthText' => false,
        'customFields' => false,
        'extraMetadata' => false,
        'playlists' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'artist' => 'artist',
        'title' => 'title',
        'album' => 'album',
        'genre' => 'genre',
        'isrc' => 'isrc',
        'lyrics' => 'lyrics',
        'links' => 'links',
        'id' => 'id',
        'uniqueId' => 'unique_id',
        'songId' => 'song_id',
        'art' => 'art',
        'path' => 'path',
        'mtime' => 'mtime',
        'uploadedAt' => 'uploaded_at',
        'artUpdatedAt' => 'art_updated_at',
        'length' => 'length',
        'lengthText' => 'length_text',
        'customFields' => 'custom_fields',
        'extraMetadata' => 'extra_metadata',
        'playlists' => 'playlists'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'artist' => 'setArtist',
        'title' => 'setTitle',
        'album' => 'setAlbum',
        'genre' => 'setGenre',
        'isrc' => 'setIsrc',
        'lyrics' => 'setLyrics',
        'links' => 'setLinks',
        'id' => 'setId',
        'uniqueId' => 'setUniqueId',
        'songId' => 'setSongId',
        'art' => 'setArt',
        'path' => 'setPath',
        'mtime' => 'setMtime',
        'uploadedAt' => 'setUploadedAt',
        'artUpdatedAt' => 'setArtUpdatedAt',
        'length' => 'setLength',
        'lengthText' => 'setLengthText',
        'customFields' => 'setCustomFields',
        'extraMetadata' => 'setExtraMetadata',
        'playlists' => 'setPlaylists'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'artist' => 'getArtist',
        'title' => 'getTitle',
        'album' => 'getAlbum',
        'genre' => 'getGenre',
        'isrc' => 'getIsrc',
        'lyrics' => 'getLyrics',
        'links' => 'getLinks',
        'id' => 'getId',
        'uniqueId' => 'getUniqueId',
        'songId' => 'getSongId',
        'art' => 'getArt',
        'path' => 'getPath',
        'mtime' => 'getMtime',
        'uploadedAt' => 'getUploadedAt',
        'artUpdatedAt' => 'getArtUpdatedAt',
        'length' => 'getLength',
        'lengthText' => 'getLengthText',
        'customFields' => 'getCustomFields',
        'extraMetadata' => 'getExtraMetadata',
        'playlists' => 'getPlaylists'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('artist', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('album', $data ?? [], null);
        $this->setIfExists('genre', $data ?? [], null);
        $this->setIfExists('isrc', $data ?? [], null);
        $this->setIfExists('lyrics', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uniqueId', $data ?? [], null);
        $this->setIfExists('songId', $data ?? [], null);
        $this->setIfExists('art', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('mtime', $data ?? [], null);
        $this->setIfExists('uploadedAt', $data ?? [], null);
        $this->setIfExists('artUpdatedAt', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('lengthText', $data ?? [], null);
        $this->setIfExists('customFields', $data ?? [], null);
        $this->setIfExists('extraMetadata', $data ?? [], null);
        $this->setIfExists('playlists', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text The song title, usually \"Artist - Title\"
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets artist
     *
     * @return string|null
     */
    public function getArtist()
    {
        return $this->container['artist'];
    }

    /**
     * Sets artist
     *
     * @param string|null $artist The song artist.
     *
     * @return self
     */
    public function setArtist($artist)
    {
        if (is_null($artist)) {
            array_push($this->openAPINullablesSetToNull, 'artist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('artist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['artist'] = $artist;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The song title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets album
     *
     * @return string|null
     */
    public function getAlbum()
    {
        return $this->container['album'];
    }

    /**
     * Sets album
     *
     * @param string|null $album The song album.
     *
     * @return self
     */
    public function setAlbum($album)
    {
        if (is_null($album)) {
            array_push($this->openAPINullablesSetToNull, 'album');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('album', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['album'] = $album;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string|null
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string|null $genre The song genre.
     *
     * @return self
     */
    public function setGenre($genre)
    {
        if (is_null($genre)) {
            array_push($this->openAPINullablesSetToNull, 'genre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('genre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets isrc
     *
     * @return string|null
     */
    public function getIsrc()
    {
        return $this->container['isrc'];
    }

    /**
     * Sets isrc
     *
     * @param string|null $isrc The International Standard Recording Code (ISRC) of the file.
     *
     * @return self
     */
    public function setIsrc($isrc)
    {
        if (is_null($isrc)) {
            array_push($this->openAPINullablesSetToNull, 'isrc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('isrc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['isrc'] = $isrc;

        return $this;
    }

    /**
     * Gets lyrics
     *
     * @return string|null
     */
    public function getLyrics()
    {
        return $this->container['lyrics'];
    }

    /**
     * Sets lyrics
     *
     * @param string|null $lyrics Lyrics to the song.
     *
     * @return self
     */
    public function setLyrics($lyrics)
    {
        if (is_null($lyrics)) {
            array_push($this->openAPINullablesSetToNull, 'lyrics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lyrics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lyrics'] = $lyrics;

        return $this;
    }

    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The media's identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uniqueId
     *
     * @return string|null
     */
    public function getUniqueId()
    {
        return $this->container['uniqueId'];
    }

    /**
     * Sets uniqueId
     *
     * @param string|null $uniqueId A unique identifier associated with this record.
     *
     * @return self
     */
    public function setUniqueId($uniqueId)
    {
        if (is_null($uniqueId)) {
            throw new \InvalidArgumentException('non-nullable uniqueId cannot be null');
        }
        $this->container['uniqueId'] = $uniqueId;

        return $this;
    }

    /**
     * Gets songId
     *
     * @return string|null
     */
    public function getSongId()
    {
        return $this->container['songId'];
    }

    /**
     * Sets songId
     *
     * @param string|null $songId The media file's 32-character unique song identifier hash
     *
     * @return self
     */
    public function setSongId($songId)
    {
        if (is_null($songId)) {
            throw new \InvalidArgumentException('non-nullable songId cannot be null');
        }
        $this->container['songId'] = $songId;

        return $this;
    }

    /**
     * Gets art
     *
     * @return string|null
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     *
     * @param string|null $art URL to the album art.
     *
     * @return self
     */
    public function setArt($art)
    {
        if (is_null($art)) {
            throw new \InvalidArgumentException('non-nullable art cannot be null');
        }
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The relative path of the media file.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets mtime
     *
     * @return int|null
     */
    public function getMtime()
    {
        return $this->container['mtime'];
    }

    /**
     * Sets mtime
     *
     * @param int|null $mtime The UNIX timestamp when the database was last modified.
     *
     * @return self
     */
    public function setMtime($mtime)
    {
        if (is_null($mtime)) {
            throw new \InvalidArgumentException('non-nullable mtime cannot be null');
        }
        $this->container['mtime'] = $mtime;

        return $this;
    }

    /**
     * Gets uploadedAt
     *
     * @return int|null
     */
    public function getUploadedAt()
    {
        return $this->container['uploadedAt'];
    }

    /**
     * Sets uploadedAt
     *
     * @param int|null $uploadedAt The UNIX timestamp when the item was first imported into the database.
     *
     * @return self
     */
    public function setUploadedAt($uploadedAt)
    {
        if (is_null($uploadedAt)) {
            throw new \InvalidArgumentException('non-nullable uploadedAt cannot be null');
        }
        $this->container['uploadedAt'] = $uploadedAt;

        return $this;
    }

    /**
     * Gets artUpdatedAt
     *
     * @return int|null
     */
    public function getArtUpdatedAt()
    {
        return $this->container['artUpdatedAt'];
    }

    /**
     * Sets artUpdatedAt
     *
     * @param int|null $artUpdatedAt The latest time (UNIX timestamp) when album art was updated.
     *
     * @return self
     */
    public function setArtUpdatedAt($artUpdatedAt)
    {
        if (is_null($artUpdatedAt)) {
            throw new \InvalidArgumentException('non-nullable artUpdatedAt cannot be null');
        }
        $this->container['artUpdatedAt'] = $artUpdatedAt;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length The song duration in seconds.
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets lengthText
     *
     * @return string|null
     */
    public function getLengthText()
    {
        return $this->container['lengthText'];
    }

    /**
     * Sets lengthText
     *
     * @param string|null $lengthText The formatted song duration (in mm:ss format)
     *
     * @return self
     */
    public function setLengthText($lengthText)
    {
        if (is_null($lengthText)) {
            throw new \InvalidArgumentException('non-nullable lengthText cannot be null');
        }
        $this->container['lengthText'] = $lengthText;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return string[]|null
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param string[]|null $customFields customFields
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        if (is_null($customFields)) {
            throw new \InvalidArgumentException('non-nullable customFields cannot be null');
        }
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets extraMetadata
     *
     * @return mixed[]|null
     */
    public function getExtraMetadata()
    {
        return $this->container['extraMetadata'];
    }

    /**
     * Sets extraMetadata
     *
     * @param mixed[]|null $extraMetadata extraMetadata
     *
     * @return self
     */
    public function setExtraMetadata($extraMetadata)
    {
        if (is_null($extraMetadata)) {
            throw new \InvalidArgumentException('non-nullable extraMetadata cannot be null');
        }
        $this->container['extraMetadata'] = $extraMetadata;

        return $this;
    }

    /**
     * Gets playlists
     *
     * @return mixed[]|null
     */
    public function getPlaylists()
    {
        return $this->container['playlists'];
    }

    /**
     * Sets playlists
     *
     * @param mixed[]|null $playlists playlists
     *
     * @return self
     */
    public function setPlaylists($playlists)
    {
        if (is_null($playlists)) {
            throw new \InvalidArgumentException('non-nullable playlists cannot be null');
        }
        $this->container['playlists'] = $playlists;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


