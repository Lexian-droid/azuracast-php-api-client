<?php
/**
 * ApiStationRemote
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiStationRemote Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiStationRemote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_StationRemote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,string>',
        'id' => 'int',
        'displayName' => 'string',
        'isVisibleOnPublicPages' => 'bool',
        'type' => 'string',
        'isEditable' => 'bool',
        'enableAutodj' => 'bool',
        'autodjFormat' => 'string',
        'autodjBitrate' => 'int',
        'customListenUrl' => 'string',
        'url' => 'string',
        'mount' => 'string',
        'adminPassword' => 'string',
        'sourcePort' => 'int',
        'sourceMount' => 'string',
        'sourceUsername' => 'string',
        'sourcePassword' => 'string',
        'isPublic' => 'bool',
        'listenersUnique' => 'int',
        'listenersTotal' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'id' => null,
        'displayName' => null,
        'isVisibleOnPublicPages' => null,
        'type' => null,
        'isEditable' => null,
        'enableAutodj' => null,
        'autodjFormat' => null,
        'autodjBitrate' => null,
        'customListenUrl' => null,
        'url' => null,
        'mount' => null,
        'adminPassword' => null,
        'sourcePort' => null,
        'sourceMount' => null,
        'sourceUsername' => null,
        'sourcePassword' => null,
        'isPublic' => null,
        'listenersUnique' => null,
        'listenersTotal' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'links' => false,
        'id' => true,
        'displayName' => true,
        'isVisibleOnPublicPages' => false,
        'type' => false,
        'isEditable' => false,
        'enableAutodj' => false,
        'autodjFormat' => true,
        'autodjBitrate' => true,
        'customListenUrl' => true,
        'url' => false,
        'mount' => true,
        'adminPassword' => true,
        'sourcePort' => true,
        'sourceMount' => true,
        'sourceUsername' => true,
        'sourcePassword' => true,
        'isPublic' => false,
        'listenersUnique' => false,
        'listenersTotal' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'displayName' => 'display_name',
        'isVisibleOnPublicPages' => 'is_visible_on_public_pages',
        'type' => 'type',
        'isEditable' => 'is_editable',
        'enableAutodj' => 'enable_autodj',
        'autodjFormat' => 'autodj_format',
        'autodjBitrate' => 'autodj_bitrate',
        'customListenUrl' => 'custom_listen_url',
        'url' => 'url',
        'mount' => 'mount',
        'adminPassword' => 'admin_password',
        'sourcePort' => 'source_port',
        'sourceMount' => 'source_mount',
        'sourceUsername' => 'source_username',
        'sourcePassword' => 'source_password',
        'isPublic' => 'is_public',
        'listenersUnique' => 'listeners_unique',
        'listenersTotal' => 'listeners_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'displayName' => 'setDisplayName',
        'isVisibleOnPublicPages' => 'setIsVisibleOnPublicPages',
        'type' => 'setType',
        'isEditable' => 'setIsEditable',
        'enableAutodj' => 'setEnableAutodj',
        'autodjFormat' => 'setAutodjFormat',
        'autodjBitrate' => 'setAutodjBitrate',
        'customListenUrl' => 'setCustomListenUrl',
        'url' => 'setUrl',
        'mount' => 'setMount',
        'adminPassword' => 'setAdminPassword',
        'sourcePort' => 'setSourcePort',
        'sourceMount' => 'setSourceMount',
        'sourceUsername' => 'setSourceUsername',
        'sourcePassword' => 'setSourcePassword',
        'isPublic' => 'setIsPublic',
        'listenersUnique' => 'setListenersUnique',
        'listenersTotal' => 'setListenersTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'displayName' => 'getDisplayName',
        'isVisibleOnPublicPages' => 'getIsVisibleOnPublicPages',
        'type' => 'getType',
        'isEditable' => 'getIsEditable',
        'enableAutodj' => 'getEnableAutodj',
        'autodjFormat' => 'getAutodjFormat',
        'autodjBitrate' => 'getAutodjBitrate',
        'customListenUrl' => 'getCustomListenUrl',
        'url' => 'getUrl',
        'mount' => 'getMount',
        'adminPassword' => 'getAdminPassword',
        'sourcePort' => 'getSourcePort',
        'sourceMount' => 'getSourceMount',
        'sourceUsername' => 'getSourceUsername',
        'sourcePassword' => 'getSourcePassword',
        'isPublic' => 'getIsPublic',
        'listenersUnique' => 'getListenersUnique',
        'listenersTotal' => 'getListenersTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('isVisibleOnPublicPages', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('isEditable', $data ?? [], null);
        $this->setIfExists('enableAutodj', $data ?? [], null);
        $this->setIfExists('autodjFormat', $data ?? [], null);
        $this->setIfExists('autodjBitrate', $data ?? [], null);
        $this->setIfExists('customListenUrl', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('mount', $data ?? [], null);
        $this->setIfExists('adminPassword', $data ?? [], null);
        $this->setIfExists('sourcePort', $data ?? [], null);
        $this->setIfExists('sourceMount', $data ?? [], null);
        $this->setIfExists('sourceUsername', $data ?? [], null);
        $this->setIfExists('sourcePassword', $data ?? [], null);
        $this->setIfExists('isPublic', $data ?? [], null);
        $this->setIfExists('listenersUnique', $data ?? [], null);
        $this->setIfExists('listenersTotal', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string|null $displayName displayName
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            array_push($this->openAPINullablesSetToNull, 'displayName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('displayName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets isVisibleOnPublicPages
     *
     * @return bool|null
     */
    public function getIsVisibleOnPublicPages()
    {
        return $this->container['isVisibleOnPublicPages'];
    }

    /**
     * Sets isVisibleOnPublicPages
     *
     * @param bool|null $isVisibleOnPublicPages isVisibleOnPublicPages
     *
     * @return self
     */
    public function setIsVisibleOnPublicPages($isVisibleOnPublicPages)
    {
        if (is_null($isVisibleOnPublicPages)) {
            throw new \InvalidArgumentException('non-nullable isVisibleOnPublicPages cannot be null');
        }
        $this->container['isVisibleOnPublicPages'] = $isVisibleOnPublicPages;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets isEditable
     *
     * @return bool|null
     */
    public function getIsEditable()
    {
        return $this->container['isEditable'];
    }

    /**
     * Sets isEditable
     *
     * @param bool|null $isEditable isEditable
     *
     * @return self
     */
    public function setIsEditable($isEditable)
    {
        if (is_null($isEditable)) {
            throw new \InvalidArgumentException('non-nullable isEditable cannot be null');
        }
        $this->container['isEditable'] = $isEditable;

        return $this;
    }

    /**
     * Gets enableAutodj
     *
     * @return bool|null
     */
    public function getEnableAutodj()
    {
        return $this->container['enableAutodj'];
    }

    /**
     * Sets enableAutodj
     *
     * @param bool|null $enableAutodj enableAutodj
     *
     * @return self
     */
    public function setEnableAutodj($enableAutodj)
    {
        if (is_null($enableAutodj)) {
            throw new \InvalidArgumentException('non-nullable enableAutodj cannot be null');
        }
        $this->container['enableAutodj'] = $enableAutodj;

        return $this;
    }

    /**
     * Gets autodjFormat
     *
     * @return string|null
     */
    public function getAutodjFormat()
    {
        return $this->container['autodjFormat'];
    }

    /**
     * Sets autodjFormat
     *
     * @param string|null $autodjFormat autodjFormat
     *
     * @return self
     */
    public function setAutodjFormat($autodjFormat)
    {
        if (is_null($autodjFormat)) {
            array_push($this->openAPINullablesSetToNull, 'autodjFormat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autodjFormat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autodjFormat'] = $autodjFormat;

        return $this;
    }

    /**
     * Gets autodjBitrate
     *
     * @return int|null
     */
    public function getAutodjBitrate()
    {
        return $this->container['autodjBitrate'];
    }

    /**
     * Sets autodjBitrate
     *
     * @param int|null $autodjBitrate autodjBitrate
     *
     * @return self
     */
    public function setAutodjBitrate($autodjBitrate)
    {
        if (is_null($autodjBitrate)) {
            array_push($this->openAPINullablesSetToNull, 'autodjBitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autodjBitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autodjBitrate'] = $autodjBitrate;

        return $this;
    }

    /**
     * Gets customListenUrl
     *
     * @return string|null
     */
    public function getCustomListenUrl()
    {
        return $this->container['customListenUrl'];
    }

    /**
     * Sets customListenUrl
     *
     * @param string|null $customListenUrl customListenUrl
     *
     * @return self
     */
    public function setCustomListenUrl($customListenUrl)
    {
        if (is_null($customListenUrl)) {
            array_push($this->openAPINullablesSetToNull, 'customListenUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customListenUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customListenUrl'] = $customListenUrl;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets mount
     *
     * @return string|null
     */
    public function getMount()
    {
        return $this->container['mount'];
    }

    /**
     * Sets mount
     *
     * @param string|null $mount mount
     *
     * @return self
     */
    public function setMount($mount)
    {
        if (is_null($mount)) {
            array_push($this->openAPINullablesSetToNull, 'mount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mount'] = $mount;

        return $this;
    }

    /**
     * Gets adminPassword
     *
     * @return string|null
     */
    public function getAdminPassword()
    {
        return $this->container['adminPassword'];
    }

    /**
     * Sets adminPassword
     *
     * @param string|null $adminPassword adminPassword
     *
     * @return self
     */
    public function setAdminPassword($adminPassword)
    {
        if (is_null($adminPassword)) {
            array_push($this->openAPINullablesSetToNull, 'adminPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('adminPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['adminPassword'] = $adminPassword;

        return $this;
    }

    /**
     * Gets sourcePort
     *
     * @return int|null
     */
    public function getSourcePort()
    {
        return $this->container['sourcePort'];
    }

    /**
     * Sets sourcePort
     *
     * @param int|null $sourcePort sourcePort
     *
     * @return self
     */
    public function setSourcePort($sourcePort)
    {
        if (is_null($sourcePort)) {
            array_push($this->openAPINullablesSetToNull, 'sourcePort');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourcePort', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourcePort'] = $sourcePort;

        return $this;
    }

    /**
     * Gets sourceMount
     *
     * @return string|null
     */
    public function getSourceMount()
    {
        return $this->container['sourceMount'];
    }

    /**
     * Sets sourceMount
     *
     * @param string|null $sourceMount sourceMount
     *
     * @return self
     */
    public function setSourceMount($sourceMount)
    {
        if (is_null($sourceMount)) {
            array_push($this->openAPINullablesSetToNull, 'sourceMount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceMount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceMount'] = $sourceMount;

        return $this;
    }

    /**
     * Gets sourceUsername
     *
     * @return string|null
     */
    public function getSourceUsername()
    {
        return $this->container['sourceUsername'];
    }

    /**
     * Sets sourceUsername
     *
     * @param string|null $sourceUsername sourceUsername
     *
     * @return self
     */
    public function setSourceUsername($sourceUsername)
    {
        if (is_null($sourceUsername)) {
            array_push($this->openAPINullablesSetToNull, 'sourceUsername');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceUsername', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceUsername'] = $sourceUsername;

        return $this;
    }

    /**
     * Gets sourcePassword
     *
     * @return string|null
     */
    public function getSourcePassword()
    {
        return $this->container['sourcePassword'];
    }

    /**
     * Sets sourcePassword
     *
     * @param string|null $sourcePassword sourcePassword
     *
     * @return self
     */
    public function setSourcePassword($sourcePassword)
    {
        if (is_null($sourcePassword)) {
            array_push($this->openAPINullablesSetToNull, 'sourcePassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourcePassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourcePassword'] = $sourcePassword;

        return $this;
    }

    /**
     * Gets isPublic
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['isPublic'];
    }

    /**
     * Sets isPublic
     *
     * @param bool|null $isPublic isPublic
     *
     * @return self
     */
    public function setIsPublic($isPublic)
    {
        if (is_null($isPublic)) {
            throw new \InvalidArgumentException('non-nullable isPublic cannot be null');
        }
        $this->container['isPublic'] = $isPublic;

        return $this;
    }

    /**
     * Gets listenersUnique
     *
     * @return int|null
     */
    public function getListenersUnique()
    {
        return $this->container['listenersUnique'];
    }

    /**
     * Sets listenersUnique
     *
     * @param int|null $listenersUnique The most recent number of unique listeners.
     *
     * @return self
     */
    public function setListenersUnique($listenersUnique)
    {
        if (is_null($listenersUnique)) {
            throw new \InvalidArgumentException('non-nullable listenersUnique cannot be null');
        }
        $this->container['listenersUnique'] = $listenersUnique;

        return $this;
    }

    /**
     * Gets listenersTotal
     *
     * @return int|null
     */
    public function getListenersTotal()
    {
        return $this->container['listenersTotal'];
    }

    /**
     * Sets listenersTotal
     *
     * @param int|null $listenersTotal The most recent number of total (non-unique) listeners.
     *
     * @return self
     */
    public function setListenersTotal($listenersTotal)
    {
        if (is_null($listenersTotal)) {
            throw new \InvalidArgumentException('non-nullable listenersTotal cannot be null');
        }
        $this->container['listenersTotal'] = $listenersTotal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


