<?php
/**
 * ApiStationRemote
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiStationRemote Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiStationRemote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_StationRemote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,string>',
        'id' => 'int',
        'display_name' => 'string',
        'is_visible_on_public_pages' => 'bool',
        'type' => 'string',
        'is_editable' => 'bool',
        'enable_autodj' => 'bool',
        'autodj_format' => 'string',
        'autodj_bitrate' => 'int',
        'custom_listen_url' => 'string',
        'url' => 'string',
        'mount' => 'string',
        'admin_password' => 'string',
        'source_port' => 'int',
        'source_mount' => 'string',
        'source_username' => 'string',
        'source_password' => 'string',
        'is_public' => 'bool',
        'listeners_unique' => 'int',
        'listeners_total' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'id' => null,
        'display_name' => null,
        'is_visible_on_public_pages' => null,
        'type' => null,
        'is_editable' => null,
        'enable_autodj' => null,
        'autodj_format' => null,
        'autodj_bitrate' => null,
        'custom_listen_url' => null,
        'url' => null,
        'mount' => null,
        'admin_password' => null,
        'source_port' => null,
        'source_mount' => null,
        'source_username' => null,
        'source_password' => null,
        'is_public' => null,
        'listeners_unique' => null,
        'listeners_total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'links' => false,
        'id' => true,
        'display_name' => true,
        'is_visible_on_public_pages' => false,
        'type' => false,
        'is_editable' => false,
        'enable_autodj' => false,
        'autodj_format' => true,
        'autodj_bitrate' => true,
        'custom_listen_url' => true,
        'url' => false,
        'mount' => true,
        'admin_password' => true,
        'source_port' => true,
        'source_mount' => true,
        'source_username' => true,
        'source_password' => true,
        'is_public' => false,
        'listeners_unique' => false,
        'listeners_total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'display_name' => 'display_name',
        'is_visible_on_public_pages' => 'is_visible_on_public_pages',
        'type' => 'type',
        'is_editable' => 'is_editable',
        'enable_autodj' => 'enable_autodj',
        'autodj_format' => 'autodj_format',
        'autodj_bitrate' => 'autodj_bitrate',
        'custom_listen_url' => 'custom_listen_url',
        'url' => 'url',
        'mount' => 'mount',
        'admin_password' => 'admin_password',
        'source_port' => 'source_port',
        'source_mount' => 'source_mount',
        'source_username' => 'source_username',
        'source_password' => 'source_password',
        'is_public' => 'is_public',
        'listeners_unique' => 'listeners_unique',
        'listeners_total' => 'listeners_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'display_name' => 'setDisplayName',
        'is_visible_on_public_pages' => 'setIsVisibleOnPublicPages',
        'type' => 'setType',
        'is_editable' => 'setIsEditable',
        'enable_autodj' => 'setEnableAutodj',
        'autodj_format' => 'setAutodjFormat',
        'autodj_bitrate' => 'setAutodjBitrate',
        'custom_listen_url' => 'setCustomListenUrl',
        'url' => 'setUrl',
        'mount' => 'setMount',
        'admin_password' => 'setAdminPassword',
        'source_port' => 'setSourcePort',
        'source_mount' => 'setSourceMount',
        'source_username' => 'setSourceUsername',
        'source_password' => 'setSourcePassword',
        'is_public' => 'setIsPublic',
        'listeners_unique' => 'setListenersUnique',
        'listeners_total' => 'setListenersTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'display_name' => 'getDisplayName',
        'is_visible_on_public_pages' => 'getIsVisibleOnPublicPages',
        'type' => 'getType',
        'is_editable' => 'getIsEditable',
        'enable_autodj' => 'getEnableAutodj',
        'autodj_format' => 'getAutodjFormat',
        'autodj_bitrate' => 'getAutodjBitrate',
        'custom_listen_url' => 'getCustomListenUrl',
        'url' => 'getUrl',
        'mount' => 'getMount',
        'admin_password' => 'getAdminPassword',
        'source_port' => 'getSourcePort',
        'source_mount' => 'getSourceMount',
        'source_username' => 'getSourceUsername',
        'source_password' => 'getSourcePassword',
        'is_public' => 'getIsPublic',
        'listeners_unique' => 'getListenersUnique',
        'listeners_total' => 'getListenersTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('is_visible_on_public_pages', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_editable', $data ?? [], null);
        $this->setIfExists('enable_autodj', $data ?? [], null);
        $this->setIfExists('autodj_format', $data ?? [], null);
        $this->setIfExists('autodj_bitrate', $data ?? [], null);
        $this->setIfExists('custom_listen_url', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('mount', $data ?? [], null);
        $this->setIfExists('admin_password', $data ?? [], null);
        $this->setIfExists('source_port', $data ?? [], null);
        $this->setIfExists('source_mount', $data ?? [], null);
        $this->setIfExists('source_username', $data ?? [], null);
        $this->setIfExists('source_password', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('listeners_unique', $data ?? [], null);
        $this->setIfExists('listeners_total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            array_push($this->openAPINullablesSetToNull, 'display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets is_visible_on_public_pages
     *
     * @return bool|null
     */
    public function getIsVisibleOnPublicPages()
    {
        return $this->container['is_visible_on_public_pages'];
    }

    /**
     * Sets is_visible_on_public_pages
     *
     * @param bool|null $is_visible_on_public_pages is_visible_on_public_pages
     *
     * @return self
     */
    public function setIsVisibleOnPublicPages($is_visible_on_public_pages)
    {
        if (is_null($is_visible_on_public_pages)) {
            throw new \InvalidArgumentException('non-nullable is_visible_on_public_pages cannot be null');
        }
        $this->container['is_visible_on_public_pages'] = $is_visible_on_public_pages;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return bool|null
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param bool|null $is_editable is_editable
     *
     * @return self
     */
    public function setIsEditable($is_editable)
    {
        if (is_null($is_editable)) {
            throw new \InvalidArgumentException('non-nullable is_editable cannot be null');
        }
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets enable_autodj
     *
     * @return bool|null
     */
    public function getEnableAutodj()
    {
        return $this->container['enable_autodj'];
    }

    /**
     * Sets enable_autodj
     *
     * @param bool|null $enable_autodj enable_autodj
     *
     * @return self
     */
    public function setEnableAutodj($enable_autodj)
    {
        if (is_null($enable_autodj)) {
            throw new \InvalidArgumentException('non-nullable enable_autodj cannot be null');
        }
        $this->container['enable_autodj'] = $enable_autodj;

        return $this;
    }

    /**
     * Gets autodj_format
     *
     * @return string|null
     */
    public function getAutodjFormat()
    {
        return $this->container['autodj_format'];
    }

    /**
     * Sets autodj_format
     *
     * @param string|null $autodj_format autodj_format
     *
     * @return self
     */
    public function setAutodjFormat($autodj_format)
    {
        if (is_null($autodj_format)) {
            array_push($this->openAPINullablesSetToNull, 'autodj_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autodj_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autodj_format'] = $autodj_format;

        return $this;
    }

    /**
     * Gets autodj_bitrate
     *
     * @return int|null
     */
    public function getAutodjBitrate()
    {
        return $this->container['autodj_bitrate'];
    }

    /**
     * Sets autodj_bitrate
     *
     * @param int|null $autodj_bitrate autodj_bitrate
     *
     * @return self
     */
    public function setAutodjBitrate($autodj_bitrate)
    {
        if (is_null($autodj_bitrate)) {
            array_push($this->openAPINullablesSetToNull, 'autodj_bitrate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autodj_bitrate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autodj_bitrate'] = $autodj_bitrate;

        return $this;
    }

    /**
     * Gets custom_listen_url
     *
     * @return string|null
     */
    public function getCustomListenUrl()
    {
        return $this->container['custom_listen_url'];
    }

    /**
     * Sets custom_listen_url
     *
     * @param string|null $custom_listen_url custom_listen_url
     *
     * @return self
     */
    public function setCustomListenUrl($custom_listen_url)
    {
        if (is_null($custom_listen_url)) {
            array_push($this->openAPINullablesSetToNull, 'custom_listen_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_listen_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_listen_url'] = $custom_listen_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets mount
     *
     * @return string|null
     */
    public function getMount()
    {
        return $this->container['mount'];
    }

    /**
     * Sets mount
     *
     * @param string|null $mount mount
     *
     * @return self
     */
    public function setMount($mount)
    {
        if (is_null($mount)) {
            array_push($this->openAPINullablesSetToNull, 'mount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mount'] = $mount;

        return $this;
    }

    /**
     * Gets admin_password
     *
     * @return string|null
     */
    public function getAdminPassword()
    {
        return $this->container['admin_password'];
    }

    /**
     * Sets admin_password
     *
     * @param string|null $admin_password admin_password
     *
     * @return self
     */
    public function setAdminPassword($admin_password)
    {
        if (is_null($admin_password)) {
            array_push($this->openAPINullablesSetToNull, 'admin_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admin_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admin_password'] = $admin_password;

        return $this;
    }

    /**
     * Gets source_port
     *
     * @return int|null
     */
    public function getSourcePort()
    {
        return $this->container['source_port'];
    }

    /**
     * Sets source_port
     *
     * @param int|null $source_port source_port
     *
     * @return self
     */
    public function setSourcePort($source_port)
    {
        if (is_null($source_port)) {
            array_push($this->openAPINullablesSetToNull, 'source_port');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_port', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_port'] = $source_port;

        return $this;
    }

    /**
     * Gets source_mount
     *
     * @return string|null
     */
    public function getSourceMount()
    {
        return $this->container['source_mount'];
    }

    /**
     * Sets source_mount
     *
     * @param string|null $source_mount source_mount
     *
     * @return self
     */
    public function setSourceMount($source_mount)
    {
        if (is_null($source_mount)) {
            array_push($this->openAPINullablesSetToNull, 'source_mount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_mount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_mount'] = $source_mount;

        return $this;
    }

    /**
     * Gets source_username
     *
     * @return string|null
     */
    public function getSourceUsername()
    {
        return $this->container['source_username'];
    }

    /**
     * Sets source_username
     *
     * @param string|null $source_username source_username
     *
     * @return self
     */
    public function setSourceUsername($source_username)
    {
        if (is_null($source_username)) {
            array_push($this->openAPINullablesSetToNull, 'source_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_username'] = $source_username;

        return $this;
    }

    /**
     * Gets source_password
     *
     * @return string|null
     */
    public function getSourcePassword()
    {
        return $this->container['source_password'];
    }

    /**
     * Sets source_password
     *
     * @param string|null $source_password source_password
     *
     * @return self
     */
    public function setSourcePassword($source_password)
    {
        if (is_null($source_password)) {
            array_push($this->openAPINullablesSetToNull, 'source_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_password'] = $source_password;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets listeners_unique
     *
     * @return int|null
     */
    public function getListenersUnique()
    {
        return $this->container['listeners_unique'];
    }

    /**
     * Sets listeners_unique
     *
     * @param int|null $listeners_unique The most recent number of unique listeners.
     *
     * @return self
     */
    public function setListenersUnique($listeners_unique)
    {
        if (is_null($listeners_unique)) {
            throw new \InvalidArgumentException('non-nullable listeners_unique cannot be null');
        }
        $this->container['listeners_unique'] = $listeners_unique;

        return $this;
    }

    /**
     * Gets listeners_total
     *
     * @return int|null
     */
    public function getListenersTotal()
    {
        return $this->container['listeners_total'];
    }

    /**
     * Sets listeners_total
     *
     * @param int|null $listeners_total The most recent number of total (non-unique) listeners.
     *
     * @return self
     */
    public function setListenersTotal($listeners_total)
    {
        if (is_null($listeners_total)) {
            throw new \InvalidArgumentException('non-nullable listeners_total cannot be null');
        }
        $this->container['listeners_total'] = $listeners_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


