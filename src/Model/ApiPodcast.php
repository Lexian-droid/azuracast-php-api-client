<?php
/**
 * ApiPodcast
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiPodcast Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiPodcast implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_Podcast';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,string>',
        'id' => 'string',
        'storageLocationId' => 'int',
        'source' => 'string',
        'playlistId' => 'int',
        'playlistAutoPublish' => 'bool',
        'title' => 'string',
        'link' => 'string',
        'description' => 'string',
        'descriptionShort' => 'string',
        'isEnabled' => 'bool',
        'brandingConfig' => 'mixed[]',
        'language' => 'string',
        'languageName' => 'string',
        'author' => 'string',
        'email' => 'string',
        'hasCustomArt' => 'bool',
        'art' => 'string',
        'artUpdatedAt' => 'int',
        'isPublished' => 'bool',
        'episodes' => 'int',
        'categories' => '\AzuraCast\Model\ApiPodcastCategory[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'id' => null,
        'storageLocationId' => null,
        'source' => null,
        'playlistId' => null,
        'playlistAutoPublish' => null,
        'title' => null,
        'link' => null,
        'description' => null,
        'descriptionShort' => null,
        'isEnabled' => null,
        'brandingConfig' => null,
        'language' => null,
        'languageName' => null,
        'author' => null,
        'email' => null,
        'hasCustomArt' => null,
        'art' => null,
        'artUpdatedAt' => null,
        'isPublished' => null,
        'episodes' => null,
        'categories' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'links' => false,
        'id' => false,
        'storageLocationId' => false,
        'source' => false,
        'playlistId' => true,
        'playlistAutoPublish' => false,
        'title' => false,
        'link' => true,
        'description' => false,
        'descriptionShort' => false,
        'isEnabled' => false,
        'brandingConfig' => false,
        'language' => false,
        'languageName' => false,
        'author' => false,
        'email' => false,
        'hasCustomArt' => false,
        'art' => false,
        'artUpdatedAt' => false,
        'isPublished' => false,
        'episodes' => false,
        'categories' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'storageLocationId' => 'storage_location_id',
        'source' => 'source',
        'playlistId' => 'playlist_id',
        'playlistAutoPublish' => 'playlist_auto_publish',
        'title' => 'title',
        'link' => 'link',
        'description' => 'description',
        'descriptionShort' => 'description_short',
        'isEnabled' => 'is_enabled',
        'brandingConfig' => 'branding_config',
        'language' => 'language',
        'languageName' => 'language_name',
        'author' => 'author',
        'email' => 'email',
        'hasCustomArt' => 'has_custom_art',
        'art' => 'art',
        'artUpdatedAt' => 'art_updated_at',
        'isPublished' => 'is_published',
        'episodes' => 'episodes',
        'categories' => 'categories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'storageLocationId' => 'setStorageLocationId',
        'source' => 'setSource',
        'playlistId' => 'setPlaylistId',
        'playlistAutoPublish' => 'setPlaylistAutoPublish',
        'title' => 'setTitle',
        'link' => 'setLink',
        'description' => 'setDescription',
        'descriptionShort' => 'setDescriptionShort',
        'isEnabled' => 'setIsEnabled',
        'brandingConfig' => 'setBrandingConfig',
        'language' => 'setLanguage',
        'languageName' => 'setLanguageName',
        'author' => 'setAuthor',
        'email' => 'setEmail',
        'hasCustomArt' => 'setHasCustomArt',
        'art' => 'setArt',
        'artUpdatedAt' => 'setArtUpdatedAt',
        'isPublished' => 'setIsPublished',
        'episodes' => 'setEpisodes',
        'categories' => 'setCategories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'storageLocationId' => 'getStorageLocationId',
        'source' => 'getSource',
        'playlistId' => 'getPlaylistId',
        'playlistAutoPublish' => 'getPlaylistAutoPublish',
        'title' => 'getTitle',
        'link' => 'getLink',
        'description' => 'getDescription',
        'descriptionShort' => 'getDescriptionShort',
        'isEnabled' => 'getIsEnabled',
        'brandingConfig' => 'getBrandingConfig',
        'language' => 'getLanguage',
        'languageName' => 'getLanguageName',
        'author' => 'getAuthor',
        'email' => 'getEmail',
        'hasCustomArt' => 'getHasCustomArt',
        'art' => 'getArt',
        'artUpdatedAt' => 'getArtUpdatedAt',
        'isPublished' => 'getIsPublished',
        'episodes' => 'getEpisodes',
        'categories' => 'getCategories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('storageLocationId', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('playlistId', $data ?? [], null);
        $this->setIfExists('playlistAutoPublish', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('link', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('descriptionShort', $data ?? [], null);
        $this->setIfExists('isEnabled', $data ?? [], null);
        $this->setIfExists('brandingConfig', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('languageName', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('hasCustomArt', $data ?? [], null);
        $this->setIfExists('art', $data ?? [], null);
        $this->setIfExists('artUpdatedAt', $data ?? [], null);
        $this->setIfExists('isPublished', $data ?? [], null);
        $this->setIfExists('episodes', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets storageLocationId
     *
     * @return int|null
     */
    public function getStorageLocationId()
    {
        return $this->container['storageLocationId'];
    }

    /**
     * Sets storageLocationId
     *
     * @param int|null $storageLocationId storageLocationId
     *
     * @return self
     */
    public function setStorageLocationId($storageLocationId)
    {
        if (is_null($storageLocationId)) {
            throw new \InvalidArgumentException('non-nullable storageLocationId cannot be null');
        }
        $this->container['storageLocationId'] = $storageLocationId;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets playlistId
     *
     * @return int|null
     */
    public function getPlaylistId()
    {
        return $this->container['playlistId'];
    }

    /**
     * Sets playlistId
     *
     * @param int|null $playlistId playlistId
     *
     * @return self
     */
    public function setPlaylistId($playlistId)
    {
        if (is_null($playlistId)) {
            array_push($this->openAPINullablesSetToNull, 'playlistId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlistId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlistId'] = $playlistId;

        return $this;
    }

    /**
     * Gets playlistAutoPublish
     *
     * @return bool|null
     */
    public function getPlaylistAutoPublish()
    {
        return $this->container['playlistAutoPublish'];
    }

    /**
     * Sets playlistAutoPublish
     *
     * @param bool|null $playlistAutoPublish playlistAutoPublish
     *
     * @return self
     */
    public function setPlaylistAutoPublish($playlistAutoPublish)
    {
        if (is_null($playlistAutoPublish)) {
            throw new \InvalidArgumentException('non-nullable playlistAutoPublish cannot be null');
        }
        $this->container['playlistAutoPublish'] = $playlistAutoPublish;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            array_push($this->openAPINullablesSetToNull, 'link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptionShort
     *
     * @return string|null
     */
    public function getDescriptionShort()
    {
        return $this->container['descriptionShort'];
    }

    /**
     * Sets descriptionShort
     *
     * @param string|null $descriptionShort descriptionShort
     *
     * @return self
     */
    public function setDescriptionShort($descriptionShort)
    {
        if (is_null($descriptionShort)) {
            throw new \InvalidArgumentException('non-nullable descriptionShort cannot be null');
        }
        $this->container['descriptionShort'] = $descriptionShort;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return bool|null
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param bool|null $isEnabled isEnabled
     *
     * @return self
     */
    public function setIsEnabled($isEnabled)
    {
        if (is_null($isEnabled)) {
            throw new \InvalidArgumentException('non-nullable isEnabled cannot be null');
        }
        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets brandingConfig
     *
     * @return mixed[]|null
     */
    public function getBrandingConfig()
    {
        return $this->container['brandingConfig'];
    }

    /**
     * Sets brandingConfig
     *
     * @param mixed[]|null $brandingConfig An array containing podcast-specific branding configuration
     *
     * @return self
     */
    public function setBrandingConfig($brandingConfig)
    {
        if (is_null($brandingConfig)) {
            throw new \InvalidArgumentException('non-nullable brandingConfig cannot be null');
        }
        $this->container['brandingConfig'] = $brandingConfig;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets languageName
     *
     * @return string|null
     */
    public function getLanguageName()
    {
        return $this->container['languageName'];
    }

    /**
     * Sets languageName
     *
     * @param string|null $languageName languageName
     *
     * @return self
     */
    public function setLanguageName($languageName)
    {
        if (is_null($languageName)) {
            throw new \InvalidArgumentException('non-nullable languageName cannot be null');
        }
        $this->container['languageName'] = $languageName;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            throw new \InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets hasCustomArt
     *
     * @return bool|null
     */
    public function getHasCustomArt()
    {
        return $this->container['hasCustomArt'];
    }

    /**
     * Sets hasCustomArt
     *
     * @param bool|null $hasCustomArt hasCustomArt
     *
     * @return self
     */
    public function setHasCustomArt($hasCustomArt)
    {
        if (is_null($hasCustomArt)) {
            throw new \InvalidArgumentException('non-nullable hasCustomArt cannot be null');
        }
        $this->container['hasCustomArt'] = $hasCustomArt;

        return $this;
    }

    /**
     * Gets art
     *
     * @return string|null
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     *
     * @param string|null $art art
     *
     * @return self
     */
    public function setArt($art)
    {
        if (is_null($art)) {
            throw new \InvalidArgumentException('non-nullable art cannot be null');
        }
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets artUpdatedAt
     *
     * @return int|null
     */
    public function getArtUpdatedAt()
    {
        return $this->container['artUpdatedAt'];
    }

    /**
     * Sets artUpdatedAt
     *
     * @param int|null $artUpdatedAt artUpdatedAt
     *
     * @return self
     */
    public function setArtUpdatedAt($artUpdatedAt)
    {
        if (is_null($artUpdatedAt)) {
            throw new \InvalidArgumentException('non-nullable artUpdatedAt cannot be null');
        }
        $this->container['artUpdatedAt'] = $artUpdatedAt;

        return $this;
    }

    /**
     * Gets isPublished
     *
     * @return bool|null
     */
    public function getIsPublished()
    {
        return $this->container['isPublished'];
    }

    /**
     * Sets isPublished
     *
     * @param bool|null $isPublished isPublished
     *
     * @return self
     */
    public function setIsPublished($isPublished)
    {
        if (is_null($isPublished)) {
            throw new \InvalidArgumentException('non-nullable isPublished cannot be null');
        }
        $this->container['isPublished'] = $isPublished;

        return $this;
    }

    /**
     * Gets episodes
     *
     * @return int|null
     */
    public function getEpisodes()
    {
        return $this->container['episodes'];
    }

    /**
     * Sets episodes
     *
     * @param int|null $episodes episodes
     *
     * @return self
     */
    public function setEpisodes($episodes)
    {
        if (is_null($episodes)) {
            throw new \InvalidArgumentException('non-nullable episodes cannot be null');
        }
        $this->container['episodes'] = $episodes;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \AzuraCast\Model\ApiPodcastCategory[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \AzuraCast\Model\ApiPodcastCategory[]|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


