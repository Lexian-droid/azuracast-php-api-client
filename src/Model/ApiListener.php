<?php
/**
 * ApiListener
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiListener Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiListener implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_Listener';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ip' => 'string',
        'userAgent' => 'string',
        'hash' => 'string',
        'mountIsLocal' => 'bool',
        'mountName' => 'string',
        'connectedOn' => 'int',
        'connectedUntil' => 'int',
        'connectedTime' => 'int',
        'device' => '\AzuraCast\Model\ApiListenerDevice',
        'location' => '\AzuraCast\Model\ApiListenerLocation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ip' => null,
        'userAgent' => null,
        'hash' => null,
        'mountIsLocal' => null,
        'mountName' => null,
        'connectedOn' => null,
        'connectedUntil' => null,
        'connectedTime' => null,
        'device' => null,
        'location' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ip' => false,
        'userAgent' => false,
        'hash' => false,
        'mountIsLocal' => false,
        'mountName' => false,
        'connectedOn' => false,
        'connectedUntil' => false,
        'connectedTime' => false,
        'device' => false,
        'location' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
        'userAgent' => 'user_agent',
        'hash' => 'hash',
        'mountIsLocal' => 'mount_is_local',
        'mountName' => 'mount_name',
        'connectedOn' => 'connected_on',
        'connectedUntil' => 'connected_until',
        'connectedTime' => 'connected_time',
        'device' => 'device',
        'location' => 'location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
        'userAgent' => 'setUserAgent',
        'hash' => 'setHash',
        'mountIsLocal' => 'setMountIsLocal',
        'mountName' => 'setMountName',
        'connectedOn' => 'setConnectedOn',
        'connectedUntil' => 'setConnectedUntil',
        'connectedTime' => 'setConnectedTime',
        'device' => 'setDevice',
        'location' => 'setLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
        'userAgent' => 'getUserAgent',
        'hash' => 'getHash',
        'mountIsLocal' => 'getMountIsLocal',
        'mountName' => 'getMountName',
        'connectedOn' => 'getConnectedOn',
        'connectedUntil' => 'getConnectedUntil',
        'connectedTime' => 'getConnectedTime',
        'device' => 'getDevice',
        'location' => 'getLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('userAgent', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('mountIsLocal', $data ?? [], null);
        $this->setIfExists('mountName', $data ?? [], null);
        $this->setIfExists('connectedOn', $data ?? [], null);
        $this->setIfExists('connectedUntil', $data ?? [], null);
        $this->setIfExists('connectedTime', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip The listener's IP address
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets userAgent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['userAgent'];
    }

    /**
     * Sets userAgent
     *
     * @param string|null $userAgent The listener's HTTP User-Agent
     *
     * @return self
     */
    public function setUserAgent($userAgent)
    {
        if (is_null($userAgent)) {
            throw new \InvalidArgumentException('non-nullable userAgent cannot be null');
        }
        $this->container['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash A unique identifier for this listener/user agent (used for unique calculations).
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets mountIsLocal
     *
     * @return bool|null
     */
    public function getMountIsLocal()
    {
        return $this->container['mountIsLocal'];
    }

    /**
     * Sets mountIsLocal
     *
     * @param bool|null $mountIsLocal Whether the user is connected to a local mount point or a remote one.
     *
     * @return self
     */
    public function setMountIsLocal($mountIsLocal)
    {
        if (is_null($mountIsLocal)) {
            throw new \InvalidArgumentException('non-nullable mountIsLocal cannot be null');
        }
        $this->container['mountIsLocal'] = $mountIsLocal;

        return $this;
    }

    /**
     * Gets mountName
     *
     * @return string|null
     */
    public function getMountName()
    {
        return $this->container['mountName'];
    }

    /**
     * Sets mountName
     *
     * @param string|null $mountName The display name of the mount point.
     *
     * @return self
     */
    public function setMountName($mountName)
    {
        if (is_null($mountName)) {
            throw new \InvalidArgumentException('non-nullable mountName cannot be null');
        }
        $this->container['mountName'] = $mountName;

        return $this;
    }

    /**
     * Gets connectedOn
     *
     * @return int|null
     */
    public function getConnectedOn()
    {
        return $this->container['connectedOn'];
    }

    /**
     * Sets connectedOn
     *
     * @param int|null $connectedOn UNIX timestamp that the user first connected.
     *
     * @return self
     */
    public function setConnectedOn($connectedOn)
    {
        if (is_null($connectedOn)) {
            throw new \InvalidArgumentException('non-nullable connectedOn cannot be null');
        }
        $this->container['connectedOn'] = $connectedOn;

        return $this;
    }

    /**
     * Gets connectedUntil
     *
     * @return int|null
     */
    public function getConnectedUntil()
    {
        return $this->container['connectedUntil'];
    }

    /**
     * Sets connectedUntil
     *
     * @param int|null $connectedUntil UNIX timestamp that the user disconnected (or the latest timestamp if they are still connected).
     *
     * @return self
     */
    public function setConnectedUntil($connectedUntil)
    {
        if (is_null($connectedUntil)) {
            throw new \InvalidArgumentException('non-nullable connectedUntil cannot be null');
        }
        $this->container['connectedUntil'] = $connectedUntil;

        return $this;
    }

    /**
     * Gets connectedTime
     *
     * @return int|null
     */
    public function getConnectedTime()
    {
        return $this->container['connectedTime'];
    }

    /**
     * Sets connectedTime
     *
     * @param int|null $connectedTime Number of seconds that the user has been connected.
     *
     * @return self
     */
    public function setConnectedTime($connectedTime)
    {
        if (is_null($connectedTime)) {
            throw new \InvalidArgumentException('non-nullable connectedTime cannot be null');
        }
        $this->container['connectedTime'] = $connectedTime;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \AzuraCast\Model\ApiListenerDevice|null
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \AzuraCast\Model\ApiListenerDevice|null $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \AzuraCast\Model\ApiListenerLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \AzuraCast\Model\ApiListenerLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


