<?php
/**
 * ApiAdminStorageLocation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiAdminStorageLocation Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiAdminStorageLocation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_Admin_StorageLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'links' => 'array<string,string>',
        'id' => 'int',
        'type' => 'string',
        'adapter' => 'string',
        'path' => 'string',
        's3CredentialKey' => 'string',
        's3CredentialSecret' => 'string',
        's3Region' => 'string',
        's3Version' => 'string',
        's3Bucket' => 'string',
        's3Endpoint' => 'string',
        'dropboxAppKey' => 'string',
        'dropboxAppSecret' => 'string',
        'dropboxAuthToken' => 'string',
        'sftpHost' => 'string',
        'sftpUsername' => 'string',
        'sftpPassword' => 'string',
        'sftpPort' => 'int',
        'sftpPrivateKey' => 'string',
        'sftpPrivateKeyPassPhrase' => 'string',
        'storageQuota' => 'string',
        'storageQuotaBytes' => 'string',
        'storageUsed' => 'string',
        'storageUsedBytes' => 'string',
        'storageAvailable' => 'string',
        'storageAvailableBytes' => 'string',
        'storageUsedPercent' => 'int',
        'isFull' => 'bool',
        'uri' => 'string',
        'stations' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'links' => null,
        'id' => null,
        'type' => null,
        'adapter' => null,
        'path' => null,
        's3CredentialKey' => null,
        's3CredentialSecret' => null,
        's3Region' => null,
        's3Version' => null,
        's3Bucket' => null,
        's3Endpoint' => null,
        'dropboxAppKey' => null,
        'dropboxAppSecret' => null,
        'dropboxAuthToken' => null,
        'sftpHost' => null,
        'sftpUsername' => null,
        'sftpPassword' => null,
        'sftpPort' => null,
        'sftpPrivateKey' => null,
        'sftpPrivateKeyPassPhrase' => null,
        'storageQuota' => null,
        'storageQuotaBytes' => null,
        'storageUsed' => null,
        'storageUsedBytes' => null,
        'storageAvailable' => null,
        'storageAvailableBytes' => null,
        'storageUsedPercent' => null,
        'isFull' => null,
        'uri' => null,
        'stations' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'links' => false,
        'id' => false,
        'type' => false,
        'adapter' => false,
        'path' => true,
        's3CredentialKey' => true,
        's3CredentialSecret' => true,
        's3Region' => true,
        's3Version' => true,
        's3Bucket' => true,
        's3Endpoint' => true,
        'dropboxAppKey' => true,
        'dropboxAppSecret' => true,
        'dropboxAuthToken' => true,
        'sftpHost' => true,
        'sftpUsername' => true,
        'sftpPassword' => true,
        'sftpPort' => true,
        'sftpPrivateKey' => true,
        'sftpPrivateKeyPassPhrase' => true,
        'storageQuota' => true,
        'storageQuotaBytes' => true,
        'storageUsed' => true,
        'storageUsedBytes' => true,
        'storageAvailable' => true,
        'storageAvailableBytes' => true,
        'storageUsedPercent' => true,
        'isFull' => false,
        'uri' => false,
        'stations' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
        'id' => 'id',
        'type' => 'type',
        'adapter' => 'adapter',
        'path' => 'path',
        's3CredentialKey' => 's3CredentialKey',
        's3CredentialSecret' => 's3CredentialSecret',
        's3Region' => 's3Region',
        's3Version' => 's3Version',
        's3Bucket' => 's3Bucket',
        's3Endpoint' => 's3Endpoint',
        'dropboxAppKey' => 'dropboxAppKey',
        'dropboxAppSecret' => 'dropboxAppSecret',
        'dropboxAuthToken' => 'dropboxAuthToken',
        'sftpHost' => 'sftpHost',
        'sftpUsername' => 'sftpUsername',
        'sftpPassword' => 'sftpPassword',
        'sftpPort' => 'sftpPort',
        'sftpPrivateKey' => 'sftpPrivateKey',
        'sftpPrivateKeyPassPhrase' => 'sftpPrivateKeyPassPhrase',
        'storageQuota' => 'storageQuota',
        'storageQuotaBytes' => 'storageQuotaBytes',
        'storageUsed' => 'storageUsed',
        'storageUsedBytes' => 'storageUsedBytes',
        'storageAvailable' => 'storageAvailable',
        'storageAvailableBytes' => 'storageAvailableBytes',
        'storageUsedPercent' => 'storageUsedPercent',
        'isFull' => 'isFull',
        'uri' => 'uri',
        'stations' => 'stations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
        'id' => 'setId',
        'type' => 'setType',
        'adapter' => 'setAdapter',
        'path' => 'setPath',
        's3CredentialKey' => 'setS3CredentialKey',
        's3CredentialSecret' => 'setS3CredentialSecret',
        's3Region' => 'setS3Region',
        's3Version' => 'setS3Version',
        's3Bucket' => 'setS3Bucket',
        's3Endpoint' => 'setS3Endpoint',
        'dropboxAppKey' => 'setDropboxAppKey',
        'dropboxAppSecret' => 'setDropboxAppSecret',
        'dropboxAuthToken' => 'setDropboxAuthToken',
        'sftpHost' => 'setSftpHost',
        'sftpUsername' => 'setSftpUsername',
        'sftpPassword' => 'setSftpPassword',
        'sftpPort' => 'setSftpPort',
        'sftpPrivateKey' => 'setSftpPrivateKey',
        'sftpPrivateKeyPassPhrase' => 'setSftpPrivateKeyPassPhrase',
        'storageQuota' => 'setStorageQuota',
        'storageQuotaBytes' => 'setStorageQuotaBytes',
        'storageUsed' => 'setStorageUsed',
        'storageUsedBytes' => 'setStorageUsedBytes',
        'storageAvailable' => 'setStorageAvailable',
        'storageAvailableBytes' => 'setStorageAvailableBytes',
        'storageUsedPercent' => 'setStorageUsedPercent',
        'isFull' => 'setIsFull',
        'uri' => 'setUri',
        'stations' => 'setStations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
        'id' => 'getId',
        'type' => 'getType',
        'adapter' => 'getAdapter',
        'path' => 'getPath',
        's3CredentialKey' => 'getS3CredentialKey',
        's3CredentialSecret' => 'getS3CredentialSecret',
        's3Region' => 'getS3Region',
        's3Version' => 'getS3Version',
        's3Bucket' => 'getS3Bucket',
        's3Endpoint' => 'getS3Endpoint',
        'dropboxAppKey' => 'getDropboxAppKey',
        'dropboxAppSecret' => 'getDropboxAppSecret',
        'dropboxAuthToken' => 'getDropboxAuthToken',
        'sftpHost' => 'getSftpHost',
        'sftpUsername' => 'getSftpUsername',
        'sftpPassword' => 'getSftpPassword',
        'sftpPort' => 'getSftpPort',
        'sftpPrivateKey' => 'getSftpPrivateKey',
        'sftpPrivateKeyPassPhrase' => 'getSftpPrivateKeyPassPhrase',
        'storageQuota' => 'getStorageQuota',
        'storageQuotaBytes' => 'getStorageQuotaBytes',
        'storageUsed' => 'getStorageUsed',
        'storageUsedBytes' => 'getStorageUsedBytes',
        'storageAvailable' => 'getStorageAvailable',
        'storageAvailableBytes' => 'getStorageAvailableBytes',
        'storageUsedPercent' => 'getStorageUsedPercent',
        'isFull' => 'getIsFull',
        'uri' => 'getUri',
        'stations' => 'getStations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('adapter', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('s3CredentialKey', $data ?? [], null);
        $this->setIfExists('s3CredentialSecret', $data ?? [], null);
        $this->setIfExists('s3Region', $data ?? [], null);
        $this->setIfExists('s3Version', $data ?? [], null);
        $this->setIfExists('s3Bucket', $data ?? [], null);
        $this->setIfExists('s3Endpoint', $data ?? [], null);
        $this->setIfExists('dropboxAppKey', $data ?? [], null);
        $this->setIfExists('dropboxAppSecret', $data ?? [], null);
        $this->setIfExists('dropboxAuthToken', $data ?? [], null);
        $this->setIfExists('sftpHost', $data ?? [], null);
        $this->setIfExists('sftpUsername', $data ?? [], null);
        $this->setIfExists('sftpPassword', $data ?? [], null);
        $this->setIfExists('sftpPort', $data ?? [], null);
        $this->setIfExists('sftpPrivateKey', $data ?? [], null);
        $this->setIfExists('sftpPrivateKeyPassPhrase', $data ?? [], null);
        $this->setIfExists('storageQuota', $data ?? [], null);
        $this->setIfExists('storageQuotaBytes', $data ?? [], null);
        $this->setIfExists('storageUsed', $data ?? [], null);
        $this->setIfExists('storageUsedBytes', $data ?? [], null);
        $this->setIfExists('storageAvailable', $data ?? [], null);
        $this->setIfExists('storageAvailableBytes', $data ?? [], null);
        $this->setIfExists('storageUsedPercent', $data ?? [], null);
        $this->setIfExists('isFull', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('stations', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of storage location.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets adapter
     *
     * @return string|null
     */
    public function getAdapter()
    {
        return $this->container['adapter'];
    }

    /**
     * Sets adapter
     *
     * @param string|null $adapter The storage adapter to use for this location.
     *
     * @return self
     */
    public function setAdapter($adapter)
    {
        if (is_null($adapter)) {
            throw new \InvalidArgumentException('non-nullable adapter cannot be null');
        }
        $this->container['adapter'] = $adapter;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path The local path, if the local adapter is used, or path prefix for S3/remote adapters.
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            array_push($this->openAPINullablesSetToNull, 'path');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('path', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets s3CredentialKey
     *
     * @return string|null
     */
    public function getS3CredentialKey()
    {
        return $this->container['s3CredentialKey'];
    }

    /**
     * Sets s3CredentialKey
     *
     * @param string|null $s3CredentialKey The credential key for S3 adapters.
     *
     * @return self
     */
    public function setS3CredentialKey($s3CredentialKey)
    {
        if (is_null($s3CredentialKey)) {
            array_push($this->openAPINullablesSetToNull, 's3CredentialKey');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3CredentialKey', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3CredentialKey'] = $s3CredentialKey;

        return $this;
    }

    /**
     * Gets s3CredentialSecret
     *
     * @return string|null
     */
    public function getS3CredentialSecret()
    {
        return $this->container['s3CredentialSecret'];
    }

    /**
     * Sets s3CredentialSecret
     *
     * @param string|null $s3CredentialSecret The credential secret for S3 adapters.
     *
     * @return self
     */
    public function setS3CredentialSecret($s3CredentialSecret)
    {
        if (is_null($s3CredentialSecret)) {
            array_push($this->openAPINullablesSetToNull, 's3CredentialSecret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3CredentialSecret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3CredentialSecret'] = $s3CredentialSecret;

        return $this;
    }

    /**
     * Gets s3Region
     *
     * @return string|null
     */
    public function getS3Region()
    {
        return $this->container['s3Region'];
    }

    /**
     * Sets s3Region
     *
     * @param string|null $s3Region The region for S3 adapters.
     *
     * @return self
     */
    public function setS3Region($s3Region)
    {
        if (is_null($s3Region)) {
            array_push($this->openAPINullablesSetToNull, 's3Region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3Region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3Region'] = $s3Region;

        return $this;
    }

    /**
     * Gets s3Version
     *
     * @return string|null
     */
    public function getS3Version()
    {
        return $this->container['s3Version'];
    }

    /**
     * Sets s3Version
     *
     * @param string|null $s3Version The API version for S3 adapters.
     *
     * @return self
     */
    public function setS3Version($s3Version)
    {
        if (is_null($s3Version)) {
            array_push($this->openAPINullablesSetToNull, 's3Version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3Version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3Version'] = $s3Version;

        return $this;
    }

    /**
     * Gets s3Bucket
     *
     * @return string|null
     */
    public function getS3Bucket()
    {
        return $this->container['s3Bucket'];
    }

    /**
     * Sets s3Bucket
     *
     * @param string|null $s3Bucket The S3 bucket name for S3 adapters.
     *
     * @return self
     */
    public function setS3Bucket($s3Bucket)
    {
        if (is_null($s3Bucket)) {
            array_push($this->openAPINullablesSetToNull, 's3Bucket');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3Bucket', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3Bucket'] = $s3Bucket;

        return $this;
    }

    /**
     * Gets s3Endpoint
     *
     * @return string|null
     */
    public function getS3Endpoint()
    {
        return $this->container['s3Endpoint'];
    }

    /**
     * Sets s3Endpoint
     *
     * @param string|null $s3Endpoint The optional custom S3 endpoint S3 adapters.
     *
     * @return self
     */
    public function setS3Endpoint($s3Endpoint)
    {
        if (is_null($s3Endpoint)) {
            array_push($this->openAPINullablesSetToNull, 's3Endpoint');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('s3Endpoint', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['s3Endpoint'] = $s3Endpoint;

        return $this;
    }

    /**
     * Gets dropboxAppKey
     *
     * @return string|null
     */
    public function getDropboxAppKey()
    {
        return $this->container['dropboxAppKey'];
    }

    /**
     * Sets dropboxAppKey
     *
     * @param string|null $dropboxAppKey The optional Dropbox App Key.
     *
     * @return self
     */
    public function setDropboxAppKey($dropboxAppKey)
    {
        if (is_null($dropboxAppKey)) {
            array_push($this->openAPINullablesSetToNull, 'dropboxAppKey');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropboxAppKey', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropboxAppKey'] = $dropboxAppKey;

        return $this;
    }

    /**
     * Gets dropboxAppSecret
     *
     * @return string|null
     */
    public function getDropboxAppSecret()
    {
        return $this->container['dropboxAppSecret'];
    }

    /**
     * Sets dropboxAppSecret
     *
     * @param string|null $dropboxAppSecret The optional Dropbox App Secret.
     *
     * @return self
     */
    public function setDropboxAppSecret($dropboxAppSecret)
    {
        if (is_null($dropboxAppSecret)) {
            array_push($this->openAPINullablesSetToNull, 'dropboxAppSecret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropboxAppSecret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropboxAppSecret'] = $dropboxAppSecret;

        return $this;
    }

    /**
     * Gets dropboxAuthToken
     *
     * @return string|null
     */
    public function getDropboxAuthToken()
    {
        return $this->container['dropboxAuthToken'];
    }

    /**
     * Sets dropboxAuthToken
     *
     * @param string|null $dropboxAuthToken The optional Dropbox Auth Token.
     *
     * @return self
     */
    public function setDropboxAuthToken($dropboxAuthToken)
    {
        if (is_null($dropboxAuthToken)) {
            array_push($this->openAPINullablesSetToNull, 'dropboxAuthToken');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dropboxAuthToken', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dropboxAuthToken'] = $dropboxAuthToken;

        return $this;
    }

    /**
     * Gets sftpHost
     *
     * @return string|null
     */
    public function getSftpHost()
    {
        return $this->container['sftpHost'];
    }

    /**
     * Sets sftpHost
     *
     * @param string|null $sftpHost The host for SFTP adapters
     *
     * @return self
     */
    public function setSftpHost($sftpHost)
    {
        if (is_null($sftpHost)) {
            array_push($this->openAPINullablesSetToNull, 'sftpHost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftpHost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftpHost'] = $sftpHost;

        return $this;
    }

    /**
     * Gets sftpUsername
     *
     * @return string|null
     */
    public function getSftpUsername()
    {
        return $this->container['sftpUsername'];
    }

    /**
     * Sets sftpUsername
     *
     * @param string|null $sftpUsername The username for SFTP adapters
     *
     * @return self
     */
    public function setSftpUsername($sftpUsername)
    {
        if (is_null($sftpUsername)) {
            array_push($this->openAPINullablesSetToNull, 'sftpUsername');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftpUsername', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftpUsername'] = $sftpUsername;

        return $this;
    }

    /**
     * Gets sftpPassword
     *
     * @return string|null
     */
    public function getSftpPassword()
    {
        return $this->container['sftpPassword'];
    }

    /**
     * Sets sftpPassword
     *
     * @param string|null $sftpPassword The password for SFTP adapters
     *
     * @return self
     */
    public function setSftpPassword($sftpPassword)
    {
        if (is_null($sftpPassword)) {
            array_push($this->openAPINullablesSetToNull, 'sftpPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftpPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftpPassword'] = $sftpPassword;

        return $this;
    }

    /**
     * Gets sftpPort
     *
     * @return int|null
     */
    public function getSftpPort()
    {
        return $this->container['sftpPort'];
    }

    /**
     * Sets sftpPort
     *
     * @param int|null $sftpPort The port for SFTP adapters
     *
     * @return self
     */
    public function setSftpPort($sftpPort)
    {
        if (is_null($sftpPort)) {
            array_push($this->openAPINullablesSetToNull, 'sftpPort');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftpPort', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftpPort'] = $sftpPort;

        return $this;
    }

    /**
     * Gets sftpPrivateKey
     *
     * @return string|null
     */
    public function getSftpPrivateKey()
    {
        return $this->container['sftpPrivateKey'];
    }

    /**
     * Sets sftpPrivateKey
     *
     * @param string|null $sftpPrivateKey The private key for SFTP adapters
     *
     * @return self
     */
    public function setSftpPrivateKey($sftpPrivateKey)
    {
        if (is_null($sftpPrivateKey)) {
            array_push($this->openAPINullablesSetToNull, 'sftpPrivateKey');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftpPrivateKey', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftpPrivateKey'] = $sftpPrivateKey;

        return $this;
    }

    /**
     * Gets sftpPrivateKeyPassPhrase
     *
     * @return string|null
     */
    public function getSftpPrivateKeyPassPhrase()
    {
        return $this->container['sftpPrivateKeyPassPhrase'];
    }

    /**
     * Sets sftpPrivateKeyPassPhrase
     *
     * @param string|null $sftpPrivateKeyPassPhrase The private key pass phrase for SFTP adapters
     *
     * @return self
     */
    public function setSftpPrivateKeyPassPhrase($sftpPrivateKeyPassPhrase)
    {
        if (is_null($sftpPrivateKeyPassPhrase)) {
            array_push($this->openAPINullablesSetToNull, 'sftpPrivateKeyPassPhrase');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sftpPrivateKeyPassPhrase', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sftpPrivateKeyPassPhrase'] = $sftpPrivateKeyPassPhrase;

        return $this;
    }

    /**
     * Gets storageQuota
     *
     * @return string|null
     */
    public function getStorageQuota()
    {
        return $this->container['storageQuota'];
    }

    /**
     * Sets storageQuota
     *
     * @param string|null $storageQuota storageQuota
     *
     * @return self
     */
    public function setStorageQuota($storageQuota)
    {
        if (is_null($storageQuota)) {
            array_push($this->openAPINullablesSetToNull, 'storageQuota');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageQuota', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageQuota'] = $storageQuota;

        return $this;
    }

    /**
     * Gets storageQuotaBytes
     *
     * @return string|null
     */
    public function getStorageQuotaBytes()
    {
        return $this->container['storageQuotaBytes'];
    }

    /**
     * Sets storageQuotaBytes
     *
     * @param string|null $storageQuotaBytes storageQuotaBytes
     *
     * @return self
     */
    public function setStorageQuotaBytes($storageQuotaBytes)
    {
        if (is_null($storageQuotaBytes)) {
            array_push($this->openAPINullablesSetToNull, 'storageQuotaBytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageQuotaBytes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageQuotaBytes'] = $storageQuotaBytes;

        return $this;
    }

    /**
     * Gets storageUsed
     *
     * @return string|null
     */
    public function getStorageUsed()
    {
        return $this->container['storageUsed'];
    }

    /**
     * Sets storageUsed
     *
     * @param string|null $storageUsed storageUsed
     *
     * @return self
     */
    public function setStorageUsed($storageUsed)
    {
        if (is_null($storageUsed)) {
            array_push($this->openAPINullablesSetToNull, 'storageUsed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageUsed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageUsed'] = $storageUsed;

        return $this;
    }

    /**
     * Gets storageUsedBytes
     *
     * @return string|null
     */
    public function getStorageUsedBytes()
    {
        return $this->container['storageUsedBytes'];
    }

    /**
     * Sets storageUsedBytes
     *
     * @param string|null $storageUsedBytes storageUsedBytes
     *
     * @return self
     */
    public function setStorageUsedBytes($storageUsedBytes)
    {
        if (is_null($storageUsedBytes)) {
            array_push($this->openAPINullablesSetToNull, 'storageUsedBytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageUsedBytes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageUsedBytes'] = $storageUsedBytes;

        return $this;
    }

    /**
     * Gets storageAvailable
     *
     * @return string|null
     */
    public function getStorageAvailable()
    {
        return $this->container['storageAvailable'];
    }

    /**
     * Sets storageAvailable
     *
     * @param string|null $storageAvailable storageAvailable
     *
     * @return self
     */
    public function setStorageAvailable($storageAvailable)
    {
        if (is_null($storageAvailable)) {
            array_push($this->openAPINullablesSetToNull, 'storageAvailable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageAvailable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageAvailable'] = $storageAvailable;

        return $this;
    }

    /**
     * Gets storageAvailableBytes
     *
     * @return string|null
     */
    public function getStorageAvailableBytes()
    {
        return $this->container['storageAvailableBytes'];
    }

    /**
     * Sets storageAvailableBytes
     *
     * @param string|null $storageAvailableBytes storageAvailableBytes
     *
     * @return self
     */
    public function setStorageAvailableBytes($storageAvailableBytes)
    {
        if (is_null($storageAvailableBytes)) {
            array_push($this->openAPINullablesSetToNull, 'storageAvailableBytes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageAvailableBytes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageAvailableBytes'] = $storageAvailableBytes;

        return $this;
    }

    /**
     * Gets storageUsedPercent
     *
     * @return int|null
     */
    public function getStorageUsedPercent()
    {
        return $this->container['storageUsedPercent'];
    }

    /**
     * Sets storageUsedPercent
     *
     * @param int|null $storageUsedPercent storageUsedPercent
     *
     * @return self
     */
    public function setStorageUsedPercent($storageUsedPercent)
    {
        if (is_null($storageUsedPercent)) {
            array_push($this->openAPINullablesSetToNull, 'storageUsedPercent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storageUsedPercent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storageUsedPercent'] = $storageUsedPercent;

        return $this;
    }

    /**
     * Gets isFull
     *
     * @return bool|null
     */
    public function getIsFull()
    {
        return $this->container['isFull'];
    }

    /**
     * Sets isFull
     *
     * @param bool|null $isFull isFull
     *
     * @return self
     */
    public function setIsFull($isFull)
    {
        if (is_null($isFull)) {
            throw new \InvalidArgumentException('non-nullable isFull cannot be null');
        }
        $this->container['isFull'] = $isFull;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri The URI associated with the storage location.
     *
     * @return self
     */
    public function setUri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets stations
     *
     * @return string[]|null
     */
    public function getStations()
    {
        return $this->container['stations'];
    }

    /**
     * Sets stations
     *
     * @param string[]|null $stations The stations using this storage location, if any.
     *
     * @return self
     */
    public function setStations($stations)
    {
        if (is_null($stations)) {
            array_push($this->openAPINullablesSetToNull, 'stations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stations'] = $stations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


