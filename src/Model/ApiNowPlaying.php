<?php
/**
 * ApiNowPlaying
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiNowPlaying Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiNowPlaying implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_NowPlaying';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'station' => '\AzuraCast\Model\ApiNowPlayingStation',
        'listeners' => '\AzuraCast\Model\ApiNowPlayingListeners',
        'live' => '\AzuraCast\Model\ApiNowPlayingLive',
        'now_playing' => '\AzuraCast\Model\ApiNowPlayingNowPlaying',
        'playing_next' => '\AzuraCast\Model\ApiNowPlayingPlayingNext',
        'song_history' => '\AzuraCast\Model\ApiNowPlayingSongHistory[]',
        'is_online' => 'bool',
        'cache' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'station' => null,
        'listeners' => null,
        'live' => null,
        'now_playing' => null,
        'playing_next' => null,
        'song_history' => null,
        'is_online' => null,
        'cache' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'station' => false,
        'listeners' => false,
        'live' => false,
        'now_playing' => true,
        'playing_next' => true,
        'song_history' => false,
        'is_online' => false,
        'cache' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'station' => 'station',
        'listeners' => 'listeners',
        'live' => 'live',
        'now_playing' => 'now_playing',
        'playing_next' => 'playing_next',
        'song_history' => 'song_history',
        'is_online' => 'is_online',
        'cache' => 'cache'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'station' => 'setStation',
        'listeners' => 'setListeners',
        'live' => 'setLive',
        'now_playing' => 'setNowPlaying',
        'playing_next' => 'setPlayingNext',
        'song_history' => 'setSongHistory',
        'is_online' => 'setIsOnline',
        'cache' => 'setCache'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'station' => 'getStation',
        'listeners' => 'getListeners',
        'live' => 'getLive',
        'now_playing' => 'getNowPlaying',
        'playing_next' => 'getPlayingNext',
        'song_history' => 'getSongHistory',
        'is_online' => 'getIsOnline',
        'cache' => 'getCache'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CACHE_HIT = 'hit';
    public const CACHE_DATABASE = 'database';
    public const CACHE_STATION = 'station';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCacheAllowableValues()
    {
        return [
            self::CACHE_HIT,
            self::CACHE_DATABASE,
            self::CACHE_STATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('station', $data ?? [], null);
        $this->setIfExists('listeners', $data ?? [], null);
        $this->setIfExists('live', $data ?? [], null);
        $this->setIfExists('now_playing', $data ?? [], null);
        $this->setIfExists('playing_next', $data ?? [], null);
        $this->setIfExists('song_history', $data ?? [], null);
        $this->setIfExists('is_online', $data ?? [], null);
        $this->setIfExists('cache', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCacheAllowableValues();
        if (!is_null($this->container['cache']) && !in_array($this->container['cache'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cache', must be one of '%s'",
                $this->container['cache'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets station
     *
     * @return \AzuraCast\Model\ApiNowPlayingStation|null
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     *
     * @param \AzuraCast\Model\ApiNowPlayingStation|null $station station
     *
     * @return self
     */
    public function setStation($station)
    {
        if (is_null($station)) {
            throw new \InvalidArgumentException('non-nullable station cannot be null');
        }
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets listeners
     *
     * @return \AzuraCast\Model\ApiNowPlayingListeners|null
     */
    public function getListeners()
    {
        return $this->container['listeners'];
    }

    /**
     * Sets listeners
     *
     * @param \AzuraCast\Model\ApiNowPlayingListeners|null $listeners listeners
     *
     * @return self
     */
    public function setListeners($listeners)
    {
        if (is_null($listeners)) {
            throw new \InvalidArgumentException('non-nullable listeners cannot be null');
        }
        $this->container['listeners'] = $listeners;

        return $this;
    }

    /**
     * Gets live
     *
     * @return \AzuraCast\Model\ApiNowPlayingLive|null
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     *
     * @param \AzuraCast\Model\ApiNowPlayingLive|null $live live
     *
     * @return self
     */
    public function setLive($live)
    {
        if (is_null($live)) {
            throw new \InvalidArgumentException('non-nullable live cannot be null');
        }
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets now_playing
     *
     * @return \AzuraCast\Model\ApiNowPlayingNowPlaying|null
     */
    public function getNowPlaying()
    {
        return $this->container['now_playing'];
    }

    /**
     * Sets now_playing
     *
     * @param \AzuraCast\Model\ApiNowPlayingNowPlaying|null $now_playing now_playing
     *
     * @return self
     */
    public function setNowPlaying($now_playing)
    {
        if (is_null($now_playing)) {
            array_push($this->openAPINullablesSetToNull, 'now_playing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('now_playing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['now_playing'] = $now_playing;

        return $this;
    }

    /**
     * Gets playing_next
     *
     * @return \AzuraCast\Model\ApiNowPlayingPlayingNext|null
     */
    public function getPlayingNext()
    {
        return $this->container['playing_next'];
    }

    /**
     * Sets playing_next
     *
     * @param \AzuraCast\Model\ApiNowPlayingPlayingNext|null $playing_next playing_next
     *
     * @return self
     */
    public function setPlayingNext($playing_next)
    {
        if (is_null($playing_next)) {
            array_push($this->openAPINullablesSetToNull, 'playing_next');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playing_next', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playing_next'] = $playing_next;

        return $this;
    }

    /**
     * Gets song_history
     *
     * @return \AzuraCast\Model\ApiNowPlayingSongHistory[]|null
     */
    public function getSongHistory()
    {
        return $this->container['song_history'];
    }

    /**
     * Sets song_history
     *
     * @param \AzuraCast\Model\ApiNowPlayingSongHistory[]|null $song_history song_history
     *
     * @return self
     */
    public function setSongHistory($song_history)
    {
        if (is_null($song_history)) {
            throw new \InvalidArgumentException('non-nullable song_history cannot be null');
        }
        $this->container['song_history'] = $song_history;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool|null
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool|null $is_online Whether the stream is currently online.
     *
     * @return self
     */
    public function setIsOnline($is_online)
    {
        if (is_null($is_online)) {
            throw new \InvalidArgumentException('non-nullable is_online cannot be null');
        }
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets cache
     *
     * @return string|null
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param string|null $cache Debugging information about where the now playing data comes from.
     *
     * @return self
     */
    public function setCache($cache)
    {
        if (is_null($cache)) {
            array_push($this->openAPINullablesSetToNull, 'cache');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cache', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCacheAllowableValues();
        if (!is_null($cache) && !in_array($cache, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cache', must be one of '%s'",
                    $cache,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache'] = $cache;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


