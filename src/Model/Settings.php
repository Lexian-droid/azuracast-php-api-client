<?php
/**
 * Settings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Settings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appUniqueIdentifier' => 'string',
        'baseUrl' => 'string',
        'instanceName' => 'string',
        'preferBrowserUrl' => 'bool',
        'useRadioProxy' => 'bool',
        'historyKeepDays' => 'int',
        'alwaysUseSsl' => 'bool',
        'apiAccessControl' => 'string',
        'enableStaticNowplaying' => 'bool',
        'analytics' => 'mixed',
        'checkForUpdates' => 'bool',
        'updateResults' => 'mixed[]',
        'updateLastRun' => 'int',
        'publicTheme' => 'mixed',
        'hideAlbumArt' => 'bool',
        'homepageRedirectUrl' => 'string',
        'defaultAlbumArtUrl' => 'string',
        'useExternalAlbumArtWhenProcessingMedia' => 'bool',
        'useExternalAlbumArtInApis' => 'bool',
        'lastFmApiKey' => 'string',
        'hideProductName' => 'bool',
        'publicCustomCss' => 'string',
        'publicCustomJs' => 'string',
        'internalCustomCss' => 'string',
        'backupEnabled' => 'bool',
        'backupTimeCode' => 'string',
        'backupExcludeMedia' => 'bool',
        'backupKeepCopies' => 'int',
        'backupStorageLocation' => 'int',
        'backupFormat' => 'string',
        'backupLastRun' => 'int',
        'backupLastOutput' => 'string',
        'setupCompleteTime' => 'int',
        'syncDisabled' => 'bool',
        'syncLastRun' => 'int',
        'externalIp' => 'string',
        'geoliteLicenseKey' => 'string',
        'geoliteLastRun' => 'int',
        'enableAdvancedFeatures' => 'bool',
        'mailEnabled' => 'bool',
        'mailSenderName' => 'string',
        'mailSenderEmail' => 'string',
        'mailSmtpHost' => 'string',
        'mailSmtpPort' => 'int',
        'mailSmtpUsername' => 'string',
        'mailSmtpPassword' => 'string',
        'mailSmtpSecure' => 'bool',
        'avatarService' => 'string',
        'avatarDefaultUrl' => 'string',
        'acmeEmail' => 'string',
        'acmeDomains' => 'string',
        'ipSource' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appUniqueIdentifier' => null,
        'baseUrl' => null,
        'instanceName' => null,
        'preferBrowserUrl' => null,
        'useRadioProxy' => null,
        'historyKeepDays' => null,
        'alwaysUseSsl' => null,
        'apiAccessControl' => null,
        'enableStaticNowplaying' => null,
        'analytics' => null,
        'checkForUpdates' => null,
        'updateResults' => null,
        'updateLastRun' => null,
        'publicTheme' => null,
        'hideAlbumArt' => null,
        'homepageRedirectUrl' => null,
        'defaultAlbumArtUrl' => null,
        'useExternalAlbumArtWhenProcessingMedia' => null,
        'useExternalAlbumArtInApis' => null,
        'lastFmApiKey' => null,
        'hideProductName' => null,
        'publicCustomCss' => null,
        'publicCustomJs' => null,
        'internalCustomCss' => null,
        'backupEnabled' => null,
        'backupTimeCode' => null,
        'backupExcludeMedia' => null,
        'backupKeepCopies' => null,
        'backupStorageLocation' => null,
        'backupFormat' => null,
        'backupLastRun' => null,
        'backupLastOutput' => null,
        'setupCompleteTime' => null,
        'syncDisabled' => null,
        'syncLastRun' => null,
        'externalIp' => null,
        'geoliteLicenseKey' => null,
        'geoliteLastRun' => null,
        'enableAdvancedFeatures' => null,
        'mailEnabled' => null,
        'mailSenderName' => null,
        'mailSenderEmail' => null,
        'mailSmtpHost' => null,
        'mailSmtpPort' => null,
        'mailSmtpUsername' => null,
        'mailSmtpPassword' => null,
        'mailSmtpSecure' => null,
        'avatarService' => null,
        'avatarDefaultUrl' => null,
        'acmeEmail' => null,
        'acmeDomains' => null,
        'ipSource' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appUniqueIdentifier' => false,
        'baseUrl' => true,
        'instanceName' => true,
        'preferBrowserUrl' => false,
        'useRadioProxy' => false,
        'historyKeepDays' => false,
        'alwaysUseSsl' => false,
        'apiAccessControl' => true,
        'enableStaticNowplaying' => false,
        'analytics' => true,
        'checkForUpdates' => false,
        'updateResults' => true,
        'updateLastRun' => false,
        'publicTheme' => true,
        'hideAlbumArt' => false,
        'homepageRedirectUrl' => true,
        'defaultAlbumArtUrl' => true,
        'useExternalAlbumArtWhenProcessingMedia' => false,
        'useExternalAlbumArtInApis' => false,
        'lastFmApiKey' => true,
        'hideProductName' => false,
        'publicCustomCss' => true,
        'publicCustomJs' => true,
        'internalCustomCss' => true,
        'backupEnabled' => false,
        'backupTimeCode' => true,
        'backupExcludeMedia' => false,
        'backupKeepCopies' => false,
        'backupStorageLocation' => true,
        'backupFormat' => true,
        'backupLastRun' => false,
        'backupLastOutput' => true,
        'setupCompleteTime' => false,
        'syncDisabled' => false,
        'syncLastRun' => false,
        'externalIp' => true,
        'geoliteLicenseKey' => true,
        'geoliteLastRun' => false,
        'enableAdvancedFeatures' => false,
        'mailEnabled' => false,
        'mailSenderName' => true,
        'mailSenderEmail' => true,
        'mailSmtpHost' => true,
        'mailSmtpPort' => false,
        'mailSmtpUsername' => true,
        'mailSmtpPassword' => true,
        'mailSmtpSecure' => false,
        'avatarService' => true,
        'avatarDefaultUrl' => true,
        'acmeEmail' => true,
        'acmeDomains' => true,
        'ipSource' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUniqueIdentifier' => 'app_unique_identifier',
        'baseUrl' => 'base_url',
        'instanceName' => 'instance_name',
        'preferBrowserUrl' => 'prefer_browser_url',
        'useRadioProxy' => 'use_radio_proxy',
        'historyKeepDays' => 'history_keep_days',
        'alwaysUseSsl' => 'always_use_ssl',
        'apiAccessControl' => 'api_access_control',
        'enableStaticNowplaying' => 'enable_static_nowplaying',
        'analytics' => 'analytics',
        'checkForUpdates' => 'check_for_updates',
        'updateResults' => 'update_results',
        'updateLastRun' => 'update_last_run',
        'publicTheme' => 'public_theme',
        'hideAlbumArt' => 'hide_album_art',
        'homepageRedirectUrl' => 'homepage_redirect_url',
        'defaultAlbumArtUrl' => 'default_album_art_url',
        'useExternalAlbumArtWhenProcessingMedia' => 'use_external_album_art_when_processing_media',
        'useExternalAlbumArtInApis' => 'use_external_album_art_in_apis',
        'lastFmApiKey' => 'last_fm_api_key',
        'hideProductName' => 'hide_product_name',
        'publicCustomCss' => 'public_custom_css',
        'publicCustomJs' => 'public_custom_js',
        'internalCustomCss' => 'internal_custom_css',
        'backupEnabled' => 'backup_enabled',
        'backupTimeCode' => 'backup_time_code',
        'backupExcludeMedia' => 'backup_exclude_media',
        'backupKeepCopies' => 'backup_keep_copies',
        'backupStorageLocation' => 'backup_storage_location',
        'backupFormat' => 'backup_format',
        'backupLastRun' => 'backup_last_run',
        'backupLastOutput' => 'backup_last_output',
        'setupCompleteTime' => 'setup_complete_time',
        'syncDisabled' => 'sync_disabled',
        'syncLastRun' => 'sync_last_run',
        'externalIp' => 'external_ip',
        'geoliteLicenseKey' => 'geolite_license_key',
        'geoliteLastRun' => 'geolite_last_run',
        'enableAdvancedFeatures' => 'enable_advanced_features',
        'mailEnabled' => 'mail_enabled',
        'mailSenderName' => 'mail_sender_name',
        'mailSenderEmail' => 'mail_sender_email',
        'mailSmtpHost' => 'mail_smtp_host',
        'mailSmtpPort' => 'mail_smtp_port',
        'mailSmtpUsername' => 'mail_smtp_username',
        'mailSmtpPassword' => 'mail_smtp_password',
        'mailSmtpSecure' => 'mail_smtp_secure',
        'avatarService' => 'avatar_service',
        'avatarDefaultUrl' => 'avatar_default_url',
        'acmeEmail' => 'acme_email',
        'acmeDomains' => 'acme_domains',
        'ipSource' => 'ip_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUniqueIdentifier' => 'setAppUniqueIdentifier',
        'baseUrl' => 'setBaseUrl',
        'instanceName' => 'setInstanceName',
        'preferBrowserUrl' => 'setPreferBrowserUrl',
        'useRadioProxy' => 'setUseRadioProxy',
        'historyKeepDays' => 'setHistoryKeepDays',
        'alwaysUseSsl' => 'setAlwaysUseSsl',
        'apiAccessControl' => 'setApiAccessControl',
        'enableStaticNowplaying' => 'setEnableStaticNowplaying',
        'analytics' => 'setAnalytics',
        'checkForUpdates' => 'setCheckForUpdates',
        'updateResults' => 'setUpdateResults',
        'updateLastRun' => 'setUpdateLastRun',
        'publicTheme' => 'setPublicTheme',
        'hideAlbumArt' => 'setHideAlbumArt',
        'homepageRedirectUrl' => 'setHomepageRedirectUrl',
        'defaultAlbumArtUrl' => 'setDefaultAlbumArtUrl',
        'useExternalAlbumArtWhenProcessingMedia' => 'setUseExternalAlbumArtWhenProcessingMedia',
        'useExternalAlbumArtInApis' => 'setUseExternalAlbumArtInApis',
        'lastFmApiKey' => 'setLastFmApiKey',
        'hideProductName' => 'setHideProductName',
        'publicCustomCss' => 'setPublicCustomCss',
        'publicCustomJs' => 'setPublicCustomJs',
        'internalCustomCss' => 'setInternalCustomCss',
        'backupEnabled' => 'setBackupEnabled',
        'backupTimeCode' => 'setBackupTimeCode',
        'backupExcludeMedia' => 'setBackupExcludeMedia',
        'backupKeepCopies' => 'setBackupKeepCopies',
        'backupStorageLocation' => 'setBackupStorageLocation',
        'backupFormat' => 'setBackupFormat',
        'backupLastRun' => 'setBackupLastRun',
        'backupLastOutput' => 'setBackupLastOutput',
        'setupCompleteTime' => 'setSetupCompleteTime',
        'syncDisabled' => 'setSyncDisabled',
        'syncLastRun' => 'setSyncLastRun',
        'externalIp' => 'setExternalIp',
        'geoliteLicenseKey' => 'setGeoliteLicenseKey',
        'geoliteLastRun' => 'setGeoliteLastRun',
        'enableAdvancedFeatures' => 'setEnableAdvancedFeatures',
        'mailEnabled' => 'setMailEnabled',
        'mailSenderName' => 'setMailSenderName',
        'mailSenderEmail' => 'setMailSenderEmail',
        'mailSmtpHost' => 'setMailSmtpHost',
        'mailSmtpPort' => 'setMailSmtpPort',
        'mailSmtpUsername' => 'setMailSmtpUsername',
        'mailSmtpPassword' => 'setMailSmtpPassword',
        'mailSmtpSecure' => 'setMailSmtpSecure',
        'avatarService' => 'setAvatarService',
        'avatarDefaultUrl' => 'setAvatarDefaultUrl',
        'acmeEmail' => 'setAcmeEmail',
        'acmeDomains' => 'setAcmeDomains',
        'ipSource' => 'setIpSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUniqueIdentifier' => 'getAppUniqueIdentifier',
        'baseUrl' => 'getBaseUrl',
        'instanceName' => 'getInstanceName',
        'preferBrowserUrl' => 'getPreferBrowserUrl',
        'useRadioProxy' => 'getUseRadioProxy',
        'historyKeepDays' => 'getHistoryKeepDays',
        'alwaysUseSsl' => 'getAlwaysUseSsl',
        'apiAccessControl' => 'getApiAccessControl',
        'enableStaticNowplaying' => 'getEnableStaticNowplaying',
        'analytics' => 'getAnalytics',
        'checkForUpdates' => 'getCheckForUpdates',
        'updateResults' => 'getUpdateResults',
        'updateLastRun' => 'getUpdateLastRun',
        'publicTheme' => 'getPublicTheme',
        'hideAlbumArt' => 'getHideAlbumArt',
        'homepageRedirectUrl' => 'getHomepageRedirectUrl',
        'defaultAlbumArtUrl' => 'getDefaultAlbumArtUrl',
        'useExternalAlbumArtWhenProcessingMedia' => 'getUseExternalAlbumArtWhenProcessingMedia',
        'useExternalAlbumArtInApis' => 'getUseExternalAlbumArtInApis',
        'lastFmApiKey' => 'getLastFmApiKey',
        'hideProductName' => 'getHideProductName',
        'publicCustomCss' => 'getPublicCustomCss',
        'publicCustomJs' => 'getPublicCustomJs',
        'internalCustomCss' => 'getInternalCustomCss',
        'backupEnabled' => 'getBackupEnabled',
        'backupTimeCode' => 'getBackupTimeCode',
        'backupExcludeMedia' => 'getBackupExcludeMedia',
        'backupKeepCopies' => 'getBackupKeepCopies',
        'backupStorageLocation' => 'getBackupStorageLocation',
        'backupFormat' => 'getBackupFormat',
        'backupLastRun' => 'getBackupLastRun',
        'backupLastOutput' => 'getBackupLastOutput',
        'setupCompleteTime' => 'getSetupCompleteTime',
        'syncDisabled' => 'getSyncDisabled',
        'syncLastRun' => 'getSyncLastRun',
        'externalIp' => 'getExternalIp',
        'geoliteLicenseKey' => 'getGeoliteLicenseKey',
        'geoliteLastRun' => 'getGeoliteLastRun',
        'enableAdvancedFeatures' => 'getEnableAdvancedFeatures',
        'mailEnabled' => 'getMailEnabled',
        'mailSenderName' => 'getMailSenderName',
        'mailSenderEmail' => 'getMailSenderEmail',
        'mailSmtpHost' => 'getMailSmtpHost',
        'mailSmtpPort' => 'getMailSmtpPort',
        'mailSmtpUsername' => 'getMailSmtpUsername',
        'mailSmtpPassword' => 'getMailSmtpPassword',
        'mailSmtpSecure' => 'getMailSmtpSecure',
        'avatarService' => 'getAvatarService',
        'avatarDefaultUrl' => 'getAvatarDefaultUrl',
        'acmeEmail' => 'getAcmeEmail',
        'acmeDomains' => 'getAcmeDomains',
        'ipSource' => 'getIpSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('appUniqueIdentifier', $data ?? [], null);
        $this->setIfExists('baseUrl', $data ?? [], null);
        $this->setIfExists('instanceName', $data ?? [], null);
        $this->setIfExists('preferBrowserUrl', $data ?? [], null);
        $this->setIfExists('useRadioProxy', $data ?? [], null);
        $this->setIfExists('historyKeepDays', $data ?? [], null);
        $this->setIfExists('alwaysUseSsl', $data ?? [], null);
        $this->setIfExists('apiAccessControl', $data ?? [], null);
        $this->setIfExists('enableStaticNowplaying', $data ?? [], null);
        $this->setIfExists('analytics', $data ?? [], null);
        $this->setIfExists('checkForUpdates', $data ?? [], null);
        $this->setIfExists('updateResults', $data ?? [], null);
        $this->setIfExists('updateLastRun', $data ?? [], null);
        $this->setIfExists('publicTheme', $data ?? [], null);
        $this->setIfExists('hideAlbumArt', $data ?? [], null);
        $this->setIfExists('homepageRedirectUrl', $data ?? [], null);
        $this->setIfExists('defaultAlbumArtUrl', $data ?? [], null);
        $this->setIfExists('useExternalAlbumArtWhenProcessingMedia', $data ?? [], null);
        $this->setIfExists('useExternalAlbumArtInApis', $data ?? [], null);
        $this->setIfExists('lastFmApiKey', $data ?? [], null);
        $this->setIfExists('hideProductName', $data ?? [], null);
        $this->setIfExists('publicCustomCss', $data ?? [], null);
        $this->setIfExists('publicCustomJs', $data ?? [], null);
        $this->setIfExists('internalCustomCss', $data ?? [], null);
        $this->setIfExists('backupEnabled', $data ?? [], null);
        $this->setIfExists('backupTimeCode', $data ?? [], null);
        $this->setIfExists('backupExcludeMedia', $data ?? [], null);
        $this->setIfExists('backupKeepCopies', $data ?? [], null);
        $this->setIfExists('backupStorageLocation', $data ?? [], null);
        $this->setIfExists('backupFormat', $data ?? [], null);
        $this->setIfExists('backupLastRun', $data ?? [], null);
        $this->setIfExists('backupLastOutput', $data ?? [], null);
        $this->setIfExists('setupCompleteTime', $data ?? [], null);
        $this->setIfExists('syncDisabled', $data ?? [], null);
        $this->setIfExists('syncLastRun', $data ?? [], null);
        $this->setIfExists('externalIp', $data ?? [], null);
        $this->setIfExists('geoliteLicenseKey', $data ?? [], null);
        $this->setIfExists('geoliteLastRun', $data ?? [], null);
        $this->setIfExists('enableAdvancedFeatures', $data ?? [], null);
        $this->setIfExists('mailEnabled', $data ?? [], null);
        $this->setIfExists('mailSenderName', $data ?? [], null);
        $this->setIfExists('mailSenderEmail', $data ?? [], null);
        $this->setIfExists('mailSmtpHost', $data ?? [], null);
        $this->setIfExists('mailSmtpPort', $data ?? [], null);
        $this->setIfExists('mailSmtpUsername', $data ?? [], null);
        $this->setIfExists('mailSmtpPassword', $data ?? [], null);
        $this->setIfExists('mailSmtpSecure', $data ?? [], null);
        $this->setIfExists('avatarService', $data ?? [], null);
        $this->setIfExists('avatarDefaultUrl', $data ?? [], null);
        $this->setIfExists('acmeEmail', $data ?? [], null);
        $this->setIfExists('acmeDomains', $data ?? [], null);
        $this->setIfExists('ipSource', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appUniqueIdentifier
     *
     * @return string|null
     */
    public function getAppUniqueIdentifier()
    {
        return $this->container['appUniqueIdentifier'];
    }

    /**
     * Sets appUniqueIdentifier
     *
     * @param string|null $appUniqueIdentifier appUniqueIdentifier
     *
     * @return self
     */
    public function setAppUniqueIdentifier($appUniqueIdentifier)
    {
        if (is_null($appUniqueIdentifier)) {
            throw new \InvalidArgumentException('non-nullable appUniqueIdentifier cannot be null');
        }
        $this->container['appUniqueIdentifier'] = $appUniqueIdentifier;

        return $this;
    }

    /**
     * Gets baseUrl
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['baseUrl'];
    }

    /**
     * Sets baseUrl
     *
     * @param string|null $baseUrl Site Base URL
     *
     * @return self
     */
    public function setBaseUrl($baseUrl)
    {
        if (is_null($baseUrl)) {
            array_push($this->openAPINullablesSetToNull, 'baseUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('baseUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['baseUrl'] = $baseUrl;

        return $this;
    }

    /**
     * Gets instanceName
     *
     * @return string|null
     */
    public function getInstanceName()
    {
        return $this->container['instanceName'];
    }

    /**
     * Sets instanceName
     *
     * @param string|null $instanceName AzuraCast Instance Name
     *
     * @return self
     */
    public function setInstanceName($instanceName)
    {
        if (is_null($instanceName)) {
            array_push($this->openAPINullablesSetToNull, 'instanceName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instanceName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instanceName'] = $instanceName;

        return $this;
    }

    /**
     * Gets preferBrowserUrl
     *
     * @return bool|null
     */
    public function getPreferBrowserUrl()
    {
        return $this->container['preferBrowserUrl'];
    }

    /**
     * Sets preferBrowserUrl
     *
     * @param bool|null $preferBrowserUrl Prefer Browser URL (If Available)
     *
     * @return self
     */
    public function setPreferBrowserUrl($preferBrowserUrl)
    {
        if (is_null($preferBrowserUrl)) {
            throw new \InvalidArgumentException('non-nullable preferBrowserUrl cannot be null');
        }
        $this->container['preferBrowserUrl'] = $preferBrowserUrl;

        return $this;
    }

    /**
     * Gets useRadioProxy
     *
     * @return bool|null
     */
    public function getUseRadioProxy()
    {
        return $this->container['useRadioProxy'];
    }

    /**
     * Sets useRadioProxy
     *
     * @param bool|null $useRadioProxy Use Web Proxy for Radio
     *
     * @return self
     */
    public function setUseRadioProxy($useRadioProxy)
    {
        if (is_null($useRadioProxy)) {
            throw new \InvalidArgumentException('non-nullable useRadioProxy cannot be null');
        }
        $this->container['useRadioProxy'] = $useRadioProxy;

        return $this;
    }

    /**
     * Gets historyKeepDays
     *
     * @return int|null
     */
    public function getHistoryKeepDays()
    {
        return $this->container['historyKeepDays'];
    }

    /**
     * Sets historyKeepDays
     *
     * @param int|null $historyKeepDays Days of Playback History to Keep
     *
     * @return self
     */
    public function setHistoryKeepDays($historyKeepDays)
    {
        if (is_null($historyKeepDays)) {
            throw new \InvalidArgumentException('non-nullable historyKeepDays cannot be null');
        }
        $this->container['historyKeepDays'] = $historyKeepDays;

        return $this;
    }

    /**
     * Gets alwaysUseSsl
     *
     * @return bool|null
     */
    public function getAlwaysUseSsl()
    {
        return $this->container['alwaysUseSsl'];
    }

    /**
     * Sets alwaysUseSsl
     *
     * @param bool|null $alwaysUseSsl Always Use HTTPS
     *
     * @return self
     */
    public function setAlwaysUseSsl($alwaysUseSsl)
    {
        if (is_null($alwaysUseSsl)) {
            throw new \InvalidArgumentException('non-nullable alwaysUseSsl cannot be null');
        }
        $this->container['alwaysUseSsl'] = $alwaysUseSsl;

        return $this;
    }

    /**
     * Gets apiAccessControl
     *
     * @return string|null
     */
    public function getApiAccessControl()
    {
        return $this->container['apiAccessControl'];
    }

    /**
     * Sets apiAccessControl
     *
     * @param string|null $apiAccessControl API 'Access-Control-Allow-Origin' header
     *
     * @return self
     */
    public function setApiAccessControl($apiAccessControl)
    {
        if (is_null($apiAccessControl)) {
            array_push($this->openAPINullablesSetToNull, 'apiAccessControl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('apiAccessControl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['apiAccessControl'] = $apiAccessControl;

        return $this;
    }

    /**
     * Gets enableStaticNowplaying
     *
     * @return bool|null
     */
    public function getEnableStaticNowplaying()
    {
        return $this->container['enableStaticNowplaying'];
    }

    /**
     * Sets enableStaticNowplaying
     *
     * @param bool|null $enableStaticNowplaying Whether to use high-performance static JSON for Now Playing data updates.
     *
     * @return self
     */
    public function setEnableStaticNowplaying($enableStaticNowplaying)
    {
        if (is_null($enableStaticNowplaying)) {
            throw new \InvalidArgumentException('non-nullable enableStaticNowplaying cannot be null');
        }
        $this->container['enableStaticNowplaying'] = $enableStaticNowplaying;

        return $this;
    }

    /**
     * Gets analytics
     *
     * @return mixed|null
     */
    public function getAnalytics()
    {
        return $this->container['analytics'];
    }

    /**
     * Sets analytics
     *
     * @param mixed|null $analytics Listener Analytics Collection
     *
     * @return self
     */
    public function setAnalytics($analytics)
    {
        if (is_null($analytics)) {
            array_push($this->openAPINullablesSetToNull, 'analytics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analytics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analytics'] = $analytics;

        return $this;
    }

    /**
     * Gets checkForUpdates
     *
     * @return bool|null
     */
    public function getCheckForUpdates()
    {
        return $this->container['checkForUpdates'];
    }

    /**
     * Sets checkForUpdates
     *
     * @param bool|null $checkForUpdates Check for Updates and Announcements
     *
     * @return self
     */
    public function setCheckForUpdates($checkForUpdates)
    {
        if (is_null($checkForUpdates)) {
            throw new \InvalidArgumentException('non-nullable checkForUpdates cannot be null');
        }
        $this->container['checkForUpdates'] = $checkForUpdates;

        return $this;
    }

    /**
     * Gets updateResults
     *
     * @return mixed[]|null
     */
    public function getUpdateResults()
    {
        return $this->container['updateResults'];
    }

    /**
     * Sets updateResults
     *
     * @param mixed[]|null $updateResults Results of the latest update check.
     *
     * @return self
     */
    public function setUpdateResults($updateResults)
    {
        if (is_null($updateResults)) {
            array_push($this->openAPINullablesSetToNull, 'updateResults');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updateResults', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updateResults'] = $updateResults;

        return $this;
    }

    /**
     * Gets updateLastRun
     *
     * @return int|null
     */
    public function getUpdateLastRun()
    {
        return $this->container['updateLastRun'];
    }

    /**
     * Sets updateLastRun
     *
     * @param int|null $updateLastRun The UNIX timestamp when updates were last checked.
     *
     * @return self
     */
    public function setUpdateLastRun($updateLastRun)
    {
        if (is_null($updateLastRun)) {
            throw new \InvalidArgumentException('non-nullable updateLastRun cannot be null');
        }
        $this->container['updateLastRun'] = $updateLastRun;

        return $this;
    }

    /**
     * Gets publicTheme
     *
     * @return mixed|null
     */
    public function getPublicTheme()
    {
        return $this->container['publicTheme'];
    }

    /**
     * Sets publicTheme
     *
     * @param mixed|null $publicTheme Base Theme for Public Pages
     *
     * @return self
     */
    public function setPublicTheme($publicTheme)
    {
        if (is_null($publicTheme)) {
            array_push($this->openAPINullablesSetToNull, 'publicTheme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publicTheme', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publicTheme'] = $publicTheme;

        return $this;
    }

    /**
     * Gets hideAlbumArt
     *
     * @return bool|null
     */
    public function getHideAlbumArt()
    {
        return $this->container['hideAlbumArt'];
    }

    /**
     * Sets hideAlbumArt
     *
     * @param bool|null $hideAlbumArt Hide Album Art on Public Pages
     *
     * @return self
     */
    public function setHideAlbumArt($hideAlbumArt)
    {
        if (is_null($hideAlbumArt)) {
            throw new \InvalidArgumentException('non-nullable hideAlbumArt cannot be null');
        }
        $this->container['hideAlbumArt'] = $hideAlbumArt;

        return $this;
    }

    /**
     * Gets homepageRedirectUrl
     *
     * @return string|null
     */
    public function getHomepageRedirectUrl()
    {
        return $this->container['homepageRedirectUrl'];
    }

    /**
     * Sets homepageRedirectUrl
     *
     * @param string|null $homepageRedirectUrl Homepage Redirect URL
     *
     * @return self
     */
    public function setHomepageRedirectUrl($homepageRedirectUrl)
    {
        if (is_null($homepageRedirectUrl)) {
            array_push($this->openAPINullablesSetToNull, 'homepageRedirectUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homepageRedirectUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homepageRedirectUrl'] = $homepageRedirectUrl;

        return $this;
    }

    /**
     * Gets defaultAlbumArtUrl
     *
     * @return string|null
     */
    public function getDefaultAlbumArtUrl()
    {
        return $this->container['defaultAlbumArtUrl'];
    }

    /**
     * Sets defaultAlbumArtUrl
     *
     * @param string|null $defaultAlbumArtUrl Default Album Art URL
     *
     * @return self
     */
    public function setDefaultAlbumArtUrl($defaultAlbumArtUrl)
    {
        if (is_null($defaultAlbumArtUrl)) {
            array_push($this->openAPINullablesSetToNull, 'defaultAlbumArtUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('defaultAlbumArtUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['defaultAlbumArtUrl'] = $defaultAlbumArtUrl;

        return $this;
    }

    /**
     * Gets useExternalAlbumArtWhenProcessingMedia
     *
     * @return bool|null
     */
    public function getUseExternalAlbumArtWhenProcessingMedia()
    {
        return $this->container['useExternalAlbumArtWhenProcessingMedia'];
    }

    /**
     * Sets useExternalAlbumArtWhenProcessingMedia
     *
     * @param bool|null $useExternalAlbumArtWhenProcessingMedia Attempt to fetch album art from external sources when processing media.
     *
     * @return self
     */
    public function setUseExternalAlbumArtWhenProcessingMedia($useExternalAlbumArtWhenProcessingMedia)
    {
        if (is_null($useExternalAlbumArtWhenProcessingMedia)) {
            throw new \InvalidArgumentException('non-nullable useExternalAlbumArtWhenProcessingMedia cannot be null');
        }
        $this->container['useExternalAlbumArtWhenProcessingMedia'] = $useExternalAlbumArtWhenProcessingMedia;

        return $this;
    }

    /**
     * Gets useExternalAlbumArtInApis
     *
     * @return bool|null
     */
    public function getUseExternalAlbumArtInApis()
    {
        return $this->container['useExternalAlbumArtInApis'];
    }

    /**
     * Sets useExternalAlbumArtInApis
     *
     * @param bool|null $useExternalAlbumArtInApis Attempt to fetch album art from external sources in API requests.
     *
     * @return self
     */
    public function setUseExternalAlbumArtInApis($useExternalAlbumArtInApis)
    {
        if (is_null($useExternalAlbumArtInApis)) {
            throw new \InvalidArgumentException('non-nullable useExternalAlbumArtInApis cannot be null');
        }
        $this->container['useExternalAlbumArtInApis'] = $useExternalAlbumArtInApis;

        return $this;
    }

    /**
     * Gets lastFmApiKey
     *
     * @return string|null
     */
    public function getLastFmApiKey()
    {
        return $this->container['lastFmApiKey'];
    }

    /**
     * Sets lastFmApiKey
     *
     * @param string|null $lastFmApiKey An API key to connect to Last.fm services, if provided.
     *
     * @return self
     */
    public function setLastFmApiKey($lastFmApiKey)
    {
        if (is_null($lastFmApiKey)) {
            array_push($this->openAPINullablesSetToNull, 'lastFmApiKey');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastFmApiKey', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastFmApiKey'] = $lastFmApiKey;

        return $this;
    }

    /**
     * Gets hideProductName
     *
     * @return bool|null
     */
    public function getHideProductName()
    {
        return $this->container['hideProductName'];
    }

    /**
     * Sets hideProductName
     *
     * @param bool|null $hideProductName Hide AzuraCast Branding on Public Pages
     *
     * @return self
     */
    public function setHideProductName($hideProductName)
    {
        if (is_null($hideProductName)) {
            throw new \InvalidArgumentException('non-nullable hideProductName cannot be null');
        }
        $this->container['hideProductName'] = $hideProductName;

        return $this;
    }

    /**
     * Gets publicCustomCss
     *
     * @return string|null
     */
    public function getPublicCustomCss()
    {
        return $this->container['publicCustomCss'];
    }

    /**
     * Sets publicCustomCss
     *
     * @param string|null $publicCustomCss Custom CSS for Public Pages
     *
     * @return self
     */
    public function setPublicCustomCss($publicCustomCss)
    {
        if (is_null($publicCustomCss)) {
            array_push($this->openAPINullablesSetToNull, 'publicCustomCss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publicCustomCss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publicCustomCss'] = $publicCustomCss;

        return $this;
    }

    /**
     * Gets publicCustomJs
     *
     * @return string|null
     */
    public function getPublicCustomJs()
    {
        return $this->container['publicCustomJs'];
    }

    /**
     * Sets publicCustomJs
     *
     * @param string|null $publicCustomJs Custom JS for Public Pages
     *
     * @return self
     */
    public function setPublicCustomJs($publicCustomJs)
    {
        if (is_null($publicCustomJs)) {
            array_push($this->openAPINullablesSetToNull, 'publicCustomJs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('publicCustomJs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['publicCustomJs'] = $publicCustomJs;

        return $this;
    }

    /**
     * Gets internalCustomCss
     *
     * @return string|null
     */
    public function getInternalCustomCss()
    {
        return $this->container['internalCustomCss'];
    }

    /**
     * Sets internalCustomCss
     *
     * @param string|null $internalCustomCss Custom CSS for Internal Pages
     *
     * @return self
     */
    public function setInternalCustomCss($internalCustomCss)
    {
        if (is_null($internalCustomCss)) {
            array_push($this->openAPINullablesSetToNull, 'internalCustomCss');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internalCustomCss', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internalCustomCss'] = $internalCustomCss;

        return $this;
    }

    /**
     * Gets backupEnabled
     *
     * @return bool|null
     */
    public function getBackupEnabled()
    {
        return $this->container['backupEnabled'];
    }

    /**
     * Sets backupEnabled
     *
     * @param bool|null $backupEnabled Whether backup is enabled.
     *
     * @return self
     */
    public function setBackupEnabled($backupEnabled)
    {
        if (is_null($backupEnabled)) {
            throw new \InvalidArgumentException('non-nullable backupEnabled cannot be null');
        }
        $this->container['backupEnabled'] = $backupEnabled;

        return $this;
    }

    /**
     * Gets backupTimeCode
     *
     * @return string|null
     */
    public function getBackupTimeCode()
    {
        return $this->container['backupTimeCode'];
    }

    /**
     * Sets backupTimeCode
     *
     * @param string|null $backupTimeCode The timecode (i.e. 400 for 4:00AM) when automated backups should run.
     *
     * @return self
     */
    public function setBackupTimeCode($backupTimeCode)
    {
        if (is_null($backupTimeCode)) {
            array_push($this->openAPINullablesSetToNull, 'backupTimeCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backupTimeCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backupTimeCode'] = $backupTimeCode;

        return $this;
    }

    /**
     * Gets backupExcludeMedia
     *
     * @return bool|null
     */
    public function getBackupExcludeMedia()
    {
        return $this->container['backupExcludeMedia'];
    }

    /**
     * Sets backupExcludeMedia
     *
     * @param bool|null $backupExcludeMedia Whether to exclude media in automated backups.
     *
     * @return self
     */
    public function setBackupExcludeMedia($backupExcludeMedia)
    {
        if (is_null($backupExcludeMedia)) {
            throw new \InvalidArgumentException('non-nullable backupExcludeMedia cannot be null');
        }
        $this->container['backupExcludeMedia'] = $backupExcludeMedia;

        return $this;
    }

    /**
     * Gets backupKeepCopies
     *
     * @return int|null
     */
    public function getBackupKeepCopies()
    {
        return $this->container['backupKeepCopies'];
    }

    /**
     * Sets backupKeepCopies
     *
     * @param int|null $backupKeepCopies Number of backups to keep, or infinite if zero/null.
     *
     * @return self
     */
    public function setBackupKeepCopies($backupKeepCopies)
    {
        if (is_null($backupKeepCopies)) {
            throw new \InvalidArgumentException('non-nullable backupKeepCopies cannot be null');
        }
        $this->container['backupKeepCopies'] = $backupKeepCopies;

        return $this;
    }

    /**
     * Gets backupStorageLocation
     *
     * @return int|null
     */
    public function getBackupStorageLocation()
    {
        return $this->container['backupStorageLocation'];
    }

    /**
     * Sets backupStorageLocation
     *
     * @param int|null $backupStorageLocation The storage location ID for automated backups.
     *
     * @return self
     */
    public function setBackupStorageLocation($backupStorageLocation)
    {
        if (is_null($backupStorageLocation)) {
            array_push($this->openAPINullablesSetToNull, 'backupStorageLocation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backupStorageLocation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backupStorageLocation'] = $backupStorageLocation;

        return $this;
    }

    /**
     * Gets backupFormat
     *
     * @return string|null
     */
    public function getBackupFormat()
    {
        return $this->container['backupFormat'];
    }

    /**
     * Sets backupFormat
     *
     * @param string|null $backupFormat The output format for the automated backup.
     *
     * @return self
     */
    public function setBackupFormat($backupFormat)
    {
        if (is_null($backupFormat)) {
            array_push($this->openAPINullablesSetToNull, 'backupFormat');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backupFormat', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backupFormat'] = $backupFormat;

        return $this;
    }

    /**
     * Gets backupLastRun
     *
     * @return int|null
     */
    public function getBackupLastRun()
    {
        return $this->container['backupLastRun'];
    }

    /**
     * Sets backupLastRun
     *
     * @param int|null $backupLastRun The UNIX timestamp when automated backup was last run.
     *
     * @return self
     */
    public function setBackupLastRun($backupLastRun)
    {
        if (is_null($backupLastRun)) {
            throw new \InvalidArgumentException('non-nullable backupLastRun cannot be null');
        }
        $this->container['backupLastRun'] = $backupLastRun;

        return $this;
    }

    /**
     * Gets backupLastOutput
     *
     * @return string|null
     */
    public function getBackupLastOutput()
    {
        return $this->container['backupLastOutput'];
    }

    /**
     * Sets backupLastOutput
     *
     * @param string|null $backupLastOutput The output of the latest automated backup task.
     *
     * @return self
     */
    public function setBackupLastOutput($backupLastOutput)
    {
        if (is_null($backupLastOutput)) {
            array_push($this->openAPINullablesSetToNull, 'backupLastOutput');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backupLastOutput', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backupLastOutput'] = $backupLastOutput;

        return $this;
    }

    /**
     * Gets setupCompleteTime
     *
     * @return int|null
     */
    public function getSetupCompleteTime()
    {
        return $this->container['setupCompleteTime'];
    }

    /**
     * Sets setupCompleteTime
     *
     * @param int|null $setupCompleteTime The UNIX timestamp when setup was last completed.
     *
     * @return self
     */
    public function setSetupCompleteTime($setupCompleteTime)
    {
        if (is_null($setupCompleteTime)) {
            throw new \InvalidArgumentException('non-nullable setupCompleteTime cannot be null');
        }
        $this->container['setupCompleteTime'] = $setupCompleteTime;

        return $this;
    }

    /**
     * Gets syncDisabled
     *
     * @return bool|null
     */
    public function getSyncDisabled()
    {
        return $this->container['syncDisabled'];
    }

    /**
     * Sets syncDisabled
     *
     * @param bool|null $syncDisabled Temporarily disable all sync tasks.
     *
     * @return self
     */
    public function setSyncDisabled($syncDisabled)
    {
        if (is_null($syncDisabled)) {
            throw new \InvalidArgumentException('non-nullable syncDisabled cannot be null');
        }
        $this->container['syncDisabled'] = $syncDisabled;

        return $this;
    }

    /**
     * Gets syncLastRun
     *
     * @return int|null
     */
    public function getSyncLastRun()
    {
        return $this->container['syncLastRun'];
    }

    /**
     * Sets syncLastRun
     *
     * @param int|null $syncLastRun The last run timestamp for the unified sync task.
     *
     * @return self
     */
    public function setSyncLastRun($syncLastRun)
    {
        if (is_null($syncLastRun)) {
            throw new \InvalidArgumentException('non-nullable syncLastRun cannot be null');
        }
        $this->container['syncLastRun'] = $syncLastRun;

        return $this;
    }

    /**
     * Gets externalIp
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['externalIp'];
    }

    /**
     * Sets externalIp
     *
     * @param string|null $externalIp This installation's external IP.
     *
     * @return self
     */
    public function setExternalIp($externalIp)
    {
        if (is_null($externalIp)) {
            array_push($this->openAPINullablesSetToNull, 'externalIp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalIp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalIp'] = $externalIp;

        return $this;
    }

    /**
     * Gets geoliteLicenseKey
     *
     * @return string|null
     */
    public function getGeoliteLicenseKey()
    {
        return $this->container['geoliteLicenseKey'];
    }

    /**
     * Sets geoliteLicenseKey
     *
     * @param string|null $geoliteLicenseKey The license key for the Maxmind Geolite download.
     *
     * @return self
     */
    public function setGeoliteLicenseKey($geoliteLicenseKey)
    {
        if (is_null($geoliteLicenseKey)) {
            array_push($this->openAPINullablesSetToNull, 'geoliteLicenseKey');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('geoliteLicenseKey', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['geoliteLicenseKey'] = $geoliteLicenseKey;

        return $this;
    }

    /**
     * Gets geoliteLastRun
     *
     * @return int|null
     */
    public function getGeoliteLastRun()
    {
        return $this->container['geoliteLastRun'];
    }

    /**
     * Sets geoliteLastRun
     *
     * @param int|null $geoliteLastRun The UNIX timestamp when the Maxmind Geolite was last downloaded.
     *
     * @return self
     */
    public function setGeoliteLastRun($geoliteLastRun)
    {
        if (is_null($geoliteLastRun)) {
            throw new \InvalidArgumentException('non-nullable geoliteLastRun cannot be null');
        }
        $this->container['geoliteLastRun'] = $geoliteLastRun;

        return $this;
    }

    /**
     * Gets enableAdvancedFeatures
     *
     * @return bool|null
     */
    public function getEnableAdvancedFeatures()
    {
        return $this->container['enableAdvancedFeatures'];
    }

    /**
     * Sets enableAdvancedFeatures
     *
     * @param bool|null $enableAdvancedFeatures Whether to enable 'advanced' functionality in the system that is intended for power users.
     *
     * @return self
     */
    public function setEnableAdvancedFeatures($enableAdvancedFeatures)
    {
        if (is_null($enableAdvancedFeatures)) {
            throw new \InvalidArgumentException('non-nullable enableAdvancedFeatures cannot be null');
        }
        $this->container['enableAdvancedFeatures'] = $enableAdvancedFeatures;

        return $this;
    }

    /**
     * Gets mailEnabled
     *
     * @return bool|null
     */
    public function getMailEnabled()
    {
        return $this->container['mailEnabled'];
    }

    /**
     * Sets mailEnabled
     *
     * @param bool|null $mailEnabled Enable e-mail delivery across the application.
     *
     * @return self
     */
    public function setMailEnabled($mailEnabled)
    {
        if (is_null($mailEnabled)) {
            throw new \InvalidArgumentException('non-nullable mailEnabled cannot be null');
        }
        $this->container['mailEnabled'] = $mailEnabled;

        return $this;
    }

    /**
     * Gets mailSenderName
     *
     * @return string|null
     */
    public function getMailSenderName()
    {
        return $this->container['mailSenderName'];
    }

    /**
     * Sets mailSenderName
     *
     * @param string|null $mailSenderName The name of the sender of system e-mails.
     *
     * @return self
     */
    public function setMailSenderName($mailSenderName)
    {
        if (is_null($mailSenderName)) {
            array_push($this->openAPINullablesSetToNull, 'mailSenderName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailSenderName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mailSenderName'] = $mailSenderName;

        return $this;
    }

    /**
     * Gets mailSenderEmail
     *
     * @return string|null
     */
    public function getMailSenderEmail()
    {
        return $this->container['mailSenderEmail'];
    }

    /**
     * Sets mailSenderEmail
     *
     * @param string|null $mailSenderEmail The e-mail address of the sender of system e-mails.
     *
     * @return self
     */
    public function setMailSenderEmail($mailSenderEmail)
    {
        if (is_null($mailSenderEmail)) {
            array_push($this->openAPINullablesSetToNull, 'mailSenderEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailSenderEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mailSenderEmail'] = $mailSenderEmail;

        return $this;
    }

    /**
     * Gets mailSmtpHost
     *
     * @return string|null
     */
    public function getMailSmtpHost()
    {
        return $this->container['mailSmtpHost'];
    }

    /**
     * Sets mailSmtpHost
     *
     * @param string|null $mailSmtpHost The host to send outbound SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpHost($mailSmtpHost)
    {
        if (is_null($mailSmtpHost)) {
            array_push($this->openAPINullablesSetToNull, 'mailSmtpHost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailSmtpHost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mailSmtpHost'] = $mailSmtpHost;

        return $this;
    }

    /**
     * Gets mailSmtpPort
     *
     * @return int|null
     */
    public function getMailSmtpPort()
    {
        return $this->container['mailSmtpPort'];
    }

    /**
     * Sets mailSmtpPort
     *
     * @param int|null $mailSmtpPort The port for sending outbound SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpPort($mailSmtpPort)
    {
        if (is_null($mailSmtpPort)) {
            throw new \InvalidArgumentException('non-nullable mailSmtpPort cannot be null');
        }
        $this->container['mailSmtpPort'] = $mailSmtpPort;

        return $this;
    }

    /**
     * Gets mailSmtpUsername
     *
     * @return string|null
     */
    public function getMailSmtpUsername()
    {
        return $this->container['mailSmtpUsername'];
    }

    /**
     * Sets mailSmtpUsername
     *
     * @param string|null $mailSmtpUsername The username when connecting to SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpUsername($mailSmtpUsername)
    {
        if (is_null($mailSmtpUsername)) {
            array_push($this->openAPINullablesSetToNull, 'mailSmtpUsername');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailSmtpUsername', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mailSmtpUsername'] = $mailSmtpUsername;

        return $this;
    }

    /**
     * Gets mailSmtpPassword
     *
     * @return string|null
     */
    public function getMailSmtpPassword()
    {
        return $this->container['mailSmtpPassword'];
    }

    /**
     * Sets mailSmtpPassword
     *
     * @param string|null $mailSmtpPassword The password when connecting to SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpPassword($mailSmtpPassword)
    {
        if (is_null($mailSmtpPassword)) {
            array_push($this->openAPINullablesSetToNull, 'mailSmtpPassword');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mailSmtpPassword', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mailSmtpPassword'] = $mailSmtpPassword;

        return $this;
    }

    /**
     * Gets mailSmtpSecure
     *
     * @return bool|null
     */
    public function getMailSmtpSecure()
    {
        return $this->container['mailSmtpSecure'];
    }

    /**
     * Sets mailSmtpSecure
     *
     * @param bool|null $mailSmtpSecure Whether to use a secure (TLS) connection when sending SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpSecure($mailSmtpSecure)
    {
        if (is_null($mailSmtpSecure)) {
            throw new \InvalidArgumentException('non-nullable mailSmtpSecure cannot be null');
        }
        $this->container['mailSmtpSecure'] = $mailSmtpSecure;

        return $this;
    }

    /**
     * Gets avatarService
     *
     * @return string|null
     */
    public function getAvatarService()
    {
        return $this->container['avatarService'];
    }

    /**
     * Sets avatarService
     *
     * @param string|null $avatarService The external avatar service to use when fetching avatars.
     *
     * @return self
     */
    public function setAvatarService($avatarService)
    {
        if (is_null($avatarService)) {
            array_push($this->openAPINullablesSetToNull, 'avatarService');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatarService', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatarService'] = $avatarService;

        return $this;
    }

    /**
     * Gets avatarDefaultUrl
     *
     * @return string|null
     */
    public function getAvatarDefaultUrl()
    {
        return $this->container['avatarDefaultUrl'];
    }

    /**
     * Sets avatarDefaultUrl
     *
     * @param string|null $avatarDefaultUrl The default avatar URL.
     *
     * @return self
     */
    public function setAvatarDefaultUrl($avatarDefaultUrl)
    {
        if (is_null($avatarDefaultUrl)) {
            array_push($this->openAPINullablesSetToNull, 'avatarDefaultUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatarDefaultUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatarDefaultUrl'] = $avatarDefaultUrl;

        return $this;
    }

    /**
     * Gets acmeEmail
     *
     * @return string|null
     */
    public function getAcmeEmail()
    {
        return $this->container['acmeEmail'];
    }

    /**
     * Sets acmeEmail
     *
     * @param string|null $acmeEmail ACME (LetsEncrypt) e-mail address.
     *
     * @return self
     */
    public function setAcmeEmail($acmeEmail)
    {
        if (is_null($acmeEmail)) {
            array_push($this->openAPINullablesSetToNull, 'acmeEmail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acmeEmail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acmeEmail'] = $acmeEmail;

        return $this;
    }

    /**
     * Gets acmeDomains
     *
     * @return string|null
     */
    public function getAcmeDomains()
    {
        return $this->container['acmeDomains'];
    }

    /**
     * Sets acmeDomains
     *
     * @param string|null $acmeDomains ACME (LetsEncrypt) domain name(s).
     *
     * @return self
     */
    public function setAcmeDomains($acmeDomains)
    {
        if (is_null($acmeDomains)) {
            array_push($this->openAPINullablesSetToNull, 'acmeDomains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acmeDomains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acmeDomains'] = $acmeDomains;

        return $this;
    }

    /**
     * Gets ipSource
     *
     * @return mixed|null
     */
    public function getIpSource()
    {
        return $this->container['ipSource'];
    }

    /**
     * Sets ipSource
     *
     * @param mixed|null $ipSource IP Address Source
     *
     * @return self
     */
    public function setIpSource($ipSource)
    {
        if (is_null($ipSource)) {
            array_push($this->openAPINullablesSetToNull, 'ipSource');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ipSource', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ipSource'] = $ipSource;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


