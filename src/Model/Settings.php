<?php
/**
 * Settings
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Settings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_unique_identifier' => 'string',
        'base_url' => 'string',
        'instance_name' => 'string',
        'prefer_browser_url' => 'bool',
        'use_radio_proxy' => 'bool',
        'history_keep_days' => 'int',
        'always_use_ssl' => 'bool',
        'api_access_control' => 'string',
        'enable_static_nowplaying' => 'bool',
        'analytics' => 'mixed',
        'check_for_updates' => 'bool',
        'update_results' => 'mixed[]',
        'update_last_run' => 'int',
        'public_theme' => 'mixed',
        'hide_album_art' => 'bool',
        'homepage_redirect_url' => 'string',
        'default_album_art_url' => 'string',
        'use_external_album_art_when_processing_media' => 'bool',
        'use_external_album_art_in_apis' => 'bool',
        'last_fm_api_key' => 'string',
        'hide_product_name' => 'bool',
        'public_custom_css' => 'string',
        'public_custom_js' => 'string',
        'internal_custom_css' => 'string',
        'backup_enabled' => 'bool',
        'backup_time_code' => 'string',
        'backup_exclude_media' => 'bool',
        'backup_keep_copies' => 'int',
        'backup_storage_location' => 'int',
        'backup_format' => 'string',
        'backup_last_run' => 'int',
        'backup_last_output' => 'string',
        'setup_complete_time' => 'int',
        'sync_disabled' => 'bool',
        'sync_last_run' => 'int',
        'external_ip' => 'string',
        'geolite_license_key' => 'string',
        'geolite_last_run' => 'int',
        'enable_advanced_features' => 'bool',
        'mail_enabled' => 'bool',
        'mail_sender_name' => 'string',
        'mail_sender_email' => 'string',
        'mail_smtp_host' => 'string',
        'mail_smtp_port' => 'int',
        'mail_smtp_username' => 'string',
        'mail_smtp_password' => 'string',
        'mail_smtp_secure' => 'bool',
        'avatar_service' => 'string',
        'avatar_default_url' => 'string',
        'acme_email' => 'string',
        'acme_domains' => 'string',
        'ip_source' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_unique_identifier' => null,
        'base_url' => null,
        'instance_name' => null,
        'prefer_browser_url' => null,
        'use_radio_proxy' => null,
        'history_keep_days' => null,
        'always_use_ssl' => null,
        'api_access_control' => null,
        'enable_static_nowplaying' => null,
        'analytics' => null,
        'check_for_updates' => null,
        'update_results' => null,
        'update_last_run' => null,
        'public_theme' => null,
        'hide_album_art' => null,
        'homepage_redirect_url' => null,
        'default_album_art_url' => null,
        'use_external_album_art_when_processing_media' => null,
        'use_external_album_art_in_apis' => null,
        'last_fm_api_key' => null,
        'hide_product_name' => null,
        'public_custom_css' => null,
        'public_custom_js' => null,
        'internal_custom_css' => null,
        'backup_enabled' => null,
        'backup_time_code' => null,
        'backup_exclude_media' => null,
        'backup_keep_copies' => null,
        'backup_storage_location' => null,
        'backup_format' => null,
        'backup_last_run' => null,
        'backup_last_output' => null,
        'setup_complete_time' => null,
        'sync_disabled' => null,
        'sync_last_run' => null,
        'external_ip' => null,
        'geolite_license_key' => null,
        'geolite_last_run' => null,
        'enable_advanced_features' => null,
        'mail_enabled' => null,
        'mail_sender_name' => null,
        'mail_sender_email' => null,
        'mail_smtp_host' => null,
        'mail_smtp_port' => null,
        'mail_smtp_username' => null,
        'mail_smtp_password' => null,
        'mail_smtp_secure' => null,
        'avatar_service' => null,
        'avatar_default_url' => null,
        'acme_email' => null,
        'acme_domains' => null,
        'ip_source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_unique_identifier' => false,
        'base_url' => true,
        'instance_name' => true,
        'prefer_browser_url' => false,
        'use_radio_proxy' => false,
        'history_keep_days' => false,
        'always_use_ssl' => false,
        'api_access_control' => true,
        'enable_static_nowplaying' => false,
        'analytics' => true,
        'check_for_updates' => false,
        'update_results' => true,
        'update_last_run' => false,
        'public_theme' => true,
        'hide_album_art' => false,
        'homepage_redirect_url' => true,
        'default_album_art_url' => true,
        'use_external_album_art_when_processing_media' => false,
        'use_external_album_art_in_apis' => false,
        'last_fm_api_key' => true,
        'hide_product_name' => false,
        'public_custom_css' => true,
        'public_custom_js' => true,
        'internal_custom_css' => true,
        'backup_enabled' => false,
        'backup_time_code' => true,
        'backup_exclude_media' => false,
        'backup_keep_copies' => false,
        'backup_storage_location' => true,
        'backup_format' => true,
        'backup_last_run' => false,
        'backup_last_output' => true,
        'setup_complete_time' => false,
        'sync_disabled' => false,
        'sync_last_run' => false,
        'external_ip' => true,
        'geolite_license_key' => true,
        'geolite_last_run' => false,
        'enable_advanced_features' => false,
        'mail_enabled' => false,
        'mail_sender_name' => true,
        'mail_sender_email' => true,
        'mail_smtp_host' => true,
        'mail_smtp_port' => false,
        'mail_smtp_username' => true,
        'mail_smtp_password' => true,
        'mail_smtp_secure' => false,
        'avatar_service' => true,
        'avatar_default_url' => true,
        'acme_email' => true,
        'acme_domains' => true,
        'ip_source' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_unique_identifier' => 'app_unique_identifier',
        'base_url' => 'base_url',
        'instance_name' => 'instance_name',
        'prefer_browser_url' => 'prefer_browser_url',
        'use_radio_proxy' => 'use_radio_proxy',
        'history_keep_days' => 'history_keep_days',
        'always_use_ssl' => 'always_use_ssl',
        'api_access_control' => 'api_access_control',
        'enable_static_nowplaying' => 'enable_static_nowplaying',
        'analytics' => 'analytics',
        'check_for_updates' => 'check_for_updates',
        'update_results' => 'update_results',
        'update_last_run' => 'update_last_run',
        'public_theme' => 'public_theme',
        'hide_album_art' => 'hide_album_art',
        'homepage_redirect_url' => 'homepage_redirect_url',
        'default_album_art_url' => 'default_album_art_url',
        'use_external_album_art_when_processing_media' => 'use_external_album_art_when_processing_media',
        'use_external_album_art_in_apis' => 'use_external_album_art_in_apis',
        'last_fm_api_key' => 'last_fm_api_key',
        'hide_product_name' => 'hide_product_name',
        'public_custom_css' => 'public_custom_css',
        'public_custom_js' => 'public_custom_js',
        'internal_custom_css' => 'internal_custom_css',
        'backup_enabled' => 'backup_enabled',
        'backup_time_code' => 'backup_time_code',
        'backup_exclude_media' => 'backup_exclude_media',
        'backup_keep_copies' => 'backup_keep_copies',
        'backup_storage_location' => 'backup_storage_location',
        'backup_format' => 'backup_format',
        'backup_last_run' => 'backup_last_run',
        'backup_last_output' => 'backup_last_output',
        'setup_complete_time' => 'setup_complete_time',
        'sync_disabled' => 'sync_disabled',
        'sync_last_run' => 'sync_last_run',
        'external_ip' => 'external_ip',
        'geolite_license_key' => 'geolite_license_key',
        'geolite_last_run' => 'geolite_last_run',
        'enable_advanced_features' => 'enable_advanced_features',
        'mail_enabled' => 'mail_enabled',
        'mail_sender_name' => 'mail_sender_name',
        'mail_sender_email' => 'mail_sender_email',
        'mail_smtp_host' => 'mail_smtp_host',
        'mail_smtp_port' => 'mail_smtp_port',
        'mail_smtp_username' => 'mail_smtp_username',
        'mail_smtp_password' => 'mail_smtp_password',
        'mail_smtp_secure' => 'mail_smtp_secure',
        'avatar_service' => 'avatar_service',
        'avatar_default_url' => 'avatar_default_url',
        'acme_email' => 'acme_email',
        'acme_domains' => 'acme_domains',
        'ip_source' => 'ip_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_unique_identifier' => 'setAppUniqueIdentifier',
        'base_url' => 'setBaseUrl',
        'instance_name' => 'setInstanceName',
        'prefer_browser_url' => 'setPreferBrowserUrl',
        'use_radio_proxy' => 'setUseRadioProxy',
        'history_keep_days' => 'setHistoryKeepDays',
        'always_use_ssl' => 'setAlwaysUseSsl',
        'api_access_control' => 'setApiAccessControl',
        'enable_static_nowplaying' => 'setEnableStaticNowplaying',
        'analytics' => 'setAnalytics',
        'check_for_updates' => 'setCheckForUpdates',
        'update_results' => 'setUpdateResults',
        'update_last_run' => 'setUpdateLastRun',
        'public_theme' => 'setPublicTheme',
        'hide_album_art' => 'setHideAlbumArt',
        'homepage_redirect_url' => 'setHomepageRedirectUrl',
        'default_album_art_url' => 'setDefaultAlbumArtUrl',
        'use_external_album_art_when_processing_media' => 'setUseExternalAlbumArtWhenProcessingMedia',
        'use_external_album_art_in_apis' => 'setUseExternalAlbumArtInApis',
        'last_fm_api_key' => 'setLastFmApiKey',
        'hide_product_name' => 'setHideProductName',
        'public_custom_css' => 'setPublicCustomCss',
        'public_custom_js' => 'setPublicCustomJs',
        'internal_custom_css' => 'setInternalCustomCss',
        'backup_enabled' => 'setBackupEnabled',
        'backup_time_code' => 'setBackupTimeCode',
        'backup_exclude_media' => 'setBackupExcludeMedia',
        'backup_keep_copies' => 'setBackupKeepCopies',
        'backup_storage_location' => 'setBackupStorageLocation',
        'backup_format' => 'setBackupFormat',
        'backup_last_run' => 'setBackupLastRun',
        'backup_last_output' => 'setBackupLastOutput',
        'setup_complete_time' => 'setSetupCompleteTime',
        'sync_disabled' => 'setSyncDisabled',
        'sync_last_run' => 'setSyncLastRun',
        'external_ip' => 'setExternalIp',
        'geolite_license_key' => 'setGeoliteLicenseKey',
        'geolite_last_run' => 'setGeoliteLastRun',
        'enable_advanced_features' => 'setEnableAdvancedFeatures',
        'mail_enabled' => 'setMailEnabled',
        'mail_sender_name' => 'setMailSenderName',
        'mail_sender_email' => 'setMailSenderEmail',
        'mail_smtp_host' => 'setMailSmtpHost',
        'mail_smtp_port' => 'setMailSmtpPort',
        'mail_smtp_username' => 'setMailSmtpUsername',
        'mail_smtp_password' => 'setMailSmtpPassword',
        'mail_smtp_secure' => 'setMailSmtpSecure',
        'avatar_service' => 'setAvatarService',
        'avatar_default_url' => 'setAvatarDefaultUrl',
        'acme_email' => 'setAcmeEmail',
        'acme_domains' => 'setAcmeDomains',
        'ip_source' => 'setIpSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_unique_identifier' => 'getAppUniqueIdentifier',
        'base_url' => 'getBaseUrl',
        'instance_name' => 'getInstanceName',
        'prefer_browser_url' => 'getPreferBrowserUrl',
        'use_radio_proxy' => 'getUseRadioProxy',
        'history_keep_days' => 'getHistoryKeepDays',
        'always_use_ssl' => 'getAlwaysUseSsl',
        'api_access_control' => 'getApiAccessControl',
        'enable_static_nowplaying' => 'getEnableStaticNowplaying',
        'analytics' => 'getAnalytics',
        'check_for_updates' => 'getCheckForUpdates',
        'update_results' => 'getUpdateResults',
        'update_last_run' => 'getUpdateLastRun',
        'public_theme' => 'getPublicTheme',
        'hide_album_art' => 'getHideAlbumArt',
        'homepage_redirect_url' => 'getHomepageRedirectUrl',
        'default_album_art_url' => 'getDefaultAlbumArtUrl',
        'use_external_album_art_when_processing_media' => 'getUseExternalAlbumArtWhenProcessingMedia',
        'use_external_album_art_in_apis' => 'getUseExternalAlbumArtInApis',
        'last_fm_api_key' => 'getLastFmApiKey',
        'hide_product_name' => 'getHideProductName',
        'public_custom_css' => 'getPublicCustomCss',
        'public_custom_js' => 'getPublicCustomJs',
        'internal_custom_css' => 'getInternalCustomCss',
        'backup_enabled' => 'getBackupEnabled',
        'backup_time_code' => 'getBackupTimeCode',
        'backup_exclude_media' => 'getBackupExcludeMedia',
        'backup_keep_copies' => 'getBackupKeepCopies',
        'backup_storage_location' => 'getBackupStorageLocation',
        'backup_format' => 'getBackupFormat',
        'backup_last_run' => 'getBackupLastRun',
        'backup_last_output' => 'getBackupLastOutput',
        'setup_complete_time' => 'getSetupCompleteTime',
        'sync_disabled' => 'getSyncDisabled',
        'sync_last_run' => 'getSyncLastRun',
        'external_ip' => 'getExternalIp',
        'geolite_license_key' => 'getGeoliteLicenseKey',
        'geolite_last_run' => 'getGeoliteLastRun',
        'enable_advanced_features' => 'getEnableAdvancedFeatures',
        'mail_enabled' => 'getMailEnabled',
        'mail_sender_name' => 'getMailSenderName',
        'mail_sender_email' => 'getMailSenderEmail',
        'mail_smtp_host' => 'getMailSmtpHost',
        'mail_smtp_port' => 'getMailSmtpPort',
        'mail_smtp_username' => 'getMailSmtpUsername',
        'mail_smtp_password' => 'getMailSmtpPassword',
        'mail_smtp_secure' => 'getMailSmtpSecure',
        'avatar_service' => 'getAvatarService',
        'avatar_default_url' => 'getAvatarDefaultUrl',
        'acme_email' => 'getAcmeEmail',
        'acme_domains' => 'getAcmeDomains',
        'ip_source' => 'getIpSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_unique_identifier', $data ?? [], null);
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('instance_name', $data ?? [], null);
        $this->setIfExists('prefer_browser_url', $data ?? [], null);
        $this->setIfExists('use_radio_proxy', $data ?? [], null);
        $this->setIfExists('history_keep_days', $data ?? [], null);
        $this->setIfExists('always_use_ssl', $data ?? [], null);
        $this->setIfExists('api_access_control', $data ?? [], null);
        $this->setIfExists('enable_static_nowplaying', $data ?? [], null);
        $this->setIfExists('analytics', $data ?? [], null);
        $this->setIfExists('check_for_updates', $data ?? [], null);
        $this->setIfExists('update_results', $data ?? [], null);
        $this->setIfExists('update_last_run', $data ?? [], null);
        $this->setIfExists('public_theme', $data ?? [], null);
        $this->setIfExists('hide_album_art', $data ?? [], null);
        $this->setIfExists('homepage_redirect_url', $data ?? [], null);
        $this->setIfExists('default_album_art_url', $data ?? [], null);
        $this->setIfExists('use_external_album_art_when_processing_media', $data ?? [], null);
        $this->setIfExists('use_external_album_art_in_apis', $data ?? [], null);
        $this->setIfExists('last_fm_api_key', $data ?? [], null);
        $this->setIfExists('hide_product_name', $data ?? [], null);
        $this->setIfExists('public_custom_css', $data ?? [], null);
        $this->setIfExists('public_custom_js', $data ?? [], null);
        $this->setIfExists('internal_custom_css', $data ?? [], null);
        $this->setIfExists('backup_enabled', $data ?? [], null);
        $this->setIfExists('backup_time_code', $data ?? [], null);
        $this->setIfExists('backup_exclude_media', $data ?? [], null);
        $this->setIfExists('backup_keep_copies', $data ?? [], null);
        $this->setIfExists('backup_storage_location', $data ?? [], null);
        $this->setIfExists('backup_format', $data ?? [], null);
        $this->setIfExists('backup_last_run', $data ?? [], null);
        $this->setIfExists('backup_last_output', $data ?? [], null);
        $this->setIfExists('setup_complete_time', $data ?? [], null);
        $this->setIfExists('sync_disabled', $data ?? [], null);
        $this->setIfExists('sync_last_run', $data ?? [], null);
        $this->setIfExists('external_ip', $data ?? [], null);
        $this->setIfExists('geolite_license_key', $data ?? [], null);
        $this->setIfExists('geolite_last_run', $data ?? [], null);
        $this->setIfExists('enable_advanced_features', $data ?? [], null);
        $this->setIfExists('mail_enabled', $data ?? [], null);
        $this->setIfExists('mail_sender_name', $data ?? [], null);
        $this->setIfExists('mail_sender_email', $data ?? [], null);
        $this->setIfExists('mail_smtp_host', $data ?? [], null);
        $this->setIfExists('mail_smtp_port', $data ?? [], null);
        $this->setIfExists('mail_smtp_username', $data ?? [], null);
        $this->setIfExists('mail_smtp_password', $data ?? [], null);
        $this->setIfExists('mail_smtp_secure', $data ?? [], null);
        $this->setIfExists('avatar_service', $data ?? [], null);
        $this->setIfExists('avatar_default_url', $data ?? [], null);
        $this->setIfExists('acme_email', $data ?? [], null);
        $this->setIfExists('acme_domains', $data ?? [], null);
        $this->setIfExists('ip_source', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_unique_identifier
     *
     * @return string|null
     */
    public function getAppUniqueIdentifier()
    {
        return $this->container['app_unique_identifier'];
    }

    /**
     * Sets app_unique_identifier
     *
     * @param string|null $app_unique_identifier app_unique_identifier
     *
     * @return self
     */
    public function setAppUniqueIdentifier($app_unique_identifier)
    {
        if (is_null($app_unique_identifier)) {
            throw new \InvalidArgumentException('non-nullable app_unique_identifier cannot be null');
        }
        $this->container['app_unique_identifier'] = $app_unique_identifier;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url Site Base URL
     *
     * @return self
     */
    public function setBaseUrl($base_url)
    {
        if (is_null($base_url)) {
            array_push($this->openAPINullablesSetToNull, 'base_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('base_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string|null
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string|null $instance_name AzuraCast Instance Name
     *
     * @return self
     */
    public function setInstanceName($instance_name)
    {
        if (is_null($instance_name)) {
            array_push($this->openAPINullablesSetToNull, 'instance_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instance_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets prefer_browser_url
     *
     * @return bool|null
     */
    public function getPreferBrowserUrl()
    {
        return $this->container['prefer_browser_url'];
    }

    /**
     * Sets prefer_browser_url
     *
     * @param bool|null $prefer_browser_url Prefer Browser URL (If Available)
     *
     * @return self
     */
    public function setPreferBrowserUrl($prefer_browser_url)
    {
        if (is_null($prefer_browser_url)) {
            throw new \InvalidArgumentException('non-nullable prefer_browser_url cannot be null');
        }
        $this->container['prefer_browser_url'] = $prefer_browser_url;

        return $this;
    }

    /**
     * Gets use_radio_proxy
     *
     * @return bool|null
     */
    public function getUseRadioProxy()
    {
        return $this->container['use_radio_proxy'];
    }

    /**
     * Sets use_radio_proxy
     *
     * @param bool|null $use_radio_proxy Use Web Proxy for Radio
     *
     * @return self
     */
    public function setUseRadioProxy($use_radio_proxy)
    {
        if (is_null($use_radio_proxy)) {
            throw new \InvalidArgumentException('non-nullable use_radio_proxy cannot be null');
        }
        $this->container['use_radio_proxy'] = $use_radio_proxy;

        return $this;
    }

    /**
     * Gets history_keep_days
     *
     * @return int|null
     */
    public function getHistoryKeepDays()
    {
        return $this->container['history_keep_days'];
    }

    /**
     * Sets history_keep_days
     *
     * @param int|null $history_keep_days Days of Playback History to Keep
     *
     * @return self
     */
    public function setHistoryKeepDays($history_keep_days)
    {
        if (is_null($history_keep_days)) {
            throw new \InvalidArgumentException('non-nullable history_keep_days cannot be null');
        }
        $this->container['history_keep_days'] = $history_keep_days;

        return $this;
    }

    /**
     * Gets always_use_ssl
     *
     * @return bool|null
     */
    public function getAlwaysUseSsl()
    {
        return $this->container['always_use_ssl'];
    }

    /**
     * Sets always_use_ssl
     *
     * @param bool|null $always_use_ssl Always Use HTTPS
     *
     * @return self
     */
    public function setAlwaysUseSsl($always_use_ssl)
    {
        if (is_null($always_use_ssl)) {
            throw new \InvalidArgumentException('non-nullable always_use_ssl cannot be null');
        }
        $this->container['always_use_ssl'] = $always_use_ssl;

        return $this;
    }

    /**
     * Gets api_access_control
     *
     * @return string|null
     */
    public function getApiAccessControl()
    {
        return $this->container['api_access_control'];
    }

    /**
     * Sets api_access_control
     *
     * @param string|null $api_access_control API 'Access-Control-Allow-Origin' header
     *
     * @return self
     */
    public function setApiAccessControl($api_access_control)
    {
        if (is_null($api_access_control)) {
            array_push($this->openAPINullablesSetToNull, 'api_access_control');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('api_access_control', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['api_access_control'] = $api_access_control;

        return $this;
    }

    /**
     * Gets enable_static_nowplaying
     *
     * @return bool|null
     */
    public function getEnableStaticNowplaying()
    {
        return $this->container['enable_static_nowplaying'];
    }

    /**
     * Sets enable_static_nowplaying
     *
     * @param bool|null $enable_static_nowplaying Whether to use high-performance static JSON for Now Playing data updates.
     *
     * @return self
     */
    public function setEnableStaticNowplaying($enable_static_nowplaying)
    {
        if (is_null($enable_static_nowplaying)) {
            throw new \InvalidArgumentException('non-nullable enable_static_nowplaying cannot be null');
        }
        $this->container['enable_static_nowplaying'] = $enable_static_nowplaying;

        return $this;
    }

    /**
     * Gets analytics
     *
     * @return mixed|null
     */
    public function getAnalytics()
    {
        return $this->container['analytics'];
    }

    /**
     * Sets analytics
     *
     * @param mixed|null $analytics Listener Analytics Collection
     *
     * @return self
     */
    public function setAnalytics($analytics)
    {
        if (is_null($analytics)) {
            array_push($this->openAPINullablesSetToNull, 'analytics');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('analytics', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['analytics'] = $analytics;

        return $this;
    }

    /**
     * Gets check_for_updates
     *
     * @return bool|null
     */
    public function getCheckForUpdates()
    {
        return $this->container['check_for_updates'];
    }

    /**
     * Sets check_for_updates
     *
     * @param bool|null $check_for_updates Check for Updates and Announcements
     *
     * @return self
     */
    public function setCheckForUpdates($check_for_updates)
    {
        if (is_null($check_for_updates)) {
            throw new \InvalidArgumentException('non-nullable check_for_updates cannot be null');
        }
        $this->container['check_for_updates'] = $check_for_updates;

        return $this;
    }

    /**
     * Gets update_results
     *
     * @return mixed[]|null
     */
    public function getUpdateResults()
    {
        return $this->container['update_results'];
    }

    /**
     * Sets update_results
     *
     * @param mixed[]|null $update_results Results of the latest update check.
     *
     * @return self
     */
    public function setUpdateResults($update_results)
    {
        if (is_null($update_results)) {
            array_push($this->openAPINullablesSetToNull, 'update_results');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('update_results', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['update_results'] = $update_results;

        return $this;
    }

    /**
     * Gets update_last_run
     *
     * @return int|null
     */
    public function getUpdateLastRun()
    {
        return $this->container['update_last_run'];
    }

    /**
     * Sets update_last_run
     *
     * @param int|null $update_last_run The UNIX timestamp when updates were last checked.
     *
     * @return self
     */
    public function setUpdateLastRun($update_last_run)
    {
        if (is_null($update_last_run)) {
            throw new \InvalidArgumentException('non-nullable update_last_run cannot be null');
        }
        $this->container['update_last_run'] = $update_last_run;

        return $this;
    }

    /**
     * Gets public_theme
     *
     * @return mixed|null
     */
    public function getPublicTheme()
    {
        return $this->container['public_theme'];
    }

    /**
     * Sets public_theme
     *
     * @param mixed|null $public_theme Base Theme for Public Pages
     *
     * @return self
     */
    public function setPublicTheme($public_theme)
    {
        if (is_null($public_theme)) {
            array_push($this->openAPINullablesSetToNull, 'public_theme');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_theme', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_theme'] = $public_theme;

        return $this;
    }

    /**
     * Gets hide_album_art
     *
     * @return bool|null
     */
    public function getHideAlbumArt()
    {
        return $this->container['hide_album_art'];
    }

    /**
     * Sets hide_album_art
     *
     * @param bool|null $hide_album_art Hide Album Art on Public Pages
     *
     * @return self
     */
    public function setHideAlbumArt($hide_album_art)
    {
        if (is_null($hide_album_art)) {
            throw new \InvalidArgumentException('non-nullable hide_album_art cannot be null');
        }
        $this->container['hide_album_art'] = $hide_album_art;

        return $this;
    }

    /**
     * Gets homepage_redirect_url
     *
     * @return string|null
     */
    public function getHomepageRedirectUrl()
    {
        return $this->container['homepage_redirect_url'];
    }

    /**
     * Sets homepage_redirect_url
     *
     * @param string|null $homepage_redirect_url Homepage Redirect URL
     *
     * @return self
     */
    public function setHomepageRedirectUrl($homepage_redirect_url)
    {
        if (is_null($homepage_redirect_url)) {
            array_push($this->openAPINullablesSetToNull, 'homepage_redirect_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('homepage_redirect_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['homepage_redirect_url'] = $homepage_redirect_url;

        return $this;
    }

    /**
     * Gets default_album_art_url
     *
     * @return string|null
     */
    public function getDefaultAlbumArtUrl()
    {
        return $this->container['default_album_art_url'];
    }

    /**
     * Sets default_album_art_url
     *
     * @param string|null $default_album_art_url Default Album Art URL
     *
     * @return self
     */
    public function setDefaultAlbumArtUrl($default_album_art_url)
    {
        if (is_null($default_album_art_url)) {
            array_push($this->openAPINullablesSetToNull, 'default_album_art_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_album_art_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_album_art_url'] = $default_album_art_url;

        return $this;
    }

    /**
     * Gets use_external_album_art_when_processing_media
     *
     * @return bool|null
     */
    public function getUseExternalAlbumArtWhenProcessingMedia()
    {
        return $this->container['use_external_album_art_when_processing_media'];
    }

    /**
     * Sets use_external_album_art_when_processing_media
     *
     * @param bool|null $use_external_album_art_when_processing_media Attempt to fetch album art from external sources when processing media.
     *
     * @return self
     */
    public function setUseExternalAlbumArtWhenProcessingMedia($use_external_album_art_when_processing_media)
    {
        if (is_null($use_external_album_art_when_processing_media)) {
            throw new \InvalidArgumentException('non-nullable use_external_album_art_when_processing_media cannot be null');
        }
        $this->container['use_external_album_art_when_processing_media'] = $use_external_album_art_when_processing_media;

        return $this;
    }

    /**
     * Gets use_external_album_art_in_apis
     *
     * @return bool|null
     */
    public function getUseExternalAlbumArtInApis()
    {
        return $this->container['use_external_album_art_in_apis'];
    }

    /**
     * Sets use_external_album_art_in_apis
     *
     * @param bool|null $use_external_album_art_in_apis Attempt to fetch album art from external sources in API requests.
     *
     * @return self
     */
    public function setUseExternalAlbumArtInApis($use_external_album_art_in_apis)
    {
        if (is_null($use_external_album_art_in_apis)) {
            throw new \InvalidArgumentException('non-nullable use_external_album_art_in_apis cannot be null');
        }
        $this->container['use_external_album_art_in_apis'] = $use_external_album_art_in_apis;

        return $this;
    }

    /**
     * Gets last_fm_api_key
     *
     * @return string|null
     */
    public function getLastFmApiKey()
    {
        return $this->container['last_fm_api_key'];
    }

    /**
     * Sets last_fm_api_key
     *
     * @param string|null $last_fm_api_key An API key to connect to Last.fm services, if provided.
     *
     * @return self
     */
    public function setLastFmApiKey($last_fm_api_key)
    {
        if (is_null($last_fm_api_key)) {
            array_push($this->openAPINullablesSetToNull, 'last_fm_api_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_fm_api_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_fm_api_key'] = $last_fm_api_key;

        return $this;
    }

    /**
     * Gets hide_product_name
     *
     * @return bool|null
     */
    public function getHideProductName()
    {
        return $this->container['hide_product_name'];
    }

    /**
     * Sets hide_product_name
     *
     * @param bool|null $hide_product_name Hide AzuraCast Branding on Public Pages
     *
     * @return self
     */
    public function setHideProductName($hide_product_name)
    {
        if (is_null($hide_product_name)) {
            throw new \InvalidArgumentException('non-nullable hide_product_name cannot be null');
        }
        $this->container['hide_product_name'] = $hide_product_name;

        return $this;
    }

    /**
     * Gets public_custom_css
     *
     * @return string|null
     */
    public function getPublicCustomCss()
    {
        return $this->container['public_custom_css'];
    }

    /**
     * Sets public_custom_css
     *
     * @param string|null $public_custom_css Custom CSS for Public Pages
     *
     * @return self
     */
    public function setPublicCustomCss($public_custom_css)
    {
        if (is_null($public_custom_css)) {
            array_push($this->openAPINullablesSetToNull, 'public_custom_css');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_custom_css', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_custom_css'] = $public_custom_css;

        return $this;
    }

    /**
     * Gets public_custom_js
     *
     * @return string|null
     */
    public function getPublicCustomJs()
    {
        return $this->container['public_custom_js'];
    }

    /**
     * Sets public_custom_js
     *
     * @param string|null $public_custom_js Custom JS for Public Pages
     *
     * @return self
     */
    public function setPublicCustomJs($public_custom_js)
    {
        if (is_null($public_custom_js)) {
            array_push($this->openAPINullablesSetToNull, 'public_custom_js');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('public_custom_js', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['public_custom_js'] = $public_custom_js;

        return $this;
    }

    /**
     * Gets internal_custom_css
     *
     * @return string|null
     */
    public function getInternalCustomCss()
    {
        return $this->container['internal_custom_css'];
    }

    /**
     * Sets internal_custom_css
     *
     * @param string|null $internal_custom_css Custom CSS for Internal Pages
     *
     * @return self
     */
    public function setInternalCustomCss($internal_custom_css)
    {
        if (is_null($internal_custom_css)) {
            array_push($this->openAPINullablesSetToNull, 'internal_custom_css');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_custom_css', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_custom_css'] = $internal_custom_css;

        return $this;
    }

    /**
     * Gets backup_enabled
     *
     * @return bool|null
     */
    public function getBackupEnabled()
    {
        return $this->container['backup_enabled'];
    }

    /**
     * Sets backup_enabled
     *
     * @param bool|null $backup_enabled Whether backup is enabled.
     *
     * @return self
     */
    public function setBackupEnabled($backup_enabled)
    {
        if (is_null($backup_enabled)) {
            throw new \InvalidArgumentException('non-nullable backup_enabled cannot be null');
        }
        $this->container['backup_enabled'] = $backup_enabled;

        return $this;
    }

    /**
     * Gets backup_time_code
     *
     * @return string|null
     */
    public function getBackupTimeCode()
    {
        return $this->container['backup_time_code'];
    }

    /**
     * Sets backup_time_code
     *
     * @param string|null $backup_time_code The timecode (i.e. 400 for 4:00AM) when automated backups should run.
     *
     * @return self
     */
    public function setBackupTimeCode($backup_time_code)
    {
        if (is_null($backup_time_code)) {
            array_push($this->openAPINullablesSetToNull, 'backup_time_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backup_time_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backup_time_code'] = $backup_time_code;

        return $this;
    }

    /**
     * Gets backup_exclude_media
     *
     * @return bool|null
     */
    public function getBackupExcludeMedia()
    {
        return $this->container['backup_exclude_media'];
    }

    /**
     * Sets backup_exclude_media
     *
     * @param bool|null $backup_exclude_media Whether to exclude media in automated backups.
     *
     * @return self
     */
    public function setBackupExcludeMedia($backup_exclude_media)
    {
        if (is_null($backup_exclude_media)) {
            throw new \InvalidArgumentException('non-nullable backup_exclude_media cannot be null');
        }
        $this->container['backup_exclude_media'] = $backup_exclude_media;

        return $this;
    }

    /**
     * Gets backup_keep_copies
     *
     * @return int|null
     */
    public function getBackupKeepCopies()
    {
        return $this->container['backup_keep_copies'];
    }

    /**
     * Sets backup_keep_copies
     *
     * @param int|null $backup_keep_copies Number of backups to keep, or infinite if zero/null.
     *
     * @return self
     */
    public function setBackupKeepCopies($backup_keep_copies)
    {
        if (is_null($backup_keep_copies)) {
            throw new \InvalidArgumentException('non-nullable backup_keep_copies cannot be null');
        }
        $this->container['backup_keep_copies'] = $backup_keep_copies;

        return $this;
    }

    /**
     * Gets backup_storage_location
     *
     * @return int|null
     */
    public function getBackupStorageLocation()
    {
        return $this->container['backup_storage_location'];
    }

    /**
     * Sets backup_storage_location
     *
     * @param int|null $backup_storage_location The storage location ID for automated backups.
     *
     * @return self
     */
    public function setBackupStorageLocation($backup_storage_location)
    {
        if (is_null($backup_storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'backup_storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backup_storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backup_storage_location'] = $backup_storage_location;

        return $this;
    }

    /**
     * Gets backup_format
     *
     * @return string|null
     */
    public function getBackupFormat()
    {
        return $this->container['backup_format'];
    }

    /**
     * Sets backup_format
     *
     * @param string|null $backup_format The output format for the automated backup.
     *
     * @return self
     */
    public function setBackupFormat($backup_format)
    {
        if (is_null($backup_format)) {
            array_push($this->openAPINullablesSetToNull, 'backup_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backup_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backup_format'] = $backup_format;

        return $this;
    }

    /**
     * Gets backup_last_run
     *
     * @return int|null
     */
    public function getBackupLastRun()
    {
        return $this->container['backup_last_run'];
    }

    /**
     * Sets backup_last_run
     *
     * @param int|null $backup_last_run The UNIX timestamp when automated backup was last run.
     *
     * @return self
     */
    public function setBackupLastRun($backup_last_run)
    {
        if (is_null($backup_last_run)) {
            throw new \InvalidArgumentException('non-nullable backup_last_run cannot be null');
        }
        $this->container['backup_last_run'] = $backup_last_run;

        return $this;
    }

    /**
     * Gets backup_last_output
     *
     * @return string|null
     */
    public function getBackupLastOutput()
    {
        return $this->container['backup_last_output'];
    }

    /**
     * Sets backup_last_output
     *
     * @param string|null $backup_last_output The output of the latest automated backup task.
     *
     * @return self
     */
    public function setBackupLastOutput($backup_last_output)
    {
        if (is_null($backup_last_output)) {
            array_push($this->openAPINullablesSetToNull, 'backup_last_output');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('backup_last_output', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['backup_last_output'] = $backup_last_output;

        return $this;
    }

    /**
     * Gets setup_complete_time
     *
     * @return int|null
     */
    public function getSetupCompleteTime()
    {
        return $this->container['setup_complete_time'];
    }

    /**
     * Sets setup_complete_time
     *
     * @param int|null $setup_complete_time The UNIX timestamp when setup was last completed.
     *
     * @return self
     */
    public function setSetupCompleteTime($setup_complete_time)
    {
        if (is_null($setup_complete_time)) {
            throw new \InvalidArgumentException('non-nullable setup_complete_time cannot be null');
        }
        $this->container['setup_complete_time'] = $setup_complete_time;

        return $this;
    }

    /**
     * Gets sync_disabled
     *
     * @return bool|null
     */
    public function getSyncDisabled()
    {
        return $this->container['sync_disabled'];
    }

    /**
     * Sets sync_disabled
     *
     * @param bool|null $sync_disabled Temporarily disable all sync tasks.
     *
     * @return self
     */
    public function setSyncDisabled($sync_disabled)
    {
        if (is_null($sync_disabled)) {
            throw new \InvalidArgumentException('non-nullable sync_disabled cannot be null');
        }
        $this->container['sync_disabled'] = $sync_disabled;

        return $this;
    }

    /**
     * Gets sync_last_run
     *
     * @return int|null
     */
    public function getSyncLastRun()
    {
        return $this->container['sync_last_run'];
    }

    /**
     * Sets sync_last_run
     *
     * @param int|null $sync_last_run The last run timestamp for the unified sync task.
     *
     * @return self
     */
    public function setSyncLastRun($sync_last_run)
    {
        if (is_null($sync_last_run)) {
            throw new \InvalidArgumentException('non-nullable sync_last_run cannot be null');
        }
        $this->container['sync_last_run'] = $sync_last_run;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string|null
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string|null $external_ip This installation's external IP.
     *
     * @return self
     */
    public function setExternalIp($external_ip)
    {
        if (is_null($external_ip)) {
            array_push($this->openAPINullablesSetToNull, 'external_ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets geolite_license_key
     *
     * @return string|null
     */
    public function getGeoliteLicenseKey()
    {
        return $this->container['geolite_license_key'];
    }

    /**
     * Sets geolite_license_key
     *
     * @param string|null $geolite_license_key The license key for the Maxmind Geolite download.
     *
     * @return self
     */
    public function setGeoliteLicenseKey($geolite_license_key)
    {
        if (is_null($geolite_license_key)) {
            array_push($this->openAPINullablesSetToNull, 'geolite_license_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('geolite_license_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['geolite_license_key'] = $geolite_license_key;

        return $this;
    }

    /**
     * Gets geolite_last_run
     *
     * @return int|null
     */
    public function getGeoliteLastRun()
    {
        return $this->container['geolite_last_run'];
    }

    /**
     * Sets geolite_last_run
     *
     * @param int|null $geolite_last_run The UNIX timestamp when the Maxmind Geolite was last downloaded.
     *
     * @return self
     */
    public function setGeoliteLastRun($geolite_last_run)
    {
        if (is_null($geolite_last_run)) {
            throw new \InvalidArgumentException('non-nullable geolite_last_run cannot be null');
        }
        $this->container['geolite_last_run'] = $geolite_last_run;

        return $this;
    }

    /**
     * Gets enable_advanced_features
     *
     * @return bool|null
     */
    public function getEnableAdvancedFeatures()
    {
        return $this->container['enable_advanced_features'];
    }

    /**
     * Sets enable_advanced_features
     *
     * @param bool|null $enable_advanced_features Whether to enable 'advanced' functionality in the system that is intended for power users.
     *
     * @return self
     */
    public function setEnableAdvancedFeatures($enable_advanced_features)
    {
        if (is_null($enable_advanced_features)) {
            throw new \InvalidArgumentException('non-nullable enable_advanced_features cannot be null');
        }
        $this->container['enable_advanced_features'] = $enable_advanced_features;

        return $this;
    }

    /**
     * Gets mail_enabled
     *
     * @return bool|null
     */
    public function getMailEnabled()
    {
        return $this->container['mail_enabled'];
    }

    /**
     * Sets mail_enabled
     *
     * @param bool|null $mail_enabled Enable e-mail delivery across the application.
     *
     * @return self
     */
    public function setMailEnabled($mail_enabled)
    {
        if (is_null($mail_enabled)) {
            throw new \InvalidArgumentException('non-nullable mail_enabled cannot be null');
        }
        $this->container['mail_enabled'] = $mail_enabled;

        return $this;
    }

    /**
     * Gets mail_sender_name
     *
     * @return string|null
     */
    public function getMailSenderName()
    {
        return $this->container['mail_sender_name'];
    }

    /**
     * Sets mail_sender_name
     *
     * @param string|null $mail_sender_name The name of the sender of system e-mails.
     *
     * @return self
     */
    public function setMailSenderName($mail_sender_name)
    {
        if (is_null($mail_sender_name)) {
            array_push($this->openAPINullablesSetToNull, 'mail_sender_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mail_sender_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mail_sender_name'] = $mail_sender_name;

        return $this;
    }

    /**
     * Gets mail_sender_email
     *
     * @return string|null
     */
    public function getMailSenderEmail()
    {
        return $this->container['mail_sender_email'];
    }

    /**
     * Sets mail_sender_email
     *
     * @param string|null $mail_sender_email The e-mail address of the sender of system e-mails.
     *
     * @return self
     */
    public function setMailSenderEmail($mail_sender_email)
    {
        if (is_null($mail_sender_email)) {
            array_push($this->openAPINullablesSetToNull, 'mail_sender_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mail_sender_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mail_sender_email'] = $mail_sender_email;

        return $this;
    }

    /**
     * Gets mail_smtp_host
     *
     * @return string|null
     */
    public function getMailSmtpHost()
    {
        return $this->container['mail_smtp_host'];
    }

    /**
     * Sets mail_smtp_host
     *
     * @param string|null $mail_smtp_host The host to send outbound SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpHost($mail_smtp_host)
    {
        if (is_null($mail_smtp_host)) {
            array_push($this->openAPINullablesSetToNull, 'mail_smtp_host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mail_smtp_host', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mail_smtp_host'] = $mail_smtp_host;

        return $this;
    }

    /**
     * Gets mail_smtp_port
     *
     * @return int|null
     */
    public function getMailSmtpPort()
    {
        return $this->container['mail_smtp_port'];
    }

    /**
     * Sets mail_smtp_port
     *
     * @param int|null $mail_smtp_port The port for sending outbound SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpPort($mail_smtp_port)
    {
        if (is_null($mail_smtp_port)) {
            throw new \InvalidArgumentException('non-nullable mail_smtp_port cannot be null');
        }
        $this->container['mail_smtp_port'] = $mail_smtp_port;

        return $this;
    }

    /**
     * Gets mail_smtp_username
     *
     * @return string|null
     */
    public function getMailSmtpUsername()
    {
        return $this->container['mail_smtp_username'];
    }

    /**
     * Sets mail_smtp_username
     *
     * @param string|null $mail_smtp_username The username when connecting to SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpUsername($mail_smtp_username)
    {
        if (is_null($mail_smtp_username)) {
            array_push($this->openAPINullablesSetToNull, 'mail_smtp_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mail_smtp_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mail_smtp_username'] = $mail_smtp_username;

        return $this;
    }

    /**
     * Gets mail_smtp_password
     *
     * @return string|null
     */
    public function getMailSmtpPassword()
    {
        return $this->container['mail_smtp_password'];
    }

    /**
     * Sets mail_smtp_password
     *
     * @param string|null $mail_smtp_password The password when connecting to SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpPassword($mail_smtp_password)
    {
        if (is_null($mail_smtp_password)) {
            array_push($this->openAPINullablesSetToNull, 'mail_smtp_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mail_smtp_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mail_smtp_password'] = $mail_smtp_password;

        return $this;
    }

    /**
     * Gets mail_smtp_secure
     *
     * @return bool|null
     */
    public function getMailSmtpSecure()
    {
        return $this->container['mail_smtp_secure'];
    }

    /**
     * Sets mail_smtp_secure
     *
     * @param bool|null $mail_smtp_secure Whether to use a secure (TLS) connection when sending SMTP mail.
     *
     * @return self
     */
    public function setMailSmtpSecure($mail_smtp_secure)
    {
        if (is_null($mail_smtp_secure)) {
            throw new \InvalidArgumentException('non-nullable mail_smtp_secure cannot be null');
        }
        $this->container['mail_smtp_secure'] = $mail_smtp_secure;

        return $this;
    }

    /**
     * Gets avatar_service
     *
     * @return string|null
     */
    public function getAvatarService()
    {
        return $this->container['avatar_service'];
    }

    /**
     * Sets avatar_service
     *
     * @param string|null $avatar_service The external avatar service to use when fetching avatars.
     *
     * @return self
     */
    public function setAvatarService($avatar_service)
    {
        if (is_null($avatar_service)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_service');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_service', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_service'] = $avatar_service;

        return $this;
    }

    /**
     * Gets avatar_default_url
     *
     * @return string|null
     */
    public function getAvatarDefaultUrl()
    {
        return $this->container['avatar_default_url'];
    }

    /**
     * Sets avatar_default_url
     *
     * @param string|null $avatar_default_url The default avatar URL.
     *
     * @return self
     */
    public function setAvatarDefaultUrl($avatar_default_url)
    {
        if (is_null($avatar_default_url)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_default_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_default_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_default_url'] = $avatar_default_url;

        return $this;
    }

    /**
     * Gets acme_email
     *
     * @return string|null
     */
    public function getAcmeEmail()
    {
        return $this->container['acme_email'];
    }

    /**
     * Sets acme_email
     *
     * @param string|null $acme_email ACME (LetsEncrypt) e-mail address.
     *
     * @return self
     */
    public function setAcmeEmail($acme_email)
    {
        if (is_null($acme_email)) {
            array_push($this->openAPINullablesSetToNull, 'acme_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acme_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acme_email'] = $acme_email;

        return $this;
    }

    /**
     * Gets acme_domains
     *
     * @return string|null
     */
    public function getAcmeDomains()
    {
        return $this->container['acme_domains'];
    }

    /**
     * Sets acme_domains
     *
     * @param string|null $acme_domains ACME (LetsEncrypt) domain name(s).
     *
     * @return self
     */
    public function setAcmeDomains($acme_domains)
    {
        if (is_null($acme_domains)) {
            array_push($this->openAPINullablesSetToNull, 'acme_domains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acme_domains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acme_domains'] = $acme_domains;

        return $this;
    }

    /**
     * Gets ip_source
     *
     * @return mixed|null
     */
    public function getIpSource()
    {
        return $this->container['ip_source'];
    }

    /**
     * Sets ip_source
     *
     * @param mixed|null $ip_source IP Address Source
     *
     * @return self
     */
    public function setIpSource($ip_source)
    {
        if (is_null($ip_source)) {
            array_push($this->openAPINullablesSetToNull, 'ip_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ip_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ip_source'] = $ip_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


