<?php
/**
 * ApiStationQueueDetailed
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * The version of the OpenAPI document: 0.20.2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AzuraCast\Model;

use \ArrayAccess;
use \AzuraCast\ObjectSerializer;

/**
 * ApiStationQueueDetailed Class Doc Comment
 *
 * @category Class
 * @package  AzuraCast
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiStationQueueDetailed implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Api_StationQueueDetailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cued_at' => 'int',
        'played_at' => 'int',
        'duration' => 'int',
        'playlist' => 'string',
        'is_request' => 'bool',
        'song' => '\AzuraCast\Model\ApiSong',
        'links' => 'array<string,string>',
        'sent_to_autodj' => 'bool',
        'is_played' => 'bool',
        'autodj_custom_uri' => 'string',
        'log' => 'mixed[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cued_at' => null,
        'played_at' => null,
        'duration' => null,
        'playlist' => null,
        'is_request' => null,
        'song' => null,
        'links' => null,
        'sent_to_autodj' => null,
        'is_played' => null,
        'autodj_custom_uri' => null,
        'log' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cued_at' => false,
        'played_at' => false,
        'duration' => false,
        'playlist' => true,
        'is_request' => false,
        'song' => false,
        'links' => false,
        'sent_to_autodj' => false,
        'is_played' => false,
        'autodj_custom_uri' => true,
        'log' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cued_at' => 'cued_at',
        'played_at' => 'played_at',
        'duration' => 'duration',
        'playlist' => 'playlist',
        'is_request' => 'is_request',
        'song' => 'song',
        'links' => 'links',
        'sent_to_autodj' => 'sent_to_autodj',
        'is_played' => 'is_played',
        'autodj_custom_uri' => 'autodj_custom_uri',
        'log' => 'log'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cued_at' => 'setCuedAt',
        'played_at' => 'setPlayedAt',
        'duration' => 'setDuration',
        'playlist' => 'setPlaylist',
        'is_request' => 'setIsRequest',
        'song' => 'setSong',
        'links' => 'setLinks',
        'sent_to_autodj' => 'setSentToAutodj',
        'is_played' => 'setIsPlayed',
        'autodj_custom_uri' => 'setAutodjCustomUri',
        'log' => 'setLog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cued_at' => 'getCuedAt',
        'played_at' => 'getPlayedAt',
        'duration' => 'getDuration',
        'playlist' => 'getPlaylist',
        'is_request' => 'getIsRequest',
        'song' => 'getSong',
        'links' => 'getLinks',
        'sent_to_autodj' => 'getSentToAutodj',
        'is_played' => 'getIsPlayed',
        'autodj_custom_uri' => 'getAutodjCustomUri',
        'log' => 'getLog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cued_at', $data ?? [], null);
        $this->setIfExists('played_at', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('playlist', $data ?? [], null);
        $this->setIfExists('is_request', $data ?? [], null);
        $this->setIfExists('song', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
        $this->setIfExists('sent_to_autodj', $data ?? [], null);
        $this->setIfExists('is_played', $data ?? [], null);
        $this->setIfExists('autodj_custom_uri', $data ?? [], null);
        $this->setIfExists('log', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cued_at
     *
     * @return int|null
     */
    public function getCuedAt()
    {
        return $this->container['cued_at'];
    }

    /**
     * Sets cued_at
     *
     * @param int|null $cued_at UNIX timestamp when the AutoDJ is expected to queue the song for playback.
     *
     * @return self
     */
    public function setCuedAt($cued_at)
    {
        if (is_null($cued_at)) {
            throw new \InvalidArgumentException('non-nullable cued_at cannot be null');
        }
        $this->container['cued_at'] = $cued_at;

        return $this;
    }

    /**
     * Gets played_at
     *
     * @return int|null
     */
    public function getPlayedAt()
    {
        return $this->container['played_at'];
    }

    /**
     * Sets played_at
     *
     * @param int|null $played_at UNIX timestamp when playback is expected to start.
     *
     * @return self
     */
    public function setPlayedAt($played_at)
    {
        if (is_null($played_at)) {
            throw new \InvalidArgumentException('non-nullable played_at cannot be null');
        }
        $this->container['played_at'] = $played_at;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration Duration of the song in seconds
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets playlist
     *
     * @return string|null
     */
    public function getPlaylist()
    {
        return $this->container['playlist'];
    }

    /**
     * Sets playlist
     *
     * @param string|null $playlist Indicates the playlist that the song was played from, if available, or empty string if not.
     *
     * @return self
     */
    public function setPlaylist($playlist)
    {
        if (is_null($playlist)) {
            array_push($this->openAPINullablesSetToNull, 'playlist');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('playlist', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['playlist'] = $playlist;

        return $this;
    }

    /**
     * Gets is_request
     *
     * @return bool|null
     */
    public function getIsRequest()
    {
        return $this->container['is_request'];
    }

    /**
     * Sets is_request
     *
     * @param bool|null $is_request Indicates whether the song is a listener request.
     *
     * @return self
     */
    public function setIsRequest($is_request)
    {
        if (is_null($is_request)) {
            throw new \InvalidArgumentException('non-nullable is_request cannot be null');
        }
        $this->container['is_request'] = $is_request;

        return $this;
    }

    /**
     * Gets song
     *
     * @return \AzuraCast\Model\ApiSong|null
     */
    public function getSong()
    {
        return $this->container['song'];
    }

    /**
     * Sets song
     *
     * @param \AzuraCast\Model\ApiSong|null $song song
     *
     * @return self
     */
    public function setSong($song)
    {
        if (is_null($song)) {
            throw new \InvalidArgumentException('non-nullable song cannot be null');
        }
        $this->container['song'] = $song;

        return $this;
    }

    /**
     * Gets links
     *
     * @return array<string,string>|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param array<string,string>|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets sent_to_autodj
     *
     * @return bool|null
     */
    public function getSentToAutodj()
    {
        return $this->container['sent_to_autodj'];
    }

    /**
     * Sets sent_to_autodj
     *
     * @param bool|null $sent_to_autodj Indicates whether the song has been sent to the AutoDJ.
     *
     * @return self
     */
    public function setSentToAutodj($sent_to_autodj)
    {
        if (is_null($sent_to_autodj)) {
            throw new \InvalidArgumentException('non-nullable sent_to_autodj cannot be null');
        }
        $this->container['sent_to_autodj'] = $sent_to_autodj;

        return $this;
    }

    /**
     * Gets is_played
     *
     * @return bool|null
     */
    public function getIsPlayed()
    {
        return $this->container['is_played'];
    }

    /**
     * Sets is_played
     *
     * @param bool|null $is_played Indicates whether the song has already been marked as played.
     *
     * @return self
     */
    public function setIsPlayed($is_played)
    {
        if (is_null($is_played)) {
            throw new \InvalidArgumentException('non-nullable is_played cannot be null');
        }
        $this->container['is_played'] = $is_played;

        return $this;
    }

    /**
     * Gets autodj_custom_uri
     *
     * @return string|null
     */
    public function getAutodjCustomUri()
    {
        return $this->container['autodj_custom_uri'];
    }

    /**
     * Sets autodj_custom_uri
     *
     * @param string|null $autodj_custom_uri Custom AutoDJ playback URI, if it exists.
     *
     * @return self
     */
    public function setAutodjCustomUri($autodj_custom_uri)
    {
        if (is_null($autodj_custom_uri)) {
            array_push($this->openAPINullablesSetToNull, 'autodj_custom_uri');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('autodj_custom_uri', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['autodj_custom_uri'] = $autodj_custom_uri;

        return $this;
    }

    /**
     * Gets log
     *
     * @return mixed[]|null
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param mixed[]|null $log Log entries on how the specific queue item was picked by the AutoDJ.
     *
     * @return self
     */
    public function setLog($log)
    {
        if (is_null($log)) {
            array_push($this->openAPINullablesSetToNull, 'log');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('log', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['log'] = $log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


